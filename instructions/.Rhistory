shiny::runApp('/media/pol/TOSHIBA POL/POMA_package')
runApp('/media/pol/TOSHIBA POL/POMA_package')
runApp('/media/pol/TOSHIBA POL/POMA_package')
runApp('/media/pol/TOSHIBA POL/POMA_package')
runApp('/media/pol/TOSHIBA POL/POMA_package')
runApp('/media/pol/TOSHIBA POL/POMA_package')
runApp('/media/pol/TOSHIBA POL/POMA_package')
shiny::runApp('~/Dropbox/Shiny_apps/POMA')
shiny::runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
data <- read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
data <- read_csv("/Users/pol/Dropbox/Shiny_apps/POMA/ST000284/MET_CRC_ST000284.csv")
normality <- data.frame(pval=apply(data[,3:ncol(data)],2,function(x) {shapiro.test(x)$p.value}))
normality$pval <- p.adjust(normality$pval, method = "fdr")
percent.norm <- round((length(normality[normality$pval > 0.05,])/nrow(normality))*100,3)
normality$names <- rownames(normality)
names.normality <- normality[normality$pval > 0.05,2]
homo <- data.frame(pval=apply(data[,3:ncol(data)],2,function(x) {bartlett.test(x, data$Group)$p.value}))
homo$pval <- p.adjust(homo$pval, method = "fdr")
homo <- data.frame(pval=apply(data[,3:ncol(data)],2,function(x) {bartlett.test(x, data$Group)$p.value}))
View(data)
homo <- data.frame(pval=apply(data[,3:ncol(data)],2,function(x) {bartlett.test(x)$p.value}))
#data <- read_csv("/Users/pol/Dropbox/Shiny_apps/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data)[1:2] <- c("ID", "Group")
homo <- data.frame(pval=apply(data[,3:ncol(data)],2,function(x) {bartlett.test(x, data$Group)$p.value}))
homo$pval <- p.adjust(homo$pval, method = "fdr")
percent.homo <- round((length(homo[homo$pval > 0.05,])/nrow(homo))*100,3)
homo$names <- rownames(homo)
names.homo <- homo[homo$pval > 0.05,2]
percent.homo
View(homo)
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
data <- read_csv("/Users/pol/Dropbox/Shiny_apps/POMA/ST000284/MET_CRC_ST000284.csv")
#data <- read_csv("/Users/pol/Dropbox/Shiny_apps/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data)[1:2] <- c("ID", "Group")
samples_group <- data[,1:2]
data <- data[,c(-1,-2)]
#remove zeros
data <- data[, which(colSums(data) != 0)]
#remove NAs
data <- data[,apply(data,2,function(x) !all(is.na(x)))]
#
data <- cbind(samples_group, data)
#supress >20% NA by group
count_NA <- aggregate(. ~ Group, data = data[,2:length(data)], function(x) {100*(sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x))))},
na.action = NULL)
supress <- c(count_NA[1,] > 20 | count_NA[2,] > 20)
data <- data[,2:length(data)][,!supress]
#impute NA by knn
samples_groups<-data[,1:2]
data <-data[,c(3:ncol(data))]
depurdata<-data
depurdata<-t(depurdata)
datai<-impute::impute.knn(as.matrix(depurdata))
depurdata<-t(datai$data)
data<-cbind(samples_groups,depurdata)
View(data)
data <- read_csv("/Users/pol/Dropbox/Shiny_apps/POMA/ST000284/MET_CRC_ST000284.csv")
View(data)
#data <- read_csv("/Users/pol/Dropbox/Shiny_apps/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data)[1:2] <- c("ID", "Group")
samples_group <- data[,1:2]
data <- data[,c(-1,-2)]
#remove zeros
data <- data[, which(colSums(data) != 0)]
#remove NAs
data <- data[,apply(data,2,function(x) !all(is.na(x)))]
#
data <- cbind(samples_group, data)
#supress >20% NA by group
count_NA <- aggregate(. ~ Group, data = data[,2:length(data)], function(x) {100*(sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x))))},
na.action = NULL)
supress <- c(count_NA[1,] > 20 | count_NA[2,] > 20)
data <- data[,2:length(data)][,!supress]
#data <- params$n
data <- read_csv("/Users/pol/Dropbox/Shiny_apps/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data)[1:2] <- c("ID", "Group")
samples_group <- data[,1:2]
data <- data[,c(-1,-2)]
#remove zeros
data <- data[, which(colSums(data) != 0)]
#remove NAs
data <- data[,apply(data,2,function(x) !all(is.na(x)))]
#
data <- cbind(samples_group, data)
#supress >20% NA by group
count_NA <- aggregate(. ~ Group, data = data[,2:length(data)], function(x) {100*(sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x))))},
na.action = NULL)
supress <- c(count_NA[1,] > 20 | count_NA[2,] > 20)
supress
data <- data[,2:length(data)][,!supress]
data <- cbind(samples_group, data)
#impute NA by knn
data <-data[,c(3:ncol(data))]
depurdata<-data
depurdata<-t(depurdata)
datai<-impute::impute.knn(as.matrix(depurdata))
depurdata<-t(datai$data)
data<-cbind(sample_group,depurdata)
data<-cbind(samples_group,depurdata)
View(data)
#data <- params$n
data <- read_csv("/Users/pol/Dropbox/Shiny_apps/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data)[1:2] <- c("ID", "Group")
samples_group <- data[,1:2]
data <- data[,c(-1,-2)]
#remove zeros
data <- data[, which(colSums(data) != 0)]
#remove NAs
data <- data[,apply(data,2,function(x) !all(is.na(x)))]
#
data <- cbind(samples_group, data)
#supress >20% NA by group
count_NA <- aggregate(. ~ Group, data = data[,2:length(data)], function(x) {100*(sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x))))},
na.action = NULL)
supress <- c(count_NA[1,] > 20 | count_NA[2,] > 20)
data <- data[,2:length(data)][,!supress]
data <- cbind(samples_group, data)
#impute NA by knn
data <-data[,c(3:ncol(data))]
depurdata<-data
depurdata<-t(depurdata)
datai<-impute::impute.knn(as.matrix(depurdata))
depurdata<-t(datai$data)
#normalisation
data <- round(apply(data,2,function(x) (log10(x+1)-mean(log10(x+1),na.rm=T))/sd(log10(x+1),na.rm=T)),3)
data <-cbind(samples_group,data)
View(data)
data <- read_csv("/Users/pol/Dropbox/Shiny_apps/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data)[1:2] <- c("ID", "Group")
samples_group <- data[,1:2]
data <- data[,c(-1,-2)]
#remove zeros
data <- data[, which(colSums(data) != 0)]
#remove NAs
data <- data[,apply(data,2,function(x) !all(is.na(x)))]
#
data <- cbind(samples_group, data)
#supress >20% NA by group
count_NA <- aggregate(. ~ Group, data = data[,2:length(data)], function(x) {100*(sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x))))},
na.action = NULL)
supress <- c(count_NA[1,] > 20 | count_NA[2,] > 20)
data <- data[,2:length(data)][,!supress]
#impute NA by knn
depurdata<-data
depurdata<-t(depurdata)
datai<-impute::impute.knn(as.matrix(depurdata))
depurdata<-t(datai$data)
#normalisation
data_norm <- round(apply(depurdata,2,function(x) (log10(x+1)-mean(log10(x+1),na.rm=T))/sd(log10(x+1),na.rm=T)),3)
data_norm <-cbind(samples_group,data_norm)
View(data_norm)
normality <- data.frame(pval=apply(data[,3:ncol(data)],2,function(x) {shapiro.test(x)$p.value}))
normality$pval <- p.adjust(normality$pval, method = "fdr")
percent.norm <- round((length(normality[normality$pval > 0.05,])/nrow(normality))*100,3)
normality$names <- rownames(normality)
names.normality <- normality[normality$pval > 0.05,2]
names.normality
shiny::runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
shiny::runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
shiny::runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
## Packages:
library(ggplot2)
library(png)
library(grid)
library(hexSticker)
## Settings:
#col_bg <- "#7fa3bc"     ## blue
#col_border <- "#336B87"  ## blue
#col_text <- "#F2F1EF"    ##  carrara
#col_bg <- "#96281b"      ## Old brick
#col_border <- "#ef4836"  ## flamingo
#col_text <- "#F2F1EF"    ##  carrara
col_bg <- "#336B87"   ## orange
col_border <- "#f2541b"  ## orange
col_text <- "#F2F1EF"    ##  carrara
n_steps <- 60
y_min <- 1.2
y_max <- 1.6
x_min <- 0.0
x_max <- 1.1
## Read the drawing:
img <- readPNG("/Users/pol/Desktop/poma2.png")
#img_a <- matrix(rgb(img[,,1], img[,,2], img[,,3], img[,,4] * 0.6),
#                nrow = dim(img)[1])
g_img <- rasterGrob(img, width = 0.64, x = 0.5, interpolate = TRUE)
#a_img <- rasterGrob(img2, width = 0.36, x = 0.5, interpolate = TRUE)
## Rectangle with color shade to transparency:
ys <- seq(y_min, y_max, length.out = n_steps + 1)
alpha_steps <- seq(from = 0, to = 0.5, length.out = n_steps)
trans_df <- data.frame(xmin = x_min, xmax = x_max, ymin = ys[-length(ys)],
ymax = ys[-1], alpha = alpha_steps)
trans_rect <- geom_rect(data = trans_df, fill = col_bg,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax,
alpha = alpha))
gg <- ggplot() +
geom_rect(aes(xmin = 0, xmax = 1.5, ymin = 0, ymax = 1.5), fill = NA) +
coord_fixed() +
trans_rect + theme_void() + guides(alpha = FALSE) +
annotation_custom(g_img, xmin = 0, ymin = -0.3)# +
# annotation_custom(a_img, xmin = 0, ymin = -0.56)
## Sticker:
set.seed(123)
sticker(gg, package="POMA", p_size = 9.5, s_x = 0.966, s_y = .85, s_width = 1.27,
s_height = 1.48, p_color = col_text, h_fill = col_bg,
spotlight = TRUE, l_x = 1.01, l_alpha = 0.2,
h_color = col_border, filename="POMA_sticker2.png",
u_color = col_border, url = "polcastellano.shinyapps.io/POMA/")
## Read the drawing:
img <- readPNG("/Users/pol/Desktop/poma2.png")
#img_a <- matrix(rgb(img[,,1], img[,,2], img[,,3], img[,,4] * 0.6),
#                nrow = dim(img)[1])
g_img <- rasterGrob(img, width = 0.64, x = 0.5, interpolate = TRUE)
g_img
#a_img <- rasterGrob(img2, width = 0.36, x = 0.5, interpolate = TRUE)
## Rectangle with color shade to transparency:
ys <- seq(y_min, y_max, length.out = n_steps + 1)
alpha_steps <- seq(from = 0, to = 0.5, length.out = n_steps)
trans_df <- data.frame(xmin = x_min, xmax = x_max, ymin = ys[-length(ys)],
ymax = ys[-1], alpha = alpha_steps)
trans_rect <- geom_rect(data = trans_df, fill = col_bg,
aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax,
alpha = alpha))
gg <- ggplot() +
geom_rect(aes(xmin = 0, xmax = 1.5, ymin = 0, ymax = 1.5), fill = NA) +
coord_fixed() +
trans_rect + theme_void() + guides(alpha = FALSE) +
annotation_custom(g_img, xmin = 0, ymin = -0.3)# +
gg
## Sticker:
set.seed(123)
sticker(gg, package="POMA", p_size = 9.5, s_x = 0.966, s_y = .85, s_width = 1.27,
s_height = 1.48, p_color = col_text, h_fill = col_bg,
spotlight = TRUE, l_x = 1.01, l_alpha = 0.2,
h_color = col_border, filename="/Users/pol/Desktop/POMA_sticker2.png",
u_color = col_border, url = "polcastellano.shinyapps.io/POMA/")
getwd()
shiny::runApp('~/Dropbox/Shiny_apps/POMA')
runApp('~/Dropbox/Shiny_apps/POMA')
