counts <- data.frame(table(data$Group))
colnames(counts) <- c("Group", "Counts")
counts%>%
plot_ly(x=~Var1, y= ~Freq, color= ~Var1, legendgroup=~Var1, type = "bar") %>%
layout(title = "Counts by Group", y = "Counts", x = "Group")
counts%>%
plot_ly(x=~Group, y= ~Counts, color= ~Group, legendgroup=~Group, type = "bar") %>%
layout(title = "Counts by Group", y = "Counts", x = "Group")
X <- as.matrix(data[,3:ncol(data)])
Y <- as.factor(data$Group)
pca.res2<-mixOmics::pca(X, ncomp = 3, center = T, scale = T)
PCi<-data.frame(pca.res2$x,Groups=Y)
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups)
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter')
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter', size = 3)
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter', size = 2)
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter', size = 1.5)
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter', size = 1)
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter')
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter', marker = list(size = 10))
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter', marker = list(size = 12))
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter', marker = list(size = 12, alpha = 0.5))
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter', marker = list(size = 12, opacity = 0.5))
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter', marker = list(size = 12, opacity = 0.7))
nrow(names.normality)
normality <- data.frame(pval=apply(data[,3:ncol(data)],2,function(x) {shapiro.test(x)$p.value}))
normality$pval <- p.adjust(normality$pval, method = "fdr")
percent.norm <- round((length(normality[normality$pval > 0.05,])/nrow(normality))*100,3)
normality$names <- rownames(normality)
names.normality <- normality[normality$pval > 0.05,2]
##
homo <- data.frame(pval=apply(data[,3:ncol(data)],2,function(x) {bartlett.test(x, data$Group)$p.value}))
homo$pval <- p.adjust(homo$pval, method = "fdr")
percent.homo <- round((length(homo[homo$pval > 0.05,])/nrow(homo))*100,3)
homo$names <- rownames(homo)
names.homo <- homo[homo$pval > 0.05,2]
nrow(names.normality)
nrow(normality)
length(normality[normality$pval > 0.05,])
View(normality)
nrow(normality[normality$pval > 0.05,])
runApp()
counts%>%
plot_ly(x=~Group, y= ~Counts, color= ~Group, legendgroup=~Group, type = "bar", opacity = 0.7) %>%
layout(title = "Counts by Group", y = "Counts", x = "Group")
runApp()
View(nas)
nas$names <- rownames(nas)
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", y = "Missing Values", x = "Metabolite")
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", y = "Missing Values", x = "")
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", yaxis = "Missing Values", xaxis = "")
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", yaxis = "Missing Values", xaxis = "")
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", yaxis = "Missing Values", xaxis = "")
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite")
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", yaxis = "Missing Values", xaxis = "s")
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", yaxis = list(title = "Missing Values"))
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", yaxis = list(title = "Missing Values"), xaxis = list(title = ""))
if (nrow(nas) >= 1){
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", yaxis = list(title = "Missing Values"), xaxis = list(title = ""))
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- read_csv("/home/pol/Escritorio/metabolites_MaPLE.csv")
zeros <- x[, !which(colSums(x) != 0)]
zeros <- data[, !which(colSums(data) != 0)]
samples_group <- data[,1:2]
View(samples_group)
data <- data[,c(-1,-2)]
zeros <- data[, !which(colSums(data) != 0)]
View(data)
data <- data[, which(colSums(data) != 0)]
View(data)
normality <- data.frame(pval=apply(data[,3:ncol(data)],2,function(x) {shapiro.test(x)$p.value}))
normality$pval <- p.adjust(normality$pval, method = "fdr")
percent.norm <- round((length(normality[normality$pval > 0.05,])/nrow(normality))*100,3)
normality$names <- rownames(normality)
names.normality <- normality[normality$pval > 0.05,2]
data <- read_csv("/home/pol/Escritorio/metabolites_MaPLE.csv")
#data <- read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data)[1:2] <- c("ID", "Group")
samples_group <- data[,1:2]
data <- data[,c(-1,-2)]
zeros <- data[, -which(colSums(data) != 0)]
data <- data[, which(colSums(data) != 0)]
View(zeros)
data <- cbind(samples_group, data)
View(data)
runApp()
runApp()
data <- read_csv("/home/pol/Escritorio/metabolites_MaPLE.csv")
plot(data$iVA,data$3-`3-HBAld`)
plot(data$iVA,data$`3-HBAld`)
plot(data$iVA,data$`3,4-DHBAld`)
plot(data$`3-HBAld`,data$`3,4-DHBAld`)
runApp()
t.test(HA~Group, data = data)
View(data)
t.test(HA~Sex, data = data)
t.test(HA~Sex, data = data, alternative=c("two.sided"))
runApp()
shiny::runApp()
runApp()
c.data <- readr::read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
c.data <- c.data[,3:ncol(c.data)]
c.data <- as.matrix(round(cor(c.data), 3))
corr_plot.s <- plot_ly(x=colnames(c.data), y=rownames(c.data), z = c.data, type = "heatmap") %>%
layout(xaxis = list(tickangle = 45))
corr_plot.s
runApp()
c.data <- readr::read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
View(c.data)
c.data <- c.data[,3:ncol(c.data)]
c.data <- as.matrix(round(cor(c.data), 3))
View(c.data)
runApp()
View(corr_plot.s)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?cor
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?t.test
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- c(3,2,4,5,3,4,4,3,3)
b<-c(55,4345,564,56,4574,2)
t.test(a,b,var.equal = "TRUE")
t.test(a,b,var.equal = as.factor("TRUE"))
t.test(a,b,var.equal = TRUE)
t.test(a,b,var.equal = 'TRUE')
eval(parse(text = x))
x<- "TRUE"
eval(parse(text = x))
x<- "FALSE"
eval(parse(text = x))
runApp()
runApp()
runApp()
runApp()
dts<-read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
write.csv(dts[,2:ncol(dts)],"/home/pol/Escritorio/dts.csv",row.names = F)
write.csv(dts[,2:ncol(dts)],"/home/pol/Escritorio/dts.csv",row.names = T)
runApp()
log2(-1)
log2(-1.3)
log2(-1.3+1)
-log2(-1.3)
log2(-1.3^2)
exp(-1.3)
-1.3*-1.3
?exp
2.6^1.3
2.6^-1.3
-1.3*-1.3
log2(0.28)
0.7^2
log2(0.49)
log2(500)
runApp()
cor.test(a,b)
a
b
b<-c(2,3,4,23,3,4,2,1,4)
cor.test(a,b)
cor.test(a,b)$p.value
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
?t.test
runApp()
write.csv(iris[1:100,c(5,1:4)], "/home/pol/Escritorio/iris.csv")
runApp()
pol<-iris[1:100,c(5,1:4)]
t.test(pol$Sepal.Length~pol$Species, paired = TRUE)
t.test(pol$Sepal.Length~pol$Species, paired = F)
t.test(pol$Sepal.Length~pol$Species, paired = TRUE)$estimate
t.test(pol$Sepal.Length~pol$Species, paired = TRUE)$estimate[[1]]
t.test(pol$Sepal.Length~pol$Species, paired = TRUE)$estimate[[2]]
t.test(pol$Sepal.Length~pol$Species, paired = TRUE)$p.value
t.test(pol$Sepal.Length~pol$Species, paired = F)$p.value
runApp()
?wilcox.test
wilcox.test(pol$Species~pol$Sepal.Length)
wilcox.test(pol$Species~pol$Sepal.Length,paired = TRUE)
?group_by()
group_by(pol$Sepal.Length ,by = pol$Species)
?make.groups
make.groups(pol$Sepal.Length)
make.groups(pol$Sepal.Length, pol$Species)
wilcox.test(Sepal.Length ~ Species, data = pol, paired = TRUE)
wilcox.test(Sepal.Length ~ Species, data = pol, paired = F)
wilcox.test(Sepal.Length ~ Species, data = pol, paired = TRUE)
wilcox.test(Sepal.Length ~ Species, data = pol, paired = TRUE)
runApp()
pol
Group<-pol$Species
data_uni <- iris[,2:ncol(pol)]
non_param_mann <- NULL
for (i in 1:ncol(data_uni)){
non_param_mann[i] <- wilcox.test(data_uni[,i] ~ as.factor(Group),paired = TRUE)$p.value
}
for (i in 1:ncol(data_uni)){
non_param_mann[i] <- wilcox.test(data_uni[,i] ~ as.factor(Group), data = data_uni, paired = TRUE)$p.value
}
data_uni[,i]
as.factor(Group)
wilcox.test(data_uni[,i] ~ as.factor(Group), data = data_uni, paired = TRUE)$p.value
wilcox.test(data_uni[,i] ~ Group, data = data_uni, paired = TRUE)$p.value
wilcox.test(data_uni$Sepal.Width ~ Group, data = data_uni, paired = TRUE)$p.value
wilcox.test(Sepal.Width ~ Group, data = data_uni, paired = TRUE)$p.value
wilcox.test(Sepal.Width ~ Species, data = data_uni, paired = TRUE)$p.value
wilcox.test(Sepal.Width ~ as.factor(Species), data = data_uni, paired = TRUE)$p.value
data_uni
pol
data_uni <- pol
wilcox.test(Sepal.Width ~ as.factor(Species), data = data_uni, paired = TRUE)$p.value
colnames(data_uni)[1]<-"Group"
data_uni
non_param_mann <- NULL
for (i in 2:ncol(data_uni)){
non_param_mann[i] <- wilcox.test(data_uni[,i] ~ as.factor(Group), data = data_uni, paired = TRUE)$p.value
}
non_param_mann
for (i in 3:ncol(data_uni)){
non_param_mann[i] <- data.frame(P.Value = wilcox.test(data_uni[,i] ~ as.factor(Group), data = data_uni, paired = TRUE)$p.value)
}
non_param_mann
View(non_param_mann)
for (i in 3:ncol(data_uni)){
non_param_mann[i] <- data.frame(P.Value[i] = wilcox.test(data_uni[,i] ~ as.factor(Group), data = data_uni, paired = TRUE)$p.value)
}
for (i in 3:ncol(data_uni)){
non_param_mann[i] <- data.frame(wilcox.test(data_uni[,i] ~ as.factor(Group), data = data_uni, paired = TRUE)$p.value)
}
View(non_param_mann)
for (i in 3:ncol(data_uni)){
non_param_mann[i] <- as.data.frame(wilcox.test(data_uni[,i] ~ as.factor(Group), data = data_uni, paired = TRUE)$p.value)
}
View(non_param_mann)
non_param_mann <- NULL
for (i in 3:ncol(data_uni)){
non_param_mann[i] <- wilcox.test(data_uni[,i] ~ as.factor(Group), data = data_uni, paired = TRUE)$p.value
}
non_param_mann <- data.frame(P.Value = non_param_mann)
View(non_param_mann)
data_uni
non_param_mann <- NULL
for (i in 2:ncol(data_uni)){
non_param_mann[i] <- wilcox.test(data_uni[,i] ~ as.factor(Group), data = data_uni, paired = TRUE)$p.value
}
non_param_mann <- data.frame(P.Value = non_param_mann)
rownames(non_param_mann) <- colnames(data_uni)[3:ncol(data_uni)]
rownames(non_param_mann) <- colnames(data_uni)[2:ncol(data_uni)]
non_param_mann$adj.P.Val <- p.adjust(non_param_mann$P.Value, method = "fdr")
View(non_param_mann)
runApp()
runApp()
as.data.frame(apply(data_uni[,3:ncol(data_uni)],2,function(x){wilcox.test(x ~ as.factor(Group), paired = TRUE)$p.value}))
runApp()
Boston
Boston$GROUP <- c(rep("ONE",35),rep("TWO",36))
Boston[1:70,]
Boston$GROUP <- c(rep("ONE",35),rep("TWO",35))
BST<-Boston[1:70,]
BST$GROUP <- c(rep("ONE",35),rep("TWO",35))
write.csv(BST, "/home/pol/Escritorio/BST.csv")
runApp()
install.packages("formattable")
?formattable::formattable
runApp()
?normalize_bar
runApp()
runApp()
runApp()
runApp()
runApp()
formattable(iris, formatter = area(col = c(Sepal.Lenght)) ~ normalize_bar("pink"))
formattable(iris, list(
Sepal.Lenght = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
formattable(iris, list(
Sepal.Lenght = color_tile("white", "orange")
))
formattable(iris, list(
Sepal.Length = color_tile("white", "orange")
))
formattable(iris, area(col = c(Sepal.Lenght, Sepal.Width)) ~ normalize_bar("pink"))
formattable(iris, list(
Sepal.Lenght = color_tile("white", "orange"),
Species = formatter("span", style = x ~ ifelse(x == "setosa",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(Petal.Length, Petal.Width)) ~ normalize_bar("pink", 0.2)
))
formattable(iris, list(
Species = formatter("span", style = x ~ ifelse(x == "setosa",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(Petal.Length, Petal.Width)) ~ normalize_bar("pink", 0.2)
))
formattable(iris, list(
area(col = c(Petal.Length, Petal.Width)) ~ normalize_bar("pink", 0.2)
))
iris
formattable(iris, list(
area(col = c(Petal.Length, Petal.Width)) ~ normalize_bar("pink")
))
formattable(iris, list(
area(col = c(Petal.Length, Petal.Width)) ~ normalize_bar("pink", 1,0)
))
runApp()
p <- data.frame(
id = c(1, 2, 3, 4, 5),
name = c("A1", "A2", "B1", "B2", "C1"),
balance = accounting(c(52500, 36150, 25000, 18300, 7600), format = "d"),
growth = percent(c(0.3, 0.3, 0.1, 0.15, 0.15), format = "d"),
ready = formattable(c(TRUE, TRUE, FALSE, FALSE, TRUE), "yes", "no"))
p
runApp()
formattable(iris, list(area(col = c(Sepal.Length, Sepal.Width)) ~ normalize_bar("pink")))
pol<-formattable(iris, list(area(col = c(Sepal.Length, Sepal.Width)) ~ normalize_bar("pink")))
pol
runApp()
runApp()
runApp()
runApp()
install.packages('shinyFiles')
?shinyFilesButton
?shinyFiles::shinyFilesButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?RankProducts
data(golub)
#use a subset of data as example, apply the rank
#product method
subset <- c(1:4,28:30)
#Setting rand=123, to make the results reproducible,
RP.out <- RankProducts(golub[,subset],golub.cl[subset],rand=123)
# class 2: label =1, class 1: label = 0
#pfp for identifying genes that are up-regulated in class 2
#pfp for identifying genes that are down-regulated in class 2
head(RP.out$pfp)
#Rank Sum
RS.out <-RankProducts(golub[,subset],golub.cl[subset],rand=123,
calculateProduct=FALSE)
head(RS.out$pfp)
data(golub)
#use a subset of data as example, apply the rank
#product method
subset <- c(1:4,28:30)
#Setting rand=123, to make the results reproducible,
RP.out <- RankProducts(golub[,subset],golub.cl[subset],rand=123)
# class 2: label =1, class 1: label = 0
#pfp for identifying genes that are up-regulated in class 2
#pfp for identifying genes that are down-regulated in class 2
head(RP.out$pfp)
#Rank Sum
RS.out <-RankProducts(golub[,subset],golub.cl[subset],rand=2,
calculateProduct=FALSE)
head(RS.out$pfp)
data(golub)
#use a subset of data as example, apply the rank
#product method
subset <- c(1:4,28:30)
#Setting rand=123, to make the results reproducible,
RP.out <- RankProducts(golub[,subset],golub.cl[subset],rand=123)
# class 2: label =1, class 1: label = 0
#pfp for identifying genes that are up-regulated in class 2
#pfp for identifying genes that are down-regulated in class 2
head(RP.out$pfp)
#Rank Sum
RS.out <-RankProducts(golub[,subset],golub.cl[subset],rand=2,RandomPairs=1,
calculateProduct=FALSE)
head(RS.out$pfp)
data(golub)
#use a subset of data as example, apply the rank
#product method
subset <- c(1:4,28:30)
#Setting rand=123, to make the results reproducible,
RP.out <- RankProducts(golub[,subset],golub.cl[subset],rand=123)
# class 2: label =1, class 1: label = 0
#pfp for identifying genes that are up-regulated in class 2
#pfp for identifying genes that are down-regulated in class 2
head(RP.out$pfp)
#Rank Sum
RS.out <-RankProducts(golub[,subset],golub.cl[subset],rand=2,RandomPairs=3,
calculateProduct=FALSE)
head(RS.out$pfp)
data(golub)
#use a subset of data as example, apply the rank
#product method
subset <- c(1:4,28:30)
#Setting rand=123, to make the results reproducible,
RP.out <- RankProducts(golub[,subset],golub.cl[subset],rand=123)
# class 2: label =1, class 1: label = 0
#pfp for identifying genes that are up-regulated in class 2
#pfp for identifying genes that are down-regulated in class 2
head(RP.out$pfp)
#Rank Sum
RS.out <-RankProducts(golub[,subset],golub.cl[subset],rand=2,RandomPairs=2,
calculateProduct=FALSE)
head(RS.out$pfp)
data(golub)
#use a subset of data as example, apply the rank
#product method
subset <- c(1:4,28:30)
#Setting rand=123, to make the results reproducible,
RP.out <- RankProducts(golub[,subset],golub.cl[subset],rand=123)
# class 2: label =1, class 1: label = 0
#pfp for identifying genes that are up-regulated in class 2
#pfp for identifying genes that are down-regulated in class 2
head(RP.out$pfp)
#Rank Sum
RS.out <-RankProducts(golub[,subset],golub.cl[subset],rand=2,RandomPairs=1,
calculateProduct=FALSE)
head(RS.out$pfp)
runApp()
runApp()
runApp()
?withProgress
runApp()
runApp()
runApp()
runApp()
?bsCollapse
?bsCollapsePanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
