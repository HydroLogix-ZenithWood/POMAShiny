ggplot() +
#  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .2) +
#  scale_x_log10() +
#  geom_vline(xintercept = glance_fit$lambda.min) +
#  geom_vline(xintercept = glance_fit$lambda.1se, lty = 2) +
geom_point(aes(log(lambda), estimate, color=term, group=term), data=tidied_fit)+
theme_minimal() + theme(legend.position="none")
ggplot() +
#  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .2) +
#  scale_x_log10() +
#  geom_vline(xintercept = glance_fit$lambda.min) +
#  geom_vline(xintercept = glance_fit$lambda.1se, lty = 2) +
geom_line(aes(log(lambda), estimate, color=term, group=term), data=tidied_fit)+
theme_minimal() + theme(legend.position="none")
ggplot() +
#  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .2) +
#  scale_x_log10() +
#  geom_vline(xintercept = glance_fit$lambda.min) +
#  geom_vline(xintercept = glance_fit$lambda.1se, lty = 2) +
geom_point(aes(log(lambda), estimate, color=term, group=term), data=tidied_fit)+
theme_minimal() + theme(legend.position="none")
predict(fit,type="coef", s = "lambda.min")
fit <- glmnet(X,Y,family="multinomial")
predict(fit,type="coef", s = "lambda.min")
predict(fit,type="coef", s = min(fit$lambda)
predict(fit,type="coef", s = min(fit$lambda))
predict(fit,type="coef", s = min(fit$lambda))
predict(fit,type="coef", s = min(fit$lambda))[1]
tidy(predict(fit,type="coef", s = min(fit$lambda))[1])
data.frame(predict(fit,type="coef", s = min(fit$lambda))[1])
predict(fit,type="coef", s = min(fit$lambda))[1]
predict(fit,type="coef", s = min(fit$lambda))[1]$
predict(fit,type="coef", s = min(fit$lambda))[,1]
predict(fit,type="coef", s = min(fit$lambda))[,1]
class(predict(fit,type="coef", s = min(fit$lambda))[1])
unlist(predict(fit,type="coef", s = min(fit$lambda))[1])
data.frame(unlist(predict(fit,type="coef", s = min(fit$lambda))[1]))
as.data.frame(as.matrix(unlist(predict(fit,type="coef", s = min(fit$lambda))[1])))
as.data.frame(as.matrix(predict(fit,type="coef", s = min(fit$lambda))[1]))
plotCoefs = function(model, nonzero = T, subset.condition, ...) {
stopifnot(require(ggplot2))
coefs = coef(model)[,1]
coef.labels = attr(coefs, "names")
isLogistic = model$name == "Binomial Deviance"
if (isLogistic) coefs = exp(coefs)
coefs.df = data.frame(label = coef.labels, value = coefs)
coefs.df = coefs.df[order(coefs.df$value),]
coefs.df$label = factor(coefs.df$label, levels = coefs.df$label)
coefs.df = subset(coefs.df, label != "(Intercept)")
if (nonzero) coefs.df = droplevels(subset(coefs.df, value != ifelse(isLogistic, 1, 0)))
if (!missing(subset.condition)) coefs.df = droplevels(subset(coefs.df, eval(subset.condition, coefs.df)))
if (isLogistic) {
coefs.df$sign = ">1"
coefs.df$sign[which(coefs.df$value == 1)] = "=1"
coefs.df$sign[which(coefs.df$value < 1)] = "<1"
coefs.df$sign = factor(coefs.df$sign, levels = c("<1", "=1", ">1"))
} else {
coefs.df$sign = ">0"
coefs.df$sign[which(coefs.df$value == 0)] = "=0"
coefs.df$sign[which(coefs.df$value < 0)] = "<0"
coefs.df$sign = factor(coefs.df$sign, levels = c("<0", "=0", ">0"))
}
p = ggplot(coefs.df,aes(x = label, y = value, fill = sign))
p +
geom_bar(stat='identity') +
coord_flip() +
theme_grey(base_size = 25) +
xlab("Variable") + ylab(ifelse(isLogistic, "Odds Ratio Multiplier", "Value"))
}
plotCoefs(fit)
plotFactorCoefs = function(model, variable, ...) {
stopifnot(require(ggplot2))
variable.ch = deparse(substitute(variable))
coefs = coef(model)[,1]
coef.labels = attr(coefs, "names")
variable.levels = levels(eval(substitute(variable), model$data))
#variable.indices = grep(paste("^",variable.ch, ".*", sep=""), coef.labels)
variable.indices = which(coef.labels %in% paste(variable.ch, variable.levels, sep=""))
base = paste(variable.ch, variable.levels[1], sep="")
labels = c(coef.labels[variable.indices], base)
values = c(coefs[variable.indices], 0)
isLogistic = model$name == "Binomial Deviance"
if (isLogistic) values = exp(values)
coefs.df = data.frame(label = labels, value = values)
n = nrow(coefs.df)
coefs.df[1:(n-1),] = coefs.df[1:(n-1),][order(coefs.df$value[1:(n-1)], coefs.df$label[1:(n-1)]),]
coefs.df$label = factor(coefs.df$label, levels = coefs.df$label)
if (isLogistic) {
coefs.df$sign = ">1"
coefs.df$sign[which(coefs.df$value == 1)] = "=1"
coefs.df$sign[which(coefs.df$value < 1)] = "<1"
coefs.df$sign = factor(coefs.df$sign, levels = c("<1", "=1", ">1"))
} else {
coefs.df$sign = ">0"
coefs.df$sign[which(coefs.df$value == 0)] = "=0"
coefs.df$sign[which(coefs.df$value < 0)] = "<0"
coefs.df$sign = factor(coefs.df$sign, levels = c("<0", "=0", ">0"))
}
p = ggplot(coefs.df,aes(x = label, y = value, fill = sign))
p +
geom_bar(stat='identity') +
coord_flip() +
theme_grey(base_size = 25) +
xlab(variable.ch) + ylab(ifelse(isLogistic, "Odds Ratio Multiplier", "Value")) + labs(title = variable.ch)
}
plotFactorCoefs(fit)
coef(fit)[,1]
autoplot(fit)
fit <- glmnet(X,Y,family="multinomial")
autoplot(fit)
autoplot(glmnet::cv.glmnet(X, Y))
autoplot(glmnet::cv.glmnet(X, Y,family = "multinomial"))
autoplot(glmnet::cv.glmnet(X, Y,family = "multinomial"), color = "blue")
autoplot(glmnet::cv.glmnet(X, Y,family = "multinomial"), color = "lightblue") + theme_minimal()
#############################3
autoplot(glmnet::glmnet(X, Y,family = "multinomial"))
#############################3
autoplot(glmnet::glmnet(is.numeric(X), Y,family = "multinomial"))
#############################3
autoplot(glmnet::glmnet(is.numeric(X, Y),family = "multinomial"))
#############################3
autoplot(glmnet::glmnet(is.numeric(X), is.numeric(Y),family = "multinomial"))
#############################3
autoplot(glmnet::glmnet(X, is.numeric(Y),family = "multinomial"))
#############################3
autoplot(glmnet::glmnet(X, Y,family = "multinomial"))
data(QuickStartExample)
fit <- glmnet::glmnet(x, y)
autoplot(fit)
QuickStartExample
data(QuickStartExample
)
fit <- glmnet::glmnet(X, Y)
fit <- glmnet::glmnet(X, Y, family = "multinomial")
autoplot(fit) + theme_minimal()
fit <- glmnet::glmnet(X, Y)
data(QuickStartExample)
fit <- glmnet::glmnet(X, Y)
data(QuickStartExample)
library(glmnet)
data(QuickStartExample)
fit <- glmnet::glmnet(x, y)
autoplot(fit) + theme_minimal()
?glmnet
?renderPlotly
runApp()
ggplotly(autoplot(glmnet::cv.glmnet(X, Y), color = "lightblue") + theme_minimal())
?glmnet
data_uni<-read_csv("/home/pol/Escritorio/POMA/POMA/example_data/metabolites.csv")
X<-as.matrix(data_uni[,3:ncol(data_uni)])
Y<-as.factor(data_uni$Group)
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
X<-as.matrix(data_uni[,3:ncol(data_uni)])
Y<-as.factor(data_uni$Group)
fit <- glmnet(X,Y)
cv_fit <- cv.glmnet(X,Y, family = "gausian")
cv_fit <- cv.glmnet(X,Y, family = "gaussian")
cv_fit <- cv.glmnet(X,Y, family = "binomial")
X<-as.matrix(data_uni[,3:ncol(data_uni)])
Y<-as.factor(data_uni$Group)
fit <- glmnet(X,Y)
cv_fit <- cv.glmnet(X,Y, family = "binomial")
cv_fit <- cv.glmnet(X,Y, family = "multinomial")
View(data_uni)
X<-as.matrix(data_uni[,5:ncol(data_uni)])
Y<-as.factor(data_uni$Group)
fit <- glmnet(X,Y)
cv_fit <- cv.glmnet(X,Y, family = "multinomial")
fit <- glmnet(X,Y,family = "binomial")
X<-as.matrix(data_uni[,5:ncol(data_uni)])
Y<-as.factor(data_uni$Group)
fit <- glmnet(X,Y,family = "binomial")
data_uni<-read_csv("/home/pol/Escritorio/ST000284/MET_CRC_ST000284.csv")
X<-as.matrix(data_uni[100,3:ncol(data_uni)])
data_uni<-read_csv("/home/pol/Escritorio/ST000284/MET_CRC_ST000284.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
X<-as.matrix(data_uni[100,3:ncol(data_uni)])
Y<-as.factor(data_uni$Group)
fit <- glmnet(X,Y,family = "binomial")
X<-as.matrix(data_uni[200,3:ncol(data_uni)])
Y<-as.factor(data_uni$Group)
fit <- glmnet(X,Y,family = "binomial")
fit <- glmnet(X,Y,family = "multinomial")
data_uni<-read_csv("/home/pol/Escritorio/ST000284/MET_CRC_ST000284.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
X<-as.matrix(data_uni[100,3:ncol(data_uni)])
Y<-as.factor(data_uni$Group)[1:100]
fit <- glmnet(X,Y,family = "multinomial")
Y
X<-as.matrix(data_uni[100,3:ncol(data_uni)])
Y<-as.factor(data_uni$Group)[1:100]
fit <- glmnet(X,Y,family = "multinomial")
runApp()
data_uni<-read_csv("/home/pol/Escritorio/POMA/POMA/example_data/metabolites.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
X<-as.matrix(data_uni[,4:ncol(data_uni)])
Y<-as.factor(data_uni$Group)
fit <- glmnet::glmnet(X, Y)
fit <- glmnet::glmnet(X, Y,family="multinomial")
runApp()
df<-read_csv("/home/pol/Escritorio/POMA/POMA/example_data/metabolites.csv")
Y<-as.factor(df$Group)
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
Y<-as.factor(df$Group)
df<-read_csv("/home/pol/Escritorio/POMA/POMA/example_data/metabolites.csv")
colnames(df)[2]<-"Group"
colnames(df)[1]<-"ID"
Y<-as.factor(df$Group)
X<-as.matrix(df[,3:ncol(df)])
fit <- glmnet(X,Y,family = "multinomial")
fit <- glmnet(X,Y,family = "multinomial", alpha = 1)
fit <- glmnet(X,Y,family = "binomial", alpha = 1)
library(glmnet)
x<-iris[,1:4]
y<-iris[,5]
glmnet(xy)
glmnet(x,y)
x<-iris[100,1:4]
y<-iris[100,5]
glmnet(x,y)
glmnet(x,y, family = "binomial")
x<-iris[80,1:4]
y<-iris[80,5]
glmnet(x,y, family = "binomial")
Y
y
length(Y)
y<-iris[80,5]
y<-as.numeric(levels(y))[y]
y
library(glmnet)
data(QuickStartExample)
fit <- glmnet::glmnet(x, y)
autoplot(fit)
glmnet::glmnet(x,y, family = "binomial")
autoplot(glmnet::glmnet(x,y, family = "binomial"))
library(glmnet)
data(QuickStartExample)
x
class(x)
class(y)
y
fit <- glmnet(X,as.factor(Y),family = "binomial", alpha = 1)
load("BinomialExample.RData")
BinomialExample
df<-read_csv("/home/pol/Escritorio/POMA/POMA/example_data/metabolites.csv")
colnames(df)[2]<-"Group"
colnames(df)[1]<-"ID"
Y<-as.factor(df$Group)
X<-as.matrix(df[,3:ncol(df)])
fit <- glmnet(X,Y,family = "multinomial")
X<-as.matrix(df[,9:ncol(df)])
fit <- glmnet(X,Y,family = "multinomial")
lassoPlot <- ggplotly(autoplot(fit) + theme_minimal())
autoplot(fit) + theme_minimal())
autoplot(fit) + theme_minimal()
autoplot(fit)
lassoPlot <- ggplotly(autoplot(glmnet(X,Y,family = "multinomial")) + theme_minimal())
fit <- glmnet::glmnet(X,Y,family = "multinomial")
lassoPlot <- ggplotly(autoplot(fit) + theme_minimal())
data_uni<-read_csv("/home/pol/Escritorio/ST000284/MET_CRC_ST000284.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
Y<-as.factor(data_uni$Group)
X<-as.matrix(data_uni[,9:ncol(data_uni)])
fit <- glmnet(X,Y,family = "multinomial")
lassoPlot <- ggplotly(autoplot(fit) + theme_minimal())
fit
fit <- glmnet(X,Y,family = "binomial")
plot(fit)
ggfortify::autoplot(fit)
library(ggfortify);autoplot(fit)
autoplot(glmnet::glmnet(X, Y))
autoplot(glmnet::glmnet(X, Y, family = "multinomial"))
cvlasso <- ggplotly(autoplot(cvfit, color = "lightblue") + theme_minimal())
cvlasso
cv_fit <- cv.glmnet(X,Y, family = "binomial")
tidied_cv <- tidy(cv_fit)
glance_cv <- glance(cv_fit)
ggplot(tidied_cv, aes(lambda, estimate)) + geom_line(color = "blue") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .2) +
scale_x_log10() +
geom_vline(xintercept = glance_cv$lambda.min) +
geom_vline(xintercept = glance_cv$lambda.1se, lty = 2) +
theme_minimal()
runApp()
cv_fit <- cv.glmnet(X,Y, family = "binomial")
df<-read_csv("/home/pol/Escritorio/POMA/POMA/example_data/metabolites.csv")
colnames(df)[2]<-"Group"
colnames(df)[1]<-"ID"
Y<-as.factor(df$Group)
X<-as.matrix(df[,9:ncol(df)])
cv_fit <- cv.glmnet(X,Y, family = "binomial")
tidied_cv <- tidy(cv_fit)
glance_cv <- glance(cv_fit)
cvlasso<-ggplotly(ggplot(tidied_cv, aes(lambda, estimate)) + geom_line(color = "blue") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = .2) +
scale_x_log10() +
geom_vline(xintercept = glance_cv$lambda.min) +
geom_vline(xintercept = glance_cv$lambda.1se, lty = 2) +
theme_minimal())
cvlasso
coefficients_l<-coef(cv_fit, s= "lambda.min")[1]$`1`
coefficients_l<-coef(cv_fit, s= "lambda.min")[1]
coefficients_l
cvlasso
tmp_coeffs <- coef(cv_fit, s = "lambda.min")
data.frame(name = tmp_coeffs@Dimnames[[1]][tmp_coeffs@i + 1], coefficient = tmp_coeffs@x)
tmp_coeffs2 <- coef(cv_fit2, s = "lambda.min")
runApp()
fit <- glmnet(X,Y,family="binomial")
lassoPlot<-plot(fit, xvar="norm",cex.lab=1.3, cex.axis=1.2)
autoplot(fit)
autoplot(fit)
autoplot(fit) + theme(legend.position="none") + theme_minimal()
autoplot(fit, legendLabs = NULL)  + theme_minimal()
autoplot(fit, legend = FALSE)  + theme_minimal()
fit <- glmnet(X,Y,family="binomial")
autoplot(fit)  + theme_minimal()
ggplotly(autoplot(fit)  + theme_minimal())
fit2 <- glmnet(X,Y,family="binomial", alpha = 0)
ridgePlot <- ggplotly(autoplot(fit2)  + theme_minimal())
runApp()
data_uni<-read_csv("/home/pol/Escritorio/ST000284/MET_CRC_ST000284.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
Y<-as.factor(data_uni$Group)
X<-as.matrix(data_uni[,3:ncol(data_uni)])
fit <- glmnet(X,Y,family="multinomial")
lassoPlot <- ggplotly(autoplot(fit)  + theme_minimal())
#lassoPlot <- ggplotly(autoplot(fit) + theme_minimal())
plot(fit)
levels(Y)
length(levels(Y))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
getwd()
data <- read_csv("/ST000284/MET_CRC_ST000284.csv")
data <- read_csv("ST000284/MET_CRC_ST000284.csv")
runApp()
runApp()
runApp()
runApp()
install.packages("broom")
runApp()
data <- read_csv("ST000284/MET_CRC_ST000284.csv")
View(data)
data <- read,csv("ST000284/MET_CRC_ST000284.csv")
data <- read.csv("ST000284/MET_CRC_ST000284.csv")
data <- read_csv("ST000284/Libro1.csv")
library(readxl)
MET_CRC_ST000284 <- read_excel("ST000284/MET_CRC_ST000284.xlsx")
View(MET_CRC_ST000284)
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
graph <- startGraph("http://localhost:7474/db/data/", username="neo4j", password="1234")
library(RNeo4j)
graph <- startGraph("http://localhost:7474/db/data/", username="neo4j", password="1234")
clear(graph)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
poma <- read_csv("/Users/pol/Desktop/poma.csv")
View(poma)
runApp()
to_imp_data <- read_csv("/Users/pol/Desktop/poma.csv")
samples_groups<-to_imp_data[,1:2]
to_imp_data<-to_imp_data[,2:length(to_imp_data)]
to_imp_data[to_imp_data == 0] <- NA #
to_imp_data <- cbind(samples_groups,to_imp_data)
View(to_imp_data)
runApp()
runApp()
runApp()
runApp()
runApp()
library(readxl)
c2h_poma <- read_excel("~/Desktop/POMA improvements/c2h_poma.xlsx")
View(c2h_poma)
write_csv(c2h_poma,"/Users/pol/Desktop/pomaaaaa.csv")
runApp()
shiny::runApp()
?grid.arrange
final.plot <- grid.arrange(plot1, plot2, nrow=2)
plot1 <- ggplotly(ggplot(rp_plot, aes(x = rank1, y = pfp1)) +
geom_point(size = 2) +
theme_minimal() +
xlab("Number of identified metabolites") +
ylab("Estimated PFP") +
ggtitle(paste0("Identification of Up-regulated metabolites under class ", class2)))
rp_plot <- data.frame(rank1 = rank1, rank2 = rank2, pfp1 = pfp1 ,  pfp2 = pfp2)
data <- read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
data.cl <- as.numeric(as.factor(data$Group))
data.cl[data.cl == 1] <- 0
data.cl[data.cl == 2] <- 1
class1 <- levels(as.factor(data$Group))[1]
class2 <- levels(as.factor(data$Group))[2]
names <- make.names(data$ID, unique = TRUE)
data <- data[,c(-1,-2)]
data <- t(data)
colnames(data) <- names
RP <- RankProducts(data, data.cl, logged = FALSE, na.rm = TRUE, plot = FALSE,
rand = 123, gene.names = rownames(data))
colnames(data)[2] <- "Group"
data.cl <- as.numeric(as.factor(data$Group))
data.cl[data.cl == 1] <- 0
data.cl[data.cl == 2] <- 1
class1 <- levels(as.factor(data$Group))[1]
class2 <- levels(as.factor(data$Group))[2]
names <- make.names(data$ID, unique = TRUE)
data <- data[,c(-1,-2)]
data <- t(data)
colnames(data) <- names
data.cl <- as.numeric(as.factor(data$Group))
data <- read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data)[2] <- "Group"
data.cl <- as.numeric(as.factor(data$Group))
data.cl[data.cl == 1] <- 0
data.cl[data.cl == 2] <- 1
class1 <- levels(as.factor(data$Group))[1]
class2 <- levels(as.factor(data$Group))[2]
names <- make.names(data$ID, unique = TRUE)
data <- data[,c(-1,-2)]
data <- t(data)
colnames(data) <- names
RP <- RankProducts(data, data.cl, logged = FALSE, na.rm = TRUE, plot = FALSE,
rand = 123, gene.names = rownames(data))
top_rank <- topGene(RP, cutoff = 0.05, method = "pfp",
logged = FALSE, logbase = 2,
gene.names = rownames(data))
one <- as.data.frame(top_rank$Table1)
two <- as.data.frame(top_rank$Table2)
colnames(one)[3] <- paste0("FC: ", class1, "/", class2)
colnames(two)[3] <- paste0("FC: ", class1, "/", class2)
one <- one[,-1]
two <- two[,-1]
x <- RP
pfp = as.matrix(x$pfp)
if (is.null(x$RPs)) {
RP1 = as.matrix(x$RSs)
rank = as.matrix(x$RSrank)
}
if (!is.null(x$RPs)){
RP1 = as.matrix(x$RPs)
rank = as.matrix(x$RPrank)
}
ind1 <- which(!is.na(RP1[, 1]))
ind2 <- which(!is.na(RP1[, 2]))
ind3 <- append(ind1, ind2)
ind3 <- unique(ind3)
RP.sort.upin2 = sort(RP1[ind1, 1], index.return = TRUE)
RP.sort.downin2 = sort(RP1[ind2, 2], index.return = TRUE)
pfp1 <- pfp[ind1, 1]
pfp2 <- pfp[ind2, 2]
rank1 <- rank[ind1, 1]
rank2 <- rank[ind2, 2]
rp_plot <- data.frame(rank1 = rank1, rank2 = rank2, pfp1 = pfp1 ,  pfp2 = pfp2)
plot1 <- ggplotly(ggplot(rp_plot, aes(x = rank1, y = pfp1)) +
geom_point(size = 2) +
theme_minimal() +
xlab("Number of identified metabolites") +
ylab("Estimated PFP") +
ggtitle(paste0("Identification of Up-regulated metabolites under class ", class2)))
plot2 <- ggplotly(ggplot(rp_plot, aes(x = rank2, y = pfp2)) +
geom_point(size = 2) +
theme_minimal() +
xlab("Number of identified metabolites") +
ylab("Estimated PFP") +
ggtitle(paste0("Identification of Down-regulated metabolites under class ", class2)))
final.plot <- grid.arrange(plot1, plot2, nrow=2)
subplot(plot1, plot2)
subplot(plot1, plot2, nrow = 2)
subplot(plot1, plot2, nrows = 2)
subplot(plot1, plot2, nrows = 2, margin = 0.04, heights = c(0.6, 0.4))
subplot(plot1, plot2, nrows = 2)
subplot(plot1, plot2, nrows = 2, titleX = "Hola")
subplot(plot1, plot2, nrows = 2, titleX = TRUE)
