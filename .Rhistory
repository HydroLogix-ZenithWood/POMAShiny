runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?rightSidebar
runApp()
runApp()
?rightSidebarTabContent
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tagList
runApp()
runApp()
runApp()
runApp()
?icon
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?PomaEDA
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dropdownButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
BiocManager::install("Rhdf5lib")
runApp()
install.packages("data.table")
install.packages("data.table")
shiny::runApp()
runApp()
runApp()
data.table::update.dev.pkg()
remotes::install_github("Rdatatable/data.table")
runApp()
runApp()
options(rsconnect.http.trace = TRUE)
options(rsconnect.http.verbose = TRUE)
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
bs4TabItem
?bs4TabItem
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("fresh")
runApp()
?bs4DashControlbarItem
runApp()
?bs4DashControlbarMenu
runApp()
runApp()
runApp()
library(fresh)
?create_theme
create_theme(
theme = "spacelab",
bs_vars_navbar(
default_bg = "#3f2d54",
default_color = "#FFFFFF",
default_link_color = "#FFFFFF",
default_link_active_color = "#FFFFFF"
),
bs_vars_color(
gray_base = "#354e5c",
brand_primary = "#75b8d1",
brand_success = "#c9d175",
brand_info = "#758bd1",
brand_warning = "#d1ab75",
brand_danger = "#d175b8"
),
bs_vars_state(
success_text = "#FFF",
success_bg = "#c9d175",
success_border = "#c9d175",
info_text = "#FFF",
info_bg = "#3f2d54",
info_border = "#3f2d54",
danger_text = "#FFF",
danger_bg = "#d175b8",
danger_border = "#d175b8"
),
bs_vars_wells(
bg = "#FFF",
border = "#3f2d54"
),
output_file = "www/poma_theme.css"
)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?bs4dash_color
runApp()
?bs4SidebarMenuSubItem
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?bs4dash_vars
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?bs4dash_yiq
runApp()
?bs4DashControlbar
runApp()
runApp()
runApp()
?bs4DashControlbarMenu
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
bs4DashGallery(theme = "classic")
bs4DashGallery()
runApp()
runApp()
runApp()
runApp()
?bs4Card
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?bs4Card
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
target <- Biobase::pData(st000336) %>%
rownames_to_column("ID") %>%
rename(Group = 2) %>%
select(1,2)
data <- t(Biobase::exprs(st000336))
covariates <- Biobase::pData(st000336) %>%
rownames_to_column("ID") %>%
select(-2)
features <- data
covariates <- covariates %>% dplyr::select(-1)
prepared_data <- bind_cols(target, covariates, features)
View(prepared_data)
runApp()
runApp()
target <- Biobase::pData(st000336) %>% rownames_to_column("ID") %>% rename(Group = 2)
data <- t(Biobase::exprs(st000336))
prepared_data <- bind_cols(target, features)
features <- data
prepared_data <- bind_cols(target, features)
View(data)
View(features)
View(target)
View(prepared_data)
prepared_data <- cbind(target, features)
View(prepared_data)
runApp()
target <- Biobase::pData(st000336) %>% rownames_to_column("ID") %>% rename(Group = 2)
features <- t(Biobase::exprs(st000336))
prepared_data <- cbind(target, features)
target <- prepared_data %>% select_at(vars(matches(colnames(target))))
features <- prepared_data %>% select_at(-vars(matches(colnames(target))))
features <- prepared_data %>% select_at(vars(-matches(colnames(target))))
View(features)
features <- t(Biobase::exprs(st000336))
View(features)
runApp()
?st000284
?st000336
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pData(st000284)[1]
runApp()
runApp()
runApp()
?tabsetPanel
runApp()
runApp()
runApp()
runApp()
runApp()
?bs4TabPanel
?bs4TabCard
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
f
runApp()
runApp()
search_vars_bs4dash
search_vars_bs4dash()
search_vars_bs4dash() %>% View()
runApp()
runApp()
?bs4TabPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?a
packageVersion("RankProd")
runApp()
runApp()
shiny::runApp()
runApp()
?bs4DashFooter
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ncol(Biobase::pData(st000284)) > 1
ncol(Biobase::pData(st000336)) > 1
ncol(Biobase::pData(st000336))
st000336 %>% PomaImpute() %>% PomaNorm() %>% PomaUnivariate(method = "anova", covariates = TRUE)
st000336 %>% PomaImpute() %>% PomaNorm() %>% PomaUnivariate(method = "anova", covariates = F)
st000336 %>% PomaImpute() %>% PomaNorm() %>% PomaUnivariate(method = "anova", covariates = TRUE)
data <- st000336 %>% PomaImpute() %>% PomaNorm()
PomaUnivariate
Biobase::varLabels(data)[1] <- "Group"
Group <- as.factor(Biobase::pData(data)$Group)
e <- t(Biobase::exprs(data))
group_means <- e %>% as.data.frame() %>% mutate(group = Group)
suppressWarnings({
group_means <- data.frame(aggregate(group_means, by = list(group_means$group),
FUN = mean)) %>% column_to_rownames("Group.1") %>%
t() %>% as.data.frame() %>% round(2) %>% filter(rownames(.) !=
"group")
colnames(group_means) <- paste0("mean_", colnames(group_means))
)
Biobase::varLabels(data)[1] <- "Group"
Group <- as.factor(Biobase::pData(data)$Group)
e <- t(Biobase::exprs(data))
group_means <- e %>% as.data.frame() %>% mutate(group = Group)
group_means <- data.frame(aggregate(group_means, by = list(group_means$group),
FUN = mean)) %>% column_to_rownames("Group.1") %>%
t() %>% as.data.frame() %>% round(2) %>% filter(rownames(.) !=
"group")
colnames(group_means) <- paste0("mean_", colnames(group_means))
covariate_uni <- pData(data)[, 2:ncol(pData(data))]
covariate_uni <- sapply(covariate_uni, as.numeric)
model_names <- paste0(paste0(colnames(covariate_uni),
collapse = " + "), " + Group")
LenCov <- ncol(covariate_uni)
covariate_uni <- as.data.frame(cbind(e, covariate_uni))
n <- ncol(covariate_uni) - LenCov
result <- vector(mode = "list", length = n)
result <- vector(mode = "list", length = n)
n
covariate_uni
model_names
colnames(covariate_uni)
covariate_uni <- pData(data)[, 2:ncol(pData(data))]
covariate_uni
covariate_uni <- sapply(covariate_uni, as.numeric)
covariate_uni
colnames(covariate_uni)
pData(data)
as.data.frame(pData(data)[, 2:ncol(pData(data))])
c
pData(st000284)[, 2:ncol(pData(data))]
pData(st000284)[, 2:ncol(pData(st000284))]
data <- st000284
Biobase::varLabels(data)[1] <- "Group"
Group <- as.factor(Biobase::pData(data)$Group)
e <- t(Biobase::exprs(data))
group_means <- e %>% as.data.frame() %>% mutate(group = Group)
group_means <- data.frame(aggregate(group_means, by = list(group_means$group),
FUN = mean)) %>% column_to_rownames("Group.1") %>%
t() %>% as.data.frame() %>% round(2) %>% filter(rownames(.) !=
"group")
colnames(group_means) <- paste0("mean_", colnames(group_means))
covariate_uni <- as.data.frame(pData(data)[, 2:ncol(pData(data))])
covariate_uni <- sapply(covariate_uni, as.numeric)
model_names <- paste0(paste0(colnames(covariate_uni),
collapse = " + "), " + Group")
model_names
LenCov <- ncol(covariate_uni)
LenCov
covariate_uni <- as.data.frame(cbind(e, covariate_uni))
n <- ncol(covariate_uni) - LenCov
result <- vector(mode = "list", length = n)
for (i in 1:n) {
result[[i]] <- data.frame(pvalue = anova(aov(as.formula(paste(colnames(covariate_uni)[i],
"~", model_names)), data = covariate_uni))$"Pr(>F)"[LenCov +
1])
}
p3 <- bind_rows(result)
rownames(p3) <- colnames(e)
p3 <- p3 %>% mutate(pvalueAdj = p.adjust(pvalue,
method = adjust))
p3 <- bind_cols(group_means, p3)
View(p3)
PomaRankProd
runApp()
runApp()
data <- st000336
length(levels(as.factor(Biobase::pData(data)[,1])) > 2)
length(levels(as.factor(Biobase::pData(data)[,1])))
length(levels(as.factor(Biobase::pData(data)[,1]))) > 2
runApp()
runApp()
validate(need(length(input$my_variables_lasso) > 1, "You need more than one variable to compute lasso!"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
PomaImpute
PomaNorm
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?PomaMultivariate
PomaMultivariate
runApp()
runApp()
runApp()
runApp()
st000336 %>% PomaImpute() %>% PomaNorm() %>% PomaMultivariate(method = "plsda")
st000336 %>% PomaImpute() %>% PomaNorm() %>% PomaMultivariate(method = "plsda", vip = 0.5)
PomaMultivariate
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
PomaVolcano
runApp()
runApp()
st000284 %>% PomaNorm() %>% PomaLimma(contrast = "CRC-Healthy")
aaa <- st000284 %>% PomaNorm() %>% PomaLimma(contrast = "CRC-Healthy")
ggplot(aaa, aes(logFC)) + geom_density()
aaa <- st000284 %>% PomaNorm()
names <- featureNames(aaa)
eee <- PomaLimma(contrast = "Healthy-CRC")
eee <- PomaLimma(aaa, contrast = "Healthy-CRC")
limma_res <- eee
df <- data.frame(pvalue = limma_res$P.Value, FC = log2(limma_res$logFC), names = names)
View(limma_res)
df <- mutate(df, threshold = as.factor(ifelse(df$pvalue >= 0.05,
yes = "none", no = ifelse(df$FC < 1.2,
yes = ifelse(df$FC < -1.2, yes = "Down-regulated",
no = "none"), no = "Up-regulated"))))
View(df)
runApp()
PomaCorr(st000284)
?PomaCorr
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
R.version
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
st000336 %>% PomaImpute() %>% PomaOddsRatio()
runApp()
runApp()
