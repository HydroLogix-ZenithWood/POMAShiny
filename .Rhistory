runApp()
write.table(iris[,c(5,rep(1,150),1:4)], "test.txt", sep = "\n")
runApp()
write.table(iris[,c(5,1:4)], "test.txt", sep = "\n")
runApp()
runApp()
data <- vroom::vroom("/home/pol/Escritorio/Database_InCHIANTIstudy_n1155_9years_DAIRY_2507219.csv", delim = ",")
library(shiny)
?radioButtons
runApp()
runApp()
runApp()
runApp()
getwd()
runApp()
tempdir()
runApp()
runApp()
runApp()
?tempdir
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
data <- vroom::vroom("ST000284/MET_CRC_ST000284.csv", delim = ",")
#data <- vroom::vroom("ST000284/MET_CRC_ST000284.csv", delim = ",")
contrasts <- levels(as.factor(data_limma$Group))
data_limma <- vroom::vroom("ST000284/MET_CRC_ST000284.csv", delim = ",")
#data_limma <- vroom::vroom("ST000284/MET_CRC_ST000284.csv", delim = ",")
contrasts <- levels(as.factor(data_limma$Group))
contrasts
colnames(data_limma)[2] <- "Group
""
"
colnames(data_limma)[2] <- "Group"
#data_limma <- vroom::vroom("ST000284/MET_CRC_ST000284.csv", delim = ",")
#colnames(data_limma)[2] <- "Group"
contrasts <- levels(as.factor(data_limma$Group))
contrasts
combinations <- expand.grid(contrasts, contrasts)
combinations <- combinations[!(combinations$Var1 == combinations$Var2),]
combinations <- combinations[!duplicated(t(apply(combinations[c("Var1", "Var2")], 1, sort))), ]
combinations
combinationNames <- c()
for (i in 1:nrow(combinations)){
combinationNames[i] <- paste0(combinations$Var1[i],"-",combinations$Var2[i])
}
combinationNames
combinationNames[1]
fac1 <- as.factor(data_limma$Group)
library(limma)
initialmodel <- model.matrix( ~ 0 + fac1)
colnames(initialmodel) <- contrasts
cont.matrix <- limma::makeContrasts(contrasts = input$coef_limma,
levels = initialmodel)
contrasts
initialmodel
combinationNames[1]
cont.matrix <- limma::makeContrasts(contrasts = "H-C",
levels = initialmodel)
trans_limma <- t(data_limma[,c(3:ncol(data_limma))])
model <- lmFit(trans_limma, initialmodel)
model <- contrasts.fit(model, cont.matrix)
modelstats <- eBayes(model)
res <- topTable(modelstats, number = ncol(data_limma) ,
coef = "H-C",
sort.by = "p")
metabolite_name <- rownames(res)
logFC <- round(res$logFC,3)
AveExpr <- round(res$AveExpr,3)
t <- round(res$t,3)
B <- round(res$B,3)
P.Value <- res$P.Value
adj.P.Val <- res$adj.P.Val
res <- as.data.frame(cbind(logFC, AveExpr, t, B, P.Value, adj.P.Val))
rownames(res) <- metabolite_name
View(res)
shiny::runApp()
runApp()
packageVersion("limma")
BiocManager::install("limma")
packageVersion("limma")
library
runApp()
runApp()
shiny::runGitHub("shinyLimma", "SJCaldwell")
install.packages("shinyTable")
R_min_version = "3.1.0"
R_version = paste0(R.Version()$major, ".", R.Version()$minor)
if(compareVersion(R_version, R_min_version) < 0){
stop("You do not have the latest required.\n",
"Launch will fail if you continue.\n",
"Go to http://cran.r-project.org/ to update your version of R.")
}
######
#Install basic required packages if not available/installed
######
download_not_installed <- function(x){
availpacks = .packages(all.available = TRUE)
source("http://bioconductor.org/biocLite.R")
missingPackages = x[!(x %in% availpacks)]
message("The following packages were missing. Installation attempted...")
message(missingPackages)
if (length(missingPackages) > 0){
for (i in missingPackages){
message("Installing", i, "package using biocLite...\n")
biocLite(i)
}
}
}
vanilla_install_packages <- c("limma",
'markdown',
'shiny',
'shinyjs',
'shinyBS',
'scales',
'markdown',
'ggplot2',
'png',
'vsn',
'RUnit',
'reshape',
'digest',
'Rcpp',
'VennDiagram',
'convert'
)
download_not_installed(vanilla_install_packages)
###################################
#Should use latest version of shiny
###################################
shiny_okay <- FALSE
if ("shiny" %in% .packages(all.available = TRUE)){
shiny_min_version = "0.11"
shiny_compare = compareVersion(as.character(packageVersion("shiny")), shiny_min_version)
if (shiny_compare >= 0){
shiny_okay <- TRUE
}
}
if(!shiny_okay){
install.packages('devtools')
devtools::install_github("rstudio/shiny")
}
devtools::install_github("trestletech/shinyTable")
shiny::runGitHub("shinyLimma", "SJCaldwell")
install.packages("RUnit")
shiny::runGitHub("shinyLimma", "SJCaldwell")
install.packages("convert")
shiny::runGitHub("shinyLimma", "SJCaldwell")
runApp()
initialmodel
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
installifnot <- function(pckgName){
if (!(require(pckgName, character.only = TRUE))) {
install.packages(pckgName, dep = TRUE)
require(pckgName, character.only = TRUE)
}
}
pk1 <- c("shiny", "shinydashboard", "DT", "reshape2", "ggplot2", "gplots", "scales", "plotly", "readxl", "glmnet", "ggvis", "shinyhelper",
"broom", "readr", "markdown", "ggthemes", "dplyr", "ggrepel", "ggfortify", "shinyBS", "glue", "limma", "tidyr", "mixOmics", "devtools",
"Rcpp", "randomForest", "tidyverse", "ggpubr", "gridExtra", "formattable", "viridis", "knitr","kableExtra", "vroom", "prettydoc")
for (i in 1:length(pk1)){
installifnot(pk1[i])
}
install.packages(pk1)
install.packages(pk1)
shiny::runApp()
runApp()
R.version
shiny::runApp()
R.version
runApp()
install.packages("rsconnect")
install.packages("rsconnect")
shiny::runApp()
BiocManager::install("mixOmics")
runApp()
shiny::runApp()
runApp()
shiny::runApp()
library(tidyverse)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?numericInput
runApp()
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
data <- data("iris")
data
data("iris")
boxplot(iris$Sepal.Length~iris$Petal.Length)
boxplot(iris$Sepal.Length,iris$Petal.Length)
boxplot(iris$Sepal.Length,iris$)
boxplot(iris$Sepal.Length,iris$Species)
t.test(iris$Sepal.Length, iris$Species)
t.test(iris$Sepal.Length, iris$Petal.Length)
t.test(iris$Sepal.Length, iris$Sepal.Length)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
?POMA::PomaVolcano
POMA::PomaUnivariate()
POMA::PomaUnivariate
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
table(samples_groups$Group
)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
POMA::PomaMultivariate()
POMA::PomaMultivariate
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(mixOmics)
data(liver.toxicity)
X <- as.matrix(liver.toxicity$gene)
Y <- as.factor(liver.toxicity$treatment[, 4])
## PLS-DA function
plsda.res <- plsda(X, Y, ncomp = 5)
plsda.vip<-as.data.frame(vip(plsda.res))
plsda.vip
plsda.vip.top <- plsda.vip[plsda.vip$comp1 > 1,]
plsda.vip.top
plsda.vip.top <- plsda.vip.top[order(plsda.vip.top$comp1) ,]
plsda.vip.top
plsda.vip.top <- plsda.vip.top[order(plsda.vip.top$comp1, decreasing = T) ,]
plsda.vip.top$Features <- rownames(plsda.vip.top)
colnames(plsda.vip.top)[1] <- "VIP"
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=Features, y=VIP)) +
geom_bar(stat="identity", fill = rep(c("lightblue"), nrow(plsda.vip.top))) +
coord_flip() +
theme_bw())
vip_plsda
runApp()
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=Features, y=VIP)) +
geom_bar(stat="identity", fill = rep(c("lightblue"), nrow(plsda.vip.top))) +
coord_flip() +
xlab("") +
theme_bw())
vip_plsda
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=Features, y=reorder(VIP, Features))) +
geom_bar(stat="identity", fill = rep(c("lightblue"), nrow(plsda.vip.top))) +
coord_flip() +
xlab("") +
theme_bw())
vip_plsda
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=reorder(Features, VIP), y=VIP)) +
geom_bar(stat="identity", fill = rep(c("lightblue"), nrow(plsda.vip.top))) +
coord_flip() +
xlab("") +
theme_bw())
vip_plsda
runApp()
runApp()
runApp()
devtools::install_github("pcastellanoescuder/POMA")
shiny::runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("~/Dropbox/POMA/POMA_Shiny/data/st000284.rda")
library(MSnbase)
load("~/Dropbox/POMA/POMA_Shiny/data/st000284.rda")
View(st000284)
library(Biobase)
features <- t(exprs(st000284))
View(features)
getwd()
write.csv(features, "data/features.csv")
target <- pData(st000284)
View(target)
View(features)
write.csv(features, "data/features.csv", row.names = F)
library(tidyverse)
target <- target %>% rownames_to_column("ID")
colnames(target)[2] <- "Group"
View(target)
write.csv(target[,1:2], "data/target.csv", row.names = F)
write.csv(target[,c(1,3:6)], "data/covariables.csv", row.names = F)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
runApp()
?selectizeInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/toy.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
POMA::PomaNormPlot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
metabolites <- readr::read_csv("data/features.csv")
target <- readr::read_csv("data/target.csv")
to_boxplot <- cbind(target, metabolites)
boxP <- to_boxplot %>%
dplyr::select(-ID) %>%
reshape2::melt() %>%
filter(variable %in% input$sel_boxplot) %>%
group_by(Group) %>%
ggplot(aes(variable, value, fill = Group)) +
geom_violin() +
ylab("Value") +
xlab("") +
{if(input$jitter)geom_jitter()} +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw()
boxP <- to_boxplot %>%
dplyr::select(-ID) %>%
reshape2::melt() %>%
filter(variable %in% input$sel_boxplot) %>%
group_by(Group) %>%
ggplot(aes(variable, value, fill = Group)) +
geom_violin() +
ylab("Value") +
xlab("") +
# {if(input$jitter)geom_jitter()} +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw()
boxP <- to_boxplot %>%
dplyr::select(-ID) %>%
reshape2::melt() %>%
# filter(variable %in% input$sel_boxplot) %>%
group_by(Group) %>%
ggplot(aes(variable, value, fill = Group)) +
geom_violin() +
ylab("Value") +
xlab("") +
# {if(input$jitter)geom_jitter()} +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw()
boxP
names_boxplot <- colnames(to_boxplot)[3:ncol(to_boxplot)]
boxP <- to_boxplot %>%
dplyr::select(-ID) %>%
reshape2::melt() %>%
filter(variable %in% names_boxplot[1:2]) %>%
group_by(Group) %>%
ggplot(aes(variable, value, fill = Group)) +
geom_violin() +
ylab("Value") +
xlab("") +
# {if(input$jitter)geom_jitter()} +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw()
boxP
to_boxplot %>%
dplyr::select(-ID) %>%
reshape2::melt() %>%
filter(variable %in% names_boxplot[1:2]) %>%
group_by(Group) %>%
ggplot(aes(variable, value, fill = Group)) +
geom_violin() +
ylab("Value") +
xlab("") +
# {if(input$jitter)geom_jitter()} +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw()
boxP <- plotly::ggplotly(boxP)
boxP
to_boxplot %>%
dplyr::select(-ID) %>%
reshape2::melt() %>%
filter(variable %in% names_boxplot[1:2]) %>%
group_by(Group) %>%
ggplot(aes(variable, value, fill = Group)) +
geom_violin() +
geom_boxplot() +
ylab("Value") +
xlab("") +
# {if(input$jitter)geom_jitter()} +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw()
boxP <- to_boxplot %>%
dplyr::select(-ID) %>%
reshape2::melt() %>%
filter(variable %in% names_boxplot[1:2]) %>%
group_by(Group) %>%
ggplot(aes(variable, value, fill = Group)) +
geom_violin() +
ylab("Value") +
xlab("") +
# {if(input$jitter)geom_jitter()} +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw() + geom_jitter()
boxP
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
