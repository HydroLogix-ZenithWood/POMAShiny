errors_splsda <- cbind(errors_splsda1,sd = errors_sd[,3])
bal_error_rate <- ggplotly(ggplot(data=errors_splsda, aes(x=features, y=value, group=variable)) +
geom_line(aes(color=variable)) +
geom_point(aes(color=variable)) +
geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.1) +
theme_minimal() +
geom_point(size=3,alpha=0.5) + #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D","blue","darkgoldenrod2","gray9")))
if (ncomp == 1){
ncompX<-2
}else{
ncompX<-ncomp}
res.splsda <- splsda(X, Y, ncomp = ncompX, keepX = select.keepX)
bal_error_rate
SPLSDAi<-data.frame(res.splsda$variates$X, Groups=Y)
colnames(SPLSDAi)[1:2]<-c("Component 1", "Component 2")
splsda <- ggplotly(ggplot(SPLSDAi, aes(x=`Component 1`,y=`Component 2`,col=Groups))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D","blue","darkgoldenrod2","gray9"))
+ #your colors here
stat_ellipse(aes(x=`Component 1`,y=`Component 2`,col=Groups),
type = "norm")
+ theme_minimal())
splsdaX <- data.frame(res.splsda$variates$X)
selected_variables <- data.frame(selectVar(res.splsda, comp = 1))[,1:2]
splsda
selected_variables
View(selected_variables)
selected_variables <- data.frame(selectVar(res.splsda, comp = 1))[,2]
selected_variables <- data.frame(selectVar(res.splsda, comp = 1))[,1:2]
View(selected_variables)
class(selected_variables)
selected_variables <- data.frame(selectVar(res.splsda, comp = 1))
View(selected_variables)
selected_variables[,2]
selected_variables$value.var
selected_variables <- selectVar(res.splsda, comp = 1)
selected_variables
selected_variables <- data.frame(selected_variables$value)
View(selected_variables)
runApp()
selected_variables <- selected_variables$value
class(selected_variables)
selected_variables <- as.data.frame(selected_variables$value)
selected_variables <- as.data.frame(selected_variables$value)
selected_variables <- as.data.frame(selected_variables[2])
selected_variables
selected_variables <- as.data.frame(selected_variables[,2])
selected_variables <- as.data.frame(selected_variables[[2]])
selected_variables <- selectVar(res.splsda, comp = 1)
selected_variables <- as.data.frame(selected_variables[[2]])
selected_variables
class(selected_variables)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(pls)
data_uni<-read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
df<-data_uni[,3:ncol(data_uni)]
df_train <- df[nrow(df)/1/3,]
View(df_train)
df_train <- df[1:nrow(df)/1/3,]
df_train <- df[1:nrow(df)/(1/3),]
?sample()
df_train <- sample(df, 1/3 * nrow(df), replace=FALSE)
View(df_train)
1/3 * nrow(df)
round(1/3 * nrow(df))
df_train <- sample(df, round(1/3 * nrow(df)), replace=FALSE)
View(df_train)
df_train <- sample(rownames(df), round(1/3 * nrow(df)), replace=FALSE)
df_train
df<-data_uni[,3:ncol(data_uni)]
df_train <- df[rownames(df) %in% sample(rownames(df), round(1/3 * nrow(df)), replace=FALSE),]
View(df_train)
df<-data_uni[,3:ncol(data_uni)]
df_train <- df[rownames(df) %in% sample(rownames(df), round(1/3 * nrow(df)), replace=FALSE),] ; rownames(df) <- sample(rownames(df), round(1/3 * nrow(df)), replace=FALSE)
df_train <- df[rownames(df) %in% sample(rownames(df), round(1/3 * nrow(df)), replace=FALSE),] ; rownames(df) <- c(sample(rownames(df), round(1/3 * nrow(df)), replace=FALSE))
df<-data_uni[,3:ncol(data_uni)]
df_train <- df[sample(nrow(df), round(1/3 * nrow(df))),]
View(df_train)
?plsr
df_test <-
pls_mod <- plsr(Group ~ ., ncomp = 10, data = df_train, validation = "LOO")
data_uni<-read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
df <- data_uni[,2:ncol(data_uni)]
df_train <- df[sample(nrow(df), round(1/3 * nrow(df))),]
df_test <-
pls_mod <- plsr(Group ~ ., ncomp = 10, data = df_train, validation = "LOO")
View(pls_mod)
data_uni<-read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
df <- data_uni[,2:ncol(data_uni)]
df_train <- df[sample(nrow(df), round(1/3 * nrow(df))),]
pls_mod <- plsr(as.factor(Group) ~ ., ncomp = 10, data = df_train, validation = "LOO")
View(df_train)
data_uni<-read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
X <- data_uni[,3:ncol(data_uni)]
Y <- data_uni$Group
#PLS
result <- pls(X, Y, ncomp = 3)  # where ncomp is the number of dimensions/components to choose
X <- as.matrix(data_uni[,3:ncol(data_uni)])
Y <- as.factor(data_uni$Group)
#PLS
result <- pls(X, Y, ncomp = 3)  # where ncomp is the number of dimensions/components to choose
#PLS
result <- mixOmics::pls(X, Y, ncomp = 3)  # where ncomp is the number of dimensions/components to choose
class(X)
X <- as.matrix(data_uni[,3:ncol(data_uni)])
data_uni<-read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
View(data_uni)
X <- as.matrix(data_uni[,3:ncol(data_uni)])
X <- data.matrix(data_uni[,3:ncol(data_uni)])
__________________---
data(liver.toxicity)
__________________---
data(liver.toxicity)
X <- liver.toxicity$gene
Y <- liver.toxicity$clinic
#PLS
result <- pls(X, Y, ncomp = 3)  # where ncomp is the number of dimensions/components to choose
tune.pls <- perf(result, validation = 'loo', criterion = 'all', progressBar = FALSE)
tune.pls
plot(tune.pls)
class(X)
class(Y)
X <- data.frame(data_uni[,3:ncol(data_uni)])
X <- data.frame(data_uni[,3:ncol(data_uni)])
Y <- as.factor(data_uni$Group)
#PLS
result <- pls(X, Y, ncomp = 3)  # where ncomp is the number of dimensions/components to choose
Y <- data.frame(data_uni$Group)
#PLS
result <- pls(X, Y, ncomp = 3)  # where ncomp is the number of dimensions/components to choose
X <- as.matrix(data_uni[,3:ncol(data_uni)])
Y <- as.matrix(data_uni$Group)
#PLS
result <- pls(X, Y, ncomp = 3)  # where ncomp is the number of dimensions/components to choose
tune.pls <- perf(result, validation = 'loo', criterion = 'all', progressBar = FALSE)
result
__________________---
data(liver.toxicity)
X <- liver.toxicity$gene
Y <- liver.toxicity$clinic
View(X)
View(Y)
X <- as.matrix(data_uni[,3:ncol(data_uni)])
X <- data_frame(data_uni[,3:ncol(data_uni)])
X <- data.frame(data_uni[,3:ncol(data_uni)])
Y <- as.matrix(data_uni$Group)
#PLS
result <- pls(X, Y, ncomp = 3)  # where ncomp is the number of dimensions/components to choose
class(X)
__________________---
class(liver.toxicity)
liver.toxicity
X <- liver.toxicity$gene
Y <- liver.toxicity$clinic
class(X)
class(Y)
class(X$A_43_P14555)
data_uni<-read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
#data_uni<-read_csv("/home/pol/Escritorio/POMA/POMA/example_data/metabolites.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
####
X <- data.frame(data_uni[,3:ncol(data_uni)])
class(X$Methylhistamine)
X <- data.matrix(data_uni[,3:ncol(data_uni)])
class(X$Methylhistamine)
X <- data.frame(data.matrix(data_uni[,3:ncol(data_uni)]))
class(X$Methyladenosine)
Y <- as.matrix(data_uni$Group)
#PLS
result <- pls(X, Y, ncomp = 3)  # where ncomp is the number of dimensions/components to choose
X <- data.frame(data.matrix(data_uni[,3:ncol(data_uni)]))
Y <- as.matrix(data_uni$Group)
X <- as.matrix(sapply(X, as.numeric))
X <- data.frame(as.matrix(sapply(X, as.numeric)))
View(X)
data_uni<-read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
class(X$Methyladenosine)
class(data_uni$Methyladenosine)
X <- lapply(X, as.numeric)
View(X)
data_uni<-read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
####
X <- data.frame(data.matrix(data_uni[,3:ncol(data_uni)]))
X <- unlist(lapply(X, as.numeric))
class(liver.toxicity)
X <- liver.toxicity$gene
Y <- liver.toxicity$clinic
#PLS
result <- pls(X, Y, ncomp = 5)  # where ncomp is the number of dimensions/components to choose
tune.pls <- perf(result, validation = 'loo', criterion = 'all', progressBar = FALSE)
results
result$X
PLSi<-data.frame(results,Groups=Y)
PLSi<-data.frame(result,Groups=Y)
PLSi<-data.frame(result$X, Groups=Y)
View(PLSi)
#########
library(readr)
library(mixOmics)
library(ggplot2)
data_uni<-read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
View(data_uni)
X <- as.matrix(data_uni[,3:ncol(data_uni)])
Y <- as.factor(data_uni$Group)
#PLS
result <- pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
#PLS
result <- pls(as.matrix(X), Y, ncomp = 3, mode = "regression", scale = FALSE)
#PLS
result <- pls(as.matrix(X), as.matrix(Y), ncomp = 3, mode = "regression", scale = FALSE)
data_uni<-read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
data_uni$Group<-as.factor(data_uni$Group)
df<-as.matrix(data_uni[,c(3:ncol(data_uni))])
X <- as.matrix(data_uni[,3:ncol(data_uni)])
Y <- as.factor(data_uni$Group)
#PLS
result <- pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
data_uni <- read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
class(data_uni)
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
View(data_uni)
X <- as.matrix(data_uni[,3:ncol(data_uni)])
Y <- as.factor(data_uni$Group)
#PLS
result <- pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
X <- as.matrix(data_uni[,3:ncol(data_uni)])
X <- matrix(as.numeric(unlist(X)),nrow=nrow(X))
X <- data.frame(matrix(as.numeric(unlist(X)),nrow=nrow(X)))
Y <- as.factor(data_uni$Group)
#PLS
result <- pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
View(X)
data_uni <- read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
X <- as.matrix(data_uni[,3:ncol(data_uni)])
X <- log(X)
Y <- as.factor(data_uni$Group)
#PLS
result <- pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
X <- iris[,1:4]
Y <- iris[,5]
#PLS
result <- pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
(length(dim(X)) != 2)
length(dim(X))
X <- iris[,1:4]
Y <- iris[,4:5]
#PLS
result <- pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
X <- as.matrix(iris[,1:4])
Y <- as.matrix(iris[,4:5])
#PLS
result <- pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
X <- as.matrix(iris[,1:4])
Y <- as.matrix(iris[,4:5])
head(cbind(rownames(X), rownames(Y)))
X <- as.matrix(data_uni[,3:ncol(data_uni)])
X <- as.matrix(data_uni[,3:ncol(data_uni)])
Y <- as.factor(data_uni$Group)
head(cbind(rownames(X), rownames(Y)))
Y <- data.frame(as.factor(data_uni$Group))
head(cbind(rownames(X), rownames(Y)))
X <- data.frame(as.matrix(data_uni[,3:ncol(data_uni)]))
Y <- data.frame(as.factor(data_uni$Group))
head(cbind(rownames(X), rownames(Y)))
#PLS
result <- pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
#PLS
result <- mixOmics::pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
dim(X)
dim(Y)
(length(dim(X)) != 2)
Y = as.matrix(Y)
if (!is.numeric(X) || !is.numeric(Y))
stop("'X' and/or 'Y' must be a numeric matrix.")
(!is.numeric(X) || !is.numeric(Y))
!is.numeric(X)
X <- data.frame(as.numeric(data_uni[,3:ncol(data_uni)]))
dat <- sapply( X, as.numeric )
dat <- as.data.frame(sapply( X, as.numeric ))
X <- as.data.frame(sapply( X, as.numeric ))
class(X$Xanthurenate)
#PLS
result <- mixOmics::pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
data_uni <- read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
#data_uni<-read_csv("/home/pol/Escritorio/POMA/POMA/example_data/metabolites.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
####
X <- data.frame(as.numeric(data_uni[,3:ncol(data_uni)]))
X <- as.data.frame(sapply( X, as.numeric ))
#X <- data.frame(matrix(as.numeric(unlist(X)),nrow=nrow(X)))
Y <- data.frame(as.factor(data_uni$Group))
head(cbind(rownames(X), rownames(Y)))
#PLS
result <- mixOmics::pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
class(X)
class(X$Methylhistamine)
x <- as.matrix(X)
Y <- data.frame(as.factor(data_uni$Group))
head(cbind(rownames(X), rownames(Y)))
#PLS
result <- mixOmics::pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
(!is.numeric(X) || !is.numeric(Y))
is.numeric(X)
nums <- unlist(lapply(X, is.numeric))
X<-X[ , nums]
#PLS
result <- mixOmics::pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
data_uni <- read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
X <- as.matrix(data_uni[,3:ncol(data_uni)])
Y <- as.factor(data_uni$Group)
head(cbind(rownames(X), rownames(Y)))
data_uni <- read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
X <- as.matrix(data_uni[,3:ncol(data_uni)])
Y <- as.factor(data_uni$Group)
View(data_uni)
#PLS
result <- mixOmics::pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
View(X)
View(X)
head(cbind(rownames(X), rownames(Y)))
#PLS
result <- mixOmics::pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
Y <- as.matrix(data_uni$Group)
head(cbind(rownames(X), rownames(Y)))
#PLS
result <- mixOmics::pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
Y <- as.matrix(as.factor(data_uni$Group))
head(cbind(rownames(X), rownames(Y)))
#PLS
result <- mixOmics::pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
data_uni[,3:ncol(data_uni)]
View(X)
View(Y)
data_uni <- read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
#data_uni<-read_csv("/home/pol/Escritorio/POMA/POMA/example_data/metabolites.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
View(data_uni)
#PLS
result <- mixOmics::pls(as.matrix(data_uni[,3:ncol(data_uni)]), as.factor(data_uni$Group), ncomp = 3, mode = "regression", scale = FALSE)
#PLS
result <- mixOmics::pls(as.matrix(data_uni[,3:ncol(data_uni)]), as.matrix(data_uni$Group), ncomp = 3, mode = "regression", scale = FALSE)
str(X)
data_uni <- read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
nums <- unlist(lapply(data_uni, is.numeric))
X<-data_uni[ , nums]
View(X)
class(X)
class(X$Deoxyuridine)
data_uni <- read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
View(data_uni)
data_uni_met <- as.numeric(data_uni_met[,3:ncol(data_uni)])
data_uni_met <- as.numeric(data_uni[,3:ncol(data_uni)])
data_uni_met <- data_uni[,3:ncol(data_uni)]
for (i in 1:ncol(data_uni_met)) data_uni_met[,i] <- as.numeric(data_uni_met[,i])
class(data_uni)
data_uni <- data_uni$data.frame
data_uni <- data_uni[3]
data_uni <- read.csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
X <- as.matrix(data_uni[,3:ncol(data_uni)])
Y <- as.matrix(as.factor(data_uni$Group))
head(cbind(rownames(X), rownames(Y)))
#PLS
result <- mixOmics::pls(as.matrix(data_uni[,3:ncol(data_uni)]), as.matrix(data_uni$Group), ncomp = 3, mode = "regression", scale = FALSE)
#PLS
result <- mixOmics::pls(as.matrix(data_uni[,3:ncol(data_uni)]), as.matrix(data_uni[,2]), ncomp = 3, mode = "regression", scale = FALSE)
data_uni <- read.csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
data_uni <- data.matrix(data_uni)
View(data_uni)
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
X <- data_uni[,3:ncol(data_uni)]
Y <- data_uni$Group
Y <- data_uni[,2]
head(cbind(rownames(X), rownames(Y)))
#PLS
result <- mixOmics::pls(as.matrix(data_uni[,3:ncol(data_uni)]), as.matrix(data_uni[,2]), ncomp = 3, mode = "regression", scale = FALSE)
tune.pls <- perf(result, validation = 'loo', criterion = 'all', progressBar = FALSE)
tune.pls
result
plot(result)
plot(result$X)
data_uni <- read_csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
data_uni <- data.matrix(data_uni)
data_uni <- read.csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
data_uni <- data.matrix(data_uni)
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
X <- data_uni[,3:ncol(data_uni)]
Y <- data_uni[,2]
#PLS
result <- pls(as.matrix(data_uni[,3:ncol(data_uni)]), as.matrix(data_uni[,2]), ncomp = 3, mode = "regression", scale = FALSE)
tune.pls <- perf(result, validation = 'loo', criterion = 'all', progressBar = FALSE)
#PLS
result <- pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
data_uni <- read.csv("/home/pol/Escritorio/POMA/POMA/ST000284/MET_CRC_ST000284.csv")
data_uni <- data.matrix(data_uni)
colnames(data_uni)[2]<-"Group"
colnames(data_uni)[1]<-"ID"
X <- data_uni[,3:ncol(data_uni)]
Y <- data_uni[,2]
#PLS
result <- pls(X, Y, ncomp = 3, mode = "regression", scale = FALSE)
tune.pls <- perf(result, validation = 'loo', criterion = 'all', progressBar = FALSE)
result$X
PLSi <- data.frame(result$X, Groups=Y)
View(PLSi)
scores_pls <- ggplotly(ggplot(PLSi,aes(x=PC1,y=PC2,col=Groups))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D","blue","darkgoldenrod2","gray9")) +
theme_minimal())
result$X
plo<-result$X
View(plo)
plotIndiv(result)
result$variates$X
PLSi <- data.frame(result$variates$X, Groups=Y)
scores_pls <- ggplotly(ggplot(PLSi,aes(x=PC1,y=PC2,col=Groups))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D","blue","darkgoldenrod2","gray9")) +
theme_minimal())
PLSi <- data.frame(result$variates$X, Groups=Y)
colnames(PLSi)[1:2]<-c("Component 1", "Component 2")
scores_pls <- ggplotly(ggplot(PLSi,aes(x="Component 1",y="Component 2",col=Groups))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D","blue","darkgoldenrod2","gray9")) +
theme_minimal())
scores_pls <- ggplotly(ggplot(PLSi,aes(x=`Component 1`,y=`Component 2`,col=Groups))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D","blue","darkgoldenrod2","gray9")) +
theme_minimal())
View(PLSi)
PLSi <- data.frame(result$variates$Y, Groups=Y)
colnames(PLSi)[1:2]<-c("Component 1", "Component 2")
scores_pls <- ggplotly(ggplot(PLSi,aes(x=`Component 1`,y=`Component 2`,col=Groups))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D","blue","darkgoldenrod2","gray9")) +
theme_minimal())
PLSi <- data.frame(result$variates$X, Groups=Y)
colnames(PLSi)[1:2]<-c("Component 1", "Component 2")
scores_pls <- ggplotly(ggplot(PLSi,aes(x=`Component 1`,y=`Component 2`,col=Groups))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D","blue","darkgoldenrod2","gray9")) +
theme_minimal())
class(PLSi$`Component 1`)
class(PLSi$`Component 2`)
#PLS
pls_res <- pls(X, Y, ncomp = 5, mode = "regression", scale = FALSE)
PLSi <- data.frame(pls_res$variates$X, Groups=Y)
scores_pls <- ggplotly(ggplot(PLSi,aes(x=`Component 1`,y=`Component 2`))+#,col=Groups))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D","blue","darkgoldenrod2","gray9")) +
theme_minimal())
PLSi <- data.frame(pls_res$variates$X, Groups=Y)
colnames(PLSi)[1:2]<-c("Component 1", "Component 2")
scores_pls <- ggplotly(ggplot(PLSi,aes(x=`Component 1`,y=`Component 2`))+#,col=Groups))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D","blue","darkgoldenrod2","gray9")) +
theme_minimal())
scores_pls
scores_pls <- ggplotly(ggplot(PLSi,aes(x=`Component 1`,y=`Component 2`,col=as.factor(Groups))) +
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D","blue","darkgoldenrod2","gray9")) +
theme_minimal())
scores_pls
scores_pls <- ggplotly(ggplot(PLSi,aes(x=`Component 1`,y=`Component 2`,col=as.factor(Groups))) +
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D","blue","darkgoldenrod2","gray9")) +
theme_minimal())
scores_pls
runApp()
