p + scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D")
p<-ggplot(eigenvalues, aes(x=PC, y=`% Variance Explained`, fill=NULL)) +
geom_bar(stat="identity")+theme_minimal()
p + scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D")
p<-ggplot(eigenvalues, aes(x=PC, y=`% Variance Explained`, fill=NULL)) +
geom_bar(stat="identity")+theme_minimal()
p<-ggplot(eigenvalues, aes(x=PC, y=`% Variance Explained`, fill=NULL)) +
geom_bar(stat="identity")+theme_minimal()
p + scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D")
p + scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
p<-ggplot(eigenvalues, aes(x=PC, y=`% Variance Explained`, fill=NULL)) +
geom_bar(stat="identity")+theme_minimal()
p + scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
p
p<-ggplot(eigenvalues, aes(x=PC, y=`% Variance Explained`, fill=NULL)) +
geom_bar(stat="identity")#+theme_minimal()
p + scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
p
p<-ggplot(eigenvalues, aes(x=PC, y=`% Variance Explained`, fill=NULL)) +
geom_bar(stat="identity") + theme_minimal()
p + scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
p
screeplot  <- ggplotly(screeplot)
screeplot <- ggplot(eigenvalues, aes(x=PC, y=`% Variance Explained`, fill=NULL)) +
geom_bar(stat="identity") + theme_minimal()
screeplot + scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
screeplot  <- ggplotly(screeplot)
screeplot
screeplot <- ggplot(eigenvalues, aes(x=PC, y=`% Variance Explained`,
fill=c("#FF1BB3","#A7FF5B","#99554D"))) +
geom_bar(stat="identity") + theme_minimal()
screeplot + scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
screeplot  <- ggplotly(screeplot)
screeplot <- ggplot(eigenvalues, aes(x=PC, y=`% Variance Explained`,
fill=c("#FF1BB3","#A7FF5B","#99554D"))) +
geom_bar(stat="identity") + theme_minimal()
#screeplot + scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
screeplot  <- ggplotly(screeplot)
screeplot
screeplot <- ggplot(eigenvalues, aes(x=PC, y=`% Variance Explained`,
fill=NULL)) +
geom_bar(stat="identity") + theme_minimal()
#screeplot + scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
screeplot  <- ggplotly(screeplot)
screeplot <- ggplot(eigenvalues, aes(x=PC, y=`% Variance Explained`,
fill=NULL)) +
geom_bar(stat="identity") + theme_minimal()
screeplot + scale_fill_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
screeplot  <- ggplotly(screeplot)
screeplot
screeplot <- ggplot(eigenvalues, aes(x=PC, y=`% Variance Explained`,
fill=NULL)) +
geom_bar(stat="identity") + theme_minimal()
screeplot
screeplot + scale_fill_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
screeplot <- ggplot(eigenvalues, aes(x=PC, y=`% Variance Explained`,
fill=NULL)) +
geom_bar(stat="identity") + theme_minimal()
screeplot + scale_fill_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
screeplot  <- ggplotly(screeplot)
screeplot <- ggplot(eigenvalues, aes(x=PC, y=`% Variance Explained`,
fill=NULL)) +
geom_bar(stat="identity") + theme_minimal()
screeplot + scale_fill_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
screeplot  <- ggplotly(screeplot)
screeplot <- ggplot(eigenvalues, aes(x=PC, y=`% Variance Explained`,
fill=NULL)) +
geom_bar(stat="identity") + theme_minimal()
screeplot + scale_fill_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
screeplot  <- ggplotly(screeplot)
eigenvalues$`Principal Component`<-rownames(eigenvalues)
screeplot <- ggplot(eigenvalues, aes(x=`Principal Component`, y=`% Variance Explained`,
fill=NULL)) +
geom_bar(stat="identity") + theme_minimal()
screeplot + scale_fill_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
screeplot  <- ggplotly(screeplot)
screeplot <- ggplot(eigenvalues, aes(x=`Principal Component`, y=`% Variance Explained`,
fill=NULL)) +
geom_bar(stat="identity") + theme_minimal() +
scale_fill_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
screeplot  <- ggplotly(screeplot)
screeplot
screeplot <- ggplot(eigenvalues, aes(x=`Principal Component`, y=`% Variance Explained`,
fill=NULL)) +
geom_bar(stat="identity")
+ theme_minimal()
screeplot <- ggplot(eigenvalues, aes(x=`Principal Component`, y=`% Variance Explained`,
fill=NULL)) +
geom_bar(stat="identity") + theme_minimal()
+
scale_fill_manual(values = c("red", "grey", "seagreen3"))
screeplot <- ggplot(eigenvalues, aes(x=`Principal Component`, y=`% Variance Explained`,
fill=NULL)) +
geom_bar(stat="identity")  + scale_fill_manual(values = c("red", "grey", "seagreen3"))
screeplot  <- ggplotly(screeplot)
screeplot
screeplot <- ggplot(eigenvalues, aes(x=`Principal Component`, y=`% Variance Explained`,
fill=NULL)) +
geom_bar(stat="identity")  + scale_fill_manual(values = c("#FF1BB3","#A7FF5B","#99554D","red"))
screeplot  <- ggplotly(screeplot)
screeplot
screeplot <- ggplot(eigenvalues, aes(x=`Principal Component`, y=`% Variance Explained`,
fill=NULL,color=c("#FF1BB3","#A7FF5B","#99554D"))) +
geom_bar(stat="identity")  + theme_minimal()
screeplot  <- ggplotly(screeplot)
screeplot
screeplot <- ggplot(eigenvalues, aes(x=`Principal Component`, y=`% Variance Explained`,
fill=NULL,colour=c("#FF1BB3","#A7FF5B","#99554D"))) +
geom_bar(stat="identity")  + theme_minimal()
screeplot  <- ggplotly(screeplot)
screeplot <- ggplot(eigenvalues, aes(x=`Principal Component`, y=`% Variance Explained`,
fill=NULL,colour=c("#FF1BB3","#A7FF5B","#99554D","blue"))) +
geom_bar(stat="identity")  + theme_minimal()
screeplot  <- ggplotly(screeplot)
screeplot
screeplot <- ggplot(eigenvalues, aes(x=`Principal Component`, y=`% Variance Explained`,
fill=c("#FF1BB3","#A7FF5B","#99554D","blue"),colour=c("#FF1BB3","#A7FF5B","#99554D","blue"))) +
geom_bar(stat="identity")  + theme_minimal()
screeplot  <- ggplotly(screeplot)
screeplot
screeplot <- ggplot(eigenvalues, aes(x=`Principal Component`, y=`% Variance Explained`,
fill=NULL,colour=c("#FF1BB3","#A7FF5B","#99554D","blue"))) +
geom_bar(stat="identity")  + theme_minimal()
screeplot  <- ggplotly(screeplot)
screeplot
screeplot <- ggplot(eigenvalues, aes(x=`Principal Component`, y=`% Variance Explained`,
fill=NULL)) +
geom_bar(stat="identity",fill = c("#FF1BB3","#A7FF5B","#99554D","blue"))  + theme_minimal()
screeplot  <- ggplotly(screeplot)
screeplot
screeplot <- ggplot(eigenvalues, aes(x=`Principal Component`, y=`% Variance Explained`,
fill=NULL)) +
geom_bar(stat="identity",fill = c("#FF1BB3","#A7FF5B","#99554D"))  + theme_minimal()
screeplot  <- ggplotly(screeplot)
screeplot <- ggplot(eigenvalues, aes(x=`Principal Component`, y=`% Variance Explained`,
fill=NULL)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),nrow(eigenvalues)))  + theme_minimal()
screeplot  <- ggplotly(screeplot)
screeplot
runApp()
eigenvalues<- eigenvalues[order(eigenvalues$`% Variance Explained`),]
View(eigenvalues)
eigenvalues<- eigenvalues[-order(eigenvalues$`% Variance Explained`),]
View(eigenvalues)
eigenvalues<- eigenvalues[order(-eigenvalues$`% Variance Explained`),]
View(eigenvalues)
eigenvalues<- data.frame(round(pca.res2$explained_variance*100,3))
colnames(eigenvalues)<-"% Variance Explained"
eigenvalues$`Principal Component`<-rownames(eigenvalues)
eigenvalues<- eigenvalues[order(-eigenvalues$`% Variance Explained`),]
View(eigenvalues)
runApp()
shiny::runApp()
X <- as.matrix(df)
df<-iris[,1:4]
Y<-iris[,5]
X <- as.matrix(df)
#Y <- as.factor(to_plot_data$Group)
pca.res2<-pca(X, ncomp = 4, center = F, scale = F)
eigenvalues<- data.frame(round(pca.res2$explained_variance*100,3))
colnames(eigenvalues)<-"% Variance Explained"
View(eigenvalues)
eigenvalues$`Principal Component`<-rownames(eigenvalues)
screeplot <- ggplot(eigenvalues, aes(x=`Principal Component`, y=`% Variance Explained`,
fill=NULL)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),nrow(eigenvalues)))  + theme_minimal()
screeplot  <- ggplotly(screeplot)
View(eigenvalues)
eigenvalues<- eigenvalues[order(-eigenvalues$`% Variance Explained`),]
View(eigenvalues)
eigenvalues<-eigenvalues[,1]
eigenvalues<-data.frame(eigenvalues[,1])
eigenvalues$`Principal Component`<-rownames(eigenvalues)
eigenvalues<- data.frame(round(pca.res2$explained_variance*100,3))
colnames(eigenvalues)<-"% Variance Explained"
eigenvalues<- data.frame(round(pca.res2$explained_variance*100,3))
colnames(eigenvalues)<-"% Variance Explained"
eigenvalues$`Principal Component`<-rownames(eigenvalues)
eigenvalues<-data.frame(`% Variance Explained = eigenvalues$`% Variance Explained`)
eigenvalues<-data.frame(`% Variance Explained` = eigenvalues$`% Variance Explained`)
View(eigenvalues)
eigenvalues<- data.frame(round(pca.res2$explained_variance*100,3))
colnames(eigenvalues)<-"% Variance Explained"
eigenvalues$`Principal Component`<-rownames(eigenvalues)
eigenvalues$`Principal Component`<- NULL
View(eigenvalues)
runApp()
runApp()
runApp()
df<-iris[,1:4]
Y<-iris[,5]
X <- as.matrix(df)
plsda.res <- plsda(X, Y, ncomp = 4)
plsda.res$X
plsda <- plotIndiv(plsda.res, group = Y, legend = TRUE,
title = '',
ind.names = FALSE,
size.title = .1, size.xlabel = 1.5,
size.ylabel = 1.5, size.axis = 1.3, size.legend = 1.3,
size.legend.title = 1.3,
comp=c(1,2), ellipse = TRUE, style = "graphics")
plsda.res$X
plsda.res$variates$X
PLSDAi<-data.frame(plsda.res$variates$X, Groups=Y)
plsda <- ggplotly(ggplot(PLSDAi, aes(x=`comp 1`,y=`comp 2`,col=Groups))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
+ #your colors here
theme_minimal())
PLSDAi
View(PLSDAi)
plsda <- ggplotly(ggplot(PLSDAi, aes(x=comp.1,y=comp.2,col=Groups))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
+ #your colors here
theme_minimal())
plsda
colnames(PLSDAi)[1:2]<-c("X-Variate 1", "X-Variate 2")
plsda <- ggplotly(ggplot(PLSDAi, aes(x=comp.1,y=comp.2,col=Groups))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
+ #your colors here
theme_minimal())
plsda <- ggplotly(ggplot(PLSDAi, aes(x=`X-Variate 1`,y=`X-Variate 2`,col=Groups))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
+ #your colors here
theme_minimal())
plsda
plsda <- ggplotly(ggplot(PLSDAi, aes(x=`X-Variate 1`,y=`X-Variate 2`,col=Groups))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D"))
+ #your colors here
stat_ellipse(aes(x=`X-Variate 1`,y=`X-Variate 2`,col=Groups),type = "norm")
+ theme_minimal())
plsda
runApp()
runApp()
plsda.vip<-as.data.frame(vip(plsda.res))
plsda.vip.top<- plsda.vip[plsda.vip$`comp 1`>input$vip,]
plsda.vip.top<- plsda.vip[plsda.vip$`comp 1`>2,]
plsda.vip.top<-plsda.vip.top[order(plsda.vip.top[,1]),]
####
vip_plsda<- ggplotly(ggplot(plsda.vip.top, aes(x=`comp 1`, y=`% Variance Explained`,
fill=NULL)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),nrow(eigenvalues)))
+ theme_minimal())
View(plsda.vip.top)
plsda.vip<-as.data.frame(vip(plsda.res))
plsda.vip.top<- plsda.vip[plsda.vip$`comp 1`>2,]
plsda.vip.top<-plsda.vip.top[order(plsda.vip.top[,1]),]
View(plsda.vip.top)
View(plsda.vip)
plsda.vip.top<- plsda.vip[plsda.vip$`comp 1`>1,]
plsda.vip.top<-plsda.vip.top[order(plsda.vip.top[,1]),]
####
vip_plsda<- ggplotly(ggplot(plsda.vip.top, aes(x=`comp 1`, y=`% Variance Explained`,
fill=NULL)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),nrow(eigenvalues)))
+ theme_minimal())
View(plsda.vip.top)
plsda.vip.top$Variate<- rownames(plsda.vip.top)
vip_plsda<- ggplotly(ggplot(plsda.vip.top, aes(x=`comp 1`, y=Variates,
fill=NULL)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),nrow(eigenvalues)))
+ theme_minimal())
plsda.vip.top$Variate<- rownames(plsda.vip.top)
vip_plsda<- ggplotly(ggplot(plsda.vip.top, aes(x=`comp 1`, y=Variate,
fill=NULL)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),nrow(eigenvalues)))
+ theme_minimal())
vip_plsda<- ggplotly(ggplot(plsda.vip.top, aes(x=`comp 1`, y=Variate,
fill=NULL)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),nrow(plsda.vip.top)))
+ theme_minimal())
vip_plsda
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=Variate, y=`comp 1`,
fill=NULL)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),nrow(plsda.vip.top)))
+ theme_minimal())
vip_plsda
? geom_bar
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=Variate, y=`comp 1`,
fill=NULL)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),nrow(plsda.vip.top)))
+ coord_flip()
+ theme_minimal())
vip_plsda
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=`comp 1`, y=Variate,
fill=NULL)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),nrow(plsda.vip.top)))
+ coord_flip()
+ theme_minimal())
vip_plsda
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=`comp 1`, y=Variate,
fill=Variate)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),nrow(plsda.vip.top)))
+ coord_flip()
+ theme_minimal())
vip_plsda
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=Variate, y=`comp 1`,
fill=Variate)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),nrow(plsda.vip.top)))
+ coord_flip()
+ theme_minimal())
vip_plsda
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=`comp 1`, y=NULL,
fill=Variate)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),nrow(plsda.vip.top)))
+ coord_flip()
+ theme_minimal())
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=`comp 1`, y=Variate,
fill=Variate)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),nrow(plsda.vip.top)))
+ coord_flip()
+ theme_minimal())
+ theme_minimal()) ;vip_plsda
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=`comp 1`, y=Variate,
fill=Variate)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),nrow(plsda.vip.top)))
+ coord_flip()
+ theme_minimal()) ;vip_plsda
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=`comp 1`, y=Variate,
fill=NULL)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),nrow(plsda.vip.top)))
#+ coord_flip()
+ theme_minimal()) ;vip_plsda
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=Variate, y=`comp 1`,
fill=NULL)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),nrow(plsda.vip.top)))
+ coord_flip()
+ theme_minimal()) ;vip_plsda
runApp()
plsda.vip<-as.data.frame(vip(plsda.res))
plsda.vip.top<- plsda.vip[plsda.vip$`comp 1`>1,]
plsda.vip.top<-plsda.vip.top[order(plsda.vip.top[,1]),]
plsda.vip.top$Variate<- rownames(plsda.vip.top)
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=Variate, y=`comp 1`,
fill=NULL)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),
nrow(plsda.vip.top)))
+ coord_flip()
+ theme_minimal())
vip_plsda
colnames(plsda.vip.top$`comp 1`)<- "VIP"
colnames(plsda.vip.top)[1]<- "VIP"
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=Variate, y=VIP,
fill=NULL)) +
geom_bar(stat="identity", fill = rep(c("lightblue"),
nrow(plsda.vip.top)))
+ coord_flip()
+ theme_minimal())
vip_plsda
runApp()
runApp()
shiny::runApp()
shiny::runApp()
PCbiplot <- function(PC, x="PC1", y="PC2") {
# PC being a prcomp object
data <- data.frame(obsnames=row.names(PC$x), PC$x)
plot <- ggplot(data, aes_string(x=x, y=y)) + geom_text(alpha=.4, size=3, aes(label=obsnames))
plot <- plot + geom_hline(aes(0), size=.2) + geom_vline(aes(0), size=.2)
datapc <- data.frame(varnames=rownames(PC$rotation), PC$rotation)
mult <- min(
(max(data[,y]) - min(data[,y])/(max(datapc[,y])-min(datapc[,y]))),
(max(data[,x]) - min(data[,x])/(max(datapc[,x])-min(datapc[,x])))
)
datapc <- transform(datapc,
v1 = .7 * mult * (get(x)),
v2 = .7 * mult * (get(y))
)
plot <- plot + coord_equal() + geom_text(data=datapc, aes(x=v1, y=v2, label=varnames), size = 5, vjust=1, color="red")
plot <- plot + geom_segment(data=datapc, aes(x=0, y=0, xend=v1, yend=v2), arrow=arrow(length=unit(0.2,"cm")), alpha=0.75, color="red")
plot
}
fit <- prcomp(iris[,1:4], scale=F)
PCbiplot(fit)
X <- as.matrix(iris[,1:4])
pca.res2<-pca(X, ncomp = 5, center = F, scale = F)
pca.res2<-pca(X, ncomp = 4, center = F, scale = F)
PCbiplot <- function(PC, x="PC1", y="PC2") {
# PC being a prcomp object
data <- data.frame(obsnames=row.names(PC$x), PC$x)
plot <- ggplot(data, aes_string(x=x, y=y)) + geom_text(alpha=.4, size=3, aes(label=obsnames))
plot <- plot + geom_hline(aes(0), size=.2) + geom_vline(aes(0), size=.2)
datapc <- data.frame(varnames=rownames(PC$rotation), PC$rotation)
mult <- min(
(max(data[,y]) - min(data[,y])/(max(datapc[,y])-min(datapc[,y]))),
(max(data[,x]) - min(data[,x])/(max(datapc[,x])-min(datapc[,x])))
)
datapc <- transform(datapc,
v1 = .7 * mult * (get(x)),
v2 = .7 * mult * (get(y))
)
plot <- plot + coord_equal() + geom_text(data=datapc, aes(x=v1, y=v2, label=varnames), size = 5, vjust=1, color="red")
plot <- plot + geom_segment(data=datapc, aes(x=0, y=0, xend=v1, yend=v2), arrow=arrow(length=unit(0.2,"cm")), alpha=0.75, color="red")
plot
}
pca.res2$x
fit <- prcomp(pca.res2$x[,1],pca.res2$x[,2], scale=F)
PCbiplot(fit)
PCbiplot(pca.res2$x[,1],pca.res2$x[,2])
PCbiplot(pca.res2)
prcomp(x)
prcomp(X)
a<-prcomp(X)
a$x
PCbiplot(pca.res2$x)
b<-
PCbiplot(pca.res2$x)
b<-pca.res2$x
b
PCbiplot(pca.res2$x)
PCbiplot(b)
class(b)
class(a)
pca.res2<-pca(X, ncomp = 4, center = F, scale = F)
biplot(pca.res2, xlabs = NULL, cex = 0.7)
ggbiplot(pca.res2)
ggbiplot(pca.res2, comps = 1:2, col = NULL, ...)
ggbiplot(pca.res2, comps = 1:2, col = NULL)
?ggbiplot
ggbiplot(pca.res2$x, comps = 1:2, col = NULL)
ggbiplot(a, comps = 1:2, col = NULL)
ggbiplot(as.data.frame(pca.res2$x))
ggbiplot(as.data.frame(pca.res2$x)) + theme_minimal()
ggplotly(ggbiplot(as.data.frame(pca.res2$x)) + theme_minimal())
Y <- as.factor(iris[,5])
ggbiplot(as.data.frame(pca.res2$x), obs.scale = 1, var.scale = 1,
groups = Y, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
ggplotly(ggbiplot(as.data.frame(pca.res2$x)) + theme_minimal())
ggplotly(ggbiplot(as.data.frame(pca.res2$x),loadings.data = as.data.frame(pca.res2$loadings$X))
+ theme_minimal())
as.data.frame(pca.res2$loadings$X)
biplot(a)
library(ontologyIndex)
library(tidyverse)
library(RNeo4j)
path<-"/Users/pol/Dropbox/Cook2Health_Aberystwyth/Ontology/FoodBiomarkerOntology/v1.2.0/FBOnto2018_1_1_0.obo"
get_relation_names(path)
ontology <- get_ontology(path,extract_tags="everything",
propagate_relationships=c("is_a","[FB]_00422","[FB]_00424"))
biomarker_of <- ontology$`[FB]_00422` %>%
map(as_tibble) %>%
bind_rows(.id = "parent")
is_a <- ontology$is_a %>%
map(as_tibble) %>%
bind_rows(.id = "parent")
ingredient_of <- ontology$`[FB]_00424` %>%
map(as_tibble) %>%
bind_rows(.id = "parent")
names <- ontology$name %>%
map(as_tibble) %>%
bind_rows(.id = "ID") %>%
rename(value = value)
graph <- startGraph("http://localhost:7474/db/data/", username="neo4j", password="1234")
graph <- startGraph("http://localhost:7474/db/data/", username="neo4j", password="1234")
clear(graph)
foods <- names[1:286,]
#target <- c("Biomarkers","Foods","BiomarkerOf","hasBiomarker","Contains","IsIngredientOf")
target <- c("Foods","Biomarkers","BiomarkerOf","hasBiomarker","Contains","IsIngredientOf")
foods <- filter(foods, !(value %in% target))
#biomarkers <- names[c(207,287:nrow(names)),]
biomarkers <- names[c(287:nrow(names)),]
biomarkers <- filter(biomarkers, !(value %in% target))
kingdoms <- filter(names, value %in% target)
kingdoms <- kingdoms[1:2,]
myFoods <- list()
myBiomarkers <- list()
myKingdoms <- list()
for(i in 1:nrow(foods)){
myFoods[[i]] <-  createNode(
graph,
"FOODS",
Code = foods$ID[i],
Food = foods$value[i])
}
for(i in 1:nrow(biomarkers)){
myBiomarkers[[i]] <-  createNode(
graph,
"BIOMARKERS",
Code = biomarkers$ID[i],
Biomarker = biomarkers$value[i])
}
for(i in 1:nrow(kingdoms)){
myKingdoms[[i]] <-  createNode(
graph,
"KINGDOMS",
Code = kingdoms$ID[i],
Kingdom = kingdoms$value[i])
}
target2 <- c("[FB]_00422", "[FB]_00423", "[FB]_00424", "[FB]_00425", "[FB]_01501", "[FB]_0001")
is_a <- filter(is_a, !(value %in% target2))
is_a <- filter(is_a, !(parent %in% target2))
node_names <- map_chr(myFoods, ~{.$Code})
for(i in 1:nrow(is_a)){
parent <- match(is_a$parent[i], node_names)
value <- match(is_a$value[i], node_names)
createRel(myFoods[[parent]], "is a", myFoods[[value]])
}
biomarker_of <- filter(biomarker_of, !(value %in% target2))
biomarker_of <- filter(biomarker_of, !(parent %in% target2))
node_names <- map_chr(myBiomarkers, ~{.$Code})
for(i in 1:nrow(biomarker_of)){
parent <- match(biomarker_of$parent[i], node_names)
value <- match(biomarker_of$value[i], node_names)
createRel(myBiomarkers[[parent]], "is biomarker of", myBiomarkers[[value]])
}
shiny::runApp()
shiny::runApp()
