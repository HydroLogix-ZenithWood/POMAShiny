plot(data$iVA,data$`3,4-DHBAld`)
plot(data$`3-HBAld`,data$`3,4-DHBAld`)
runApp()
t.test(HA~Group, data = data)
View(data)
t.test(HA~Sex, data = data)
t.test(HA~Sex, data = data, alternative=c("two.sided"))
runApp()
shiny::runApp()
runApp()
c.data <- readr::read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
c.data <- c.data[,3:ncol(c.data)]
c.data <- as.matrix(round(cor(c.data), 3))
corr_plot.s <- plot_ly(x=colnames(c.data), y=rownames(c.data), z = c.data, type = "heatmap") %>%
layout(xaxis = list(tickangle = 45))
corr_plot.s
runApp()
c.data <- readr::read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
View(c.data)
c.data <- c.data[,3:ncol(c.data)]
c.data <- as.matrix(round(cor(c.data), 3))
View(c.data)
runApp()
View(corr_plot.s)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?cor
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?t.test
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- c(3,2,4,5,3,4,4,3,3)
b<-c(55,4345,564,56,4574,2)
t.test(a,b,var.equal = "TRUE")
t.test(a,b,var.equal = as.factor("TRUE"))
t.test(a,b,var.equal = TRUE)
t.test(a,b,var.equal = 'TRUE')
eval(parse(text = x))
x<- "TRUE"
eval(parse(text = x))
x<- "FALSE"
eval(parse(text = x))
runApp()
runApp()
runApp()
runApp()
dts<-read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
write.csv(dts[,2:ncol(dts)],"/home/pol/Escritorio/dts.csv",row.names = F)
write.csv(dts[,2:ncol(dts)],"/home/pol/Escritorio/dts.csv",row.names = T)
runApp()
log2(-1)
log2(-1.3)
log2(-1.3+1)
-log2(-1.3)
log2(-1.3^2)
exp(-1.3)
-1.3*-1.3
?exp
2.6^1.3
2.6^-1.3
-1.3*-1.3
log2(0.28)
0.7^2
log2(0.49)
log2(500)
runApp()
cor.test(a,b)
a
b
b<-c(2,3,4,23,3,4,2,1,4)
cor.test(a,b)
cor.test(a,b)$p.value
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
?t.test
runApp()
write.csv(iris[1:100,c(5,1:4)], "/home/pol/Escritorio/iris.csv")
runApp()
pol<-iris[1:100,c(5,1:4)]
t.test(pol$Sepal.Length~pol$Species, paired = TRUE)
t.test(pol$Sepal.Length~pol$Species, paired = F)
t.test(pol$Sepal.Length~pol$Species, paired = TRUE)$estimate
t.test(pol$Sepal.Length~pol$Species, paired = TRUE)$estimate[[1]]
t.test(pol$Sepal.Length~pol$Species, paired = TRUE)$estimate[[2]]
t.test(pol$Sepal.Length~pol$Species, paired = TRUE)$p.value
t.test(pol$Sepal.Length~pol$Species, paired = F)$p.value
runApp()
?wilcox.test
wilcox.test(pol$Species~pol$Sepal.Length)
wilcox.test(pol$Species~pol$Sepal.Length,paired = TRUE)
?group_by()
group_by(pol$Sepal.Length ,by = pol$Species)
?make.groups
make.groups(pol$Sepal.Length)
make.groups(pol$Sepal.Length, pol$Species)
wilcox.test(Sepal.Length ~ Species, data = pol, paired = TRUE)
wilcox.test(Sepal.Length ~ Species, data = pol, paired = F)
wilcox.test(Sepal.Length ~ Species, data = pol, paired = TRUE)
wilcox.test(Sepal.Length ~ Species, data = pol, paired = TRUE)
runApp()
pol
Group<-pol$Species
data_uni <- iris[,2:ncol(pol)]
non_param_mann <- NULL
for (i in 1:ncol(data_uni)){
non_param_mann[i] <- wilcox.test(data_uni[,i] ~ as.factor(Group),paired = TRUE)$p.value
}
for (i in 1:ncol(data_uni)){
non_param_mann[i] <- wilcox.test(data_uni[,i] ~ as.factor(Group), data = data_uni, paired = TRUE)$p.value
}
data_uni[,i]
as.factor(Group)
wilcox.test(data_uni[,i] ~ as.factor(Group), data = data_uni, paired = TRUE)$p.value
wilcox.test(data_uni[,i] ~ Group, data = data_uni, paired = TRUE)$p.value
wilcox.test(data_uni$Sepal.Width ~ Group, data = data_uni, paired = TRUE)$p.value
wilcox.test(Sepal.Width ~ Group, data = data_uni, paired = TRUE)$p.value
wilcox.test(Sepal.Width ~ Species, data = data_uni, paired = TRUE)$p.value
wilcox.test(Sepal.Width ~ as.factor(Species), data = data_uni, paired = TRUE)$p.value
data_uni
pol
data_uni <- pol
wilcox.test(Sepal.Width ~ as.factor(Species), data = data_uni, paired = TRUE)$p.value
colnames(data_uni)[1]<-"Group"
data_uni
non_param_mann <- NULL
for (i in 2:ncol(data_uni)){
non_param_mann[i] <- wilcox.test(data_uni[,i] ~ as.factor(Group), data = data_uni, paired = TRUE)$p.value
}
non_param_mann
for (i in 3:ncol(data_uni)){
non_param_mann[i] <- data.frame(P.Value = wilcox.test(data_uni[,i] ~ as.factor(Group), data = data_uni, paired = TRUE)$p.value)
}
non_param_mann
View(non_param_mann)
for (i in 3:ncol(data_uni)){
non_param_mann[i] <- data.frame(P.Value[i] = wilcox.test(data_uni[,i] ~ as.factor(Group), data = data_uni, paired = TRUE)$p.value)
}
for (i in 3:ncol(data_uni)){
non_param_mann[i] <- data.frame(wilcox.test(data_uni[,i] ~ as.factor(Group), data = data_uni, paired = TRUE)$p.value)
}
View(non_param_mann)
for (i in 3:ncol(data_uni)){
non_param_mann[i] <- as.data.frame(wilcox.test(data_uni[,i] ~ as.factor(Group), data = data_uni, paired = TRUE)$p.value)
}
View(non_param_mann)
non_param_mann <- NULL
for (i in 3:ncol(data_uni)){
non_param_mann[i] <- wilcox.test(data_uni[,i] ~ as.factor(Group), data = data_uni, paired = TRUE)$p.value
}
non_param_mann <- data.frame(P.Value = non_param_mann)
View(non_param_mann)
data_uni
non_param_mann <- NULL
for (i in 2:ncol(data_uni)){
non_param_mann[i] <- wilcox.test(data_uni[,i] ~ as.factor(Group), data = data_uni, paired = TRUE)$p.value
}
non_param_mann <- data.frame(P.Value = non_param_mann)
rownames(non_param_mann) <- colnames(data_uni)[3:ncol(data_uni)]
rownames(non_param_mann) <- colnames(data_uni)[2:ncol(data_uni)]
non_param_mann$adj.P.Val <- p.adjust(non_param_mann$P.Value, method = "fdr")
View(non_param_mann)
runApp()
runApp()
as.data.frame(apply(data_uni[,3:ncol(data_uni)],2,function(x){wilcox.test(x ~ as.factor(Group), paired = TRUE)$p.value}))
runApp()
Boston
Boston$GROUP <- c(rep("ONE",35),rep("TWO",36))
Boston[1:70,]
Boston$GROUP <- c(rep("ONE",35),rep("TWO",35))
BST<-Boston[1:70,]
BST$GROUP <- c(rep("ONE",35),rep("TWO",35))
write.csv(BST, "/home/pol/Escritorio/BST.csv")
runApp()
install.packages("formattable")
?formattable::formattable
runApp()
?normalize_bar
runApp()
runApp()
runApp()
runApp()
runApp()
formattable(iris, formatter = area(col = c(Sepal.Lenght)) ~ normalize_bar("pink"))
formattable(iris, list(
Sepal.Lenght = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
formattable(iris, list(
Sepal.Lenght = color_tile("white", "orange")
))
formattable(iris, list(
Sepal.Length = color_tile("white", "orange")
))
formattable(iris, area(col = c(Sepal.Lenght, Sepal.Width)) ~ normalize_bar("pink"))
formattable(iris, list(
Sepal.Lenght = color_tile("white", "orange"),
Species = formatter("span", style = x ~ ifelse(x == "setosa",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(Petal.Length, Petal.Width)) ~ normalize_bar("pink", 0.2)
))
formattable(iris, list(
Species = formatter("span", style = x ~ ifelse(x == "setosa",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(Petal.Length, Petal.Width)) ~ normalize_bar("pink", 0.2)
))
formattable(iris, list(
area(col = c(Petal.Length, Petal.Width)) ~ normalize_bar("pink", 0.2)
))
iris
formattable(iris, list(
area(col = c(Petal.Length, Petal.Width)) ~ normalize_bar("pink")
))
formattable(iris, list(
area(col = c(Petal.Length, Petal.Width)) ~ normalize_bar("pink", 1,0)
))
runApp()
p <- data.frame(
id = c(1, 2, 3, 4, 5),
name = c("A1", "A2", "B1", "B2", "C1"),
balance = accounting(c(52500, 36150, 25000, 18300, 7600), format = "d"),
growth = percent(c(0.3, 0.3, 0.1, 0.15, 0.15), format = "d"),
ready = formattable(c(TRUE, TRUE, FALSE, FALSE, TRUE), "yes", "no"))
p
runApp()
formattable(iris, list(area(col = c(Sepal.Length, Sepal.Width)) ~ normalize_bar("pink")))
pol<-formattable(iris, list(area(col = c(Sepal.Length, Sepal.Width)) ~ normalize_bar("pink")))
pol
runApp()
runApp()
runApp()
runApp()
install.packages('shinyFiles')
?shinyFilesButton
?shinyFiles::shinyFilesButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?RankProducts
data(golub)
#use a subset of data as example, apply the rank
#product method
subset <- c(1:4,28:30)
#Setting rand=123, to make the results reproducible,
RP.out <- RankProducts(golub[,subset],golub.cl[subset],rand=123)
# class 2: label =1, class 1: label = 0
#pfp for identifying genes that are up-regulated in class 2
#pfp for identifying genes that are down-regulated in class 2
head(RP.out$pfp)
#Rank Sum
RS.out <-RankProducts(golub[,subset],golub.cl[subset],rand=123,
calculateProduct=FALSE)
head(RS.out$pfp)
data(golub)
#use a subset of data as example, apply the rank
#product method
subset <- c(1:4,28:30)
#Setting rand=123, to make the results reproducible,
RP.out <- RankProducts(golub[,subset],golub.cl[subset],rand=123)
# class 2: label =1, class 1: label = 0
#pfp for identifying genes that are up-regulated in class 2
#pfp for identifying genes that are down-regulated in class 2
head(RP.out$pfp)
#Rank Sum
RS.out <-RankProducts(golub[,subset],golub.cl[subset],rand=2,
calculateProduct=FALSE)
head(RS.out$pfp)
data(golub)
#use a subset of data as example, apply the rank
#product method
subset <- c(1:4,28:30)
#Setting rand=123, to make the results reproducible,
RP.out <- RankProducts(golub[,subset],golub.cl[subset],rand=123)
# class 2: label =1, class 1: label = 0
#pfp for identifying genes that are up-regulated in class 2
#pfp for identifying genes that are down-regulated in class 2
head(RP.out$pfp)
#Rank Sum
RS.out <-RankProducts(golub[,subset],golub.cl[subset],rand=2,RandomPairs=1,
calculateProduct=FALSE)
head(RS.out$pfp)
data(golub)
#use a subset of data as example, apply the rank
#product method
subset <- c(1:4,28:30)
#Setting rand=123, to make the results reproducible,
RP.out <- RankProducts(golub[,subset],golub.cl[subset],rand=123)
# class 2: label =1, class 1: label = 0
#pfp for identifying genes that are up-regulated in class 2
#pfp for identifying genes that are down-regulated in class 2
head(RP.out$pfp)
#Rank Sum
RS.out <-RankProducts(golub[,subset],golub.cl[subset],rand=2,RandomPairs=3,
calculateProduct=FALSE)
head(RS.out$pfp)
data(golub)
#use a subset of data as example, apply the rank
#product method
subset <- c(1:4,28:30)
#Setting rand=123, to make the results reproducible,
RP.out <- RankProducts(golub[,subset],golub.cl[subset],rand=123)
# class 2: label =1, class 1: label = 0
#pfp for identifying genes that are up-regulated in class 2
#pfp for identifying genes that are down-regulated in class 2
head(RP.out$pfp)
#Rank Sum
RS.out <-RankProducts(golub[,subset],golub.cl[subset],rand=2,RandomPairs=2,
calculateProduct=FALSE)
head(RS.out$pfp)
data(golub)
#use a subset of data as example, apply the rank
#product method
subset <- c(1:4,28:30)
#Setting rand=123, to make the results reproducible,
RP.out <- RankProducts(golub[,subset],golub.cl[subset],rand=123)
# class 2: label =1, class 1: label = 0
#pfp for identifying genes that are up-regulated in class 2
#pfp for identifying genes that are down-regulated in class 2
head(RP.out$pfp)
#Rank Sum
RS.out <-RankProducts(golub[,subset],golub.cl[subset],rand=2,RandomPairs=1,
calculateProduct=FALSE)
head(RS.out$pfp)
runApp()
runApp()
runApp()
?withProgress
runApp()
runApp()
runApp()
runApp()
?bsCollapse
?bsCollapsePanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
library(ggbiplot)
data(wine)
wine.pca <- prcomp(wine, scale. = TRUE)
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot::ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot::ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE)
ggbiplot::ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = F, circle = F)
wine.pca<-mixOmics::pca(wine, ncomp = 4, center = F, scale = F)
ggbiplot::ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = F, circle = F)
biplot(wine)
biplot(wine.pca)
wine.pca <- prcomp(wine, scale. = TRUE)
biplot(wine.pca)
wine.pca <- prcomp(wine, scale. = TRUE)
wine.pca
wine.pca2<-mixOmics::pca(wine, ncomp = 4, center = F, scale = F)
wine.pca2
?prcomp
wine.pca<-mixOmics::pca(wine, ncomp = 4, center = F, scale = F)
ggbiplot(wine.pca)
wine.pca <- mixOmics::pca(wine, ncomp = 4, center = F, scale = F)
ggbiplot(wine.pca)
install.packages("devtools")
library(devtools)
install_github("cashoes/ggmixOmics")
ggmixOmics::ggbiplot(wine.pca)
wine.pca <- mixOmics::pca(wine, ncomp = 4, center = F, scale = F)
ggbiplot::ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = F, circle = F)
wine.pca <- prcomp(wine, scale. = TRUE)
ggbiplot::ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = F, circle = F)
ggmixOmics::ggbiplot(wine.pca)
wine.pca2 <- mixOmics::pca(wine, ncomp = 4, center = F, scale = F)
ggmixOmics::ggbiplot(wine.pca2)
biplot(wine.pca)
biplot
biplot()
library(ggfortify)
autoplot(
wine.pca, label = T, shape = FALSE,
loadings = TRUE, loadings.label = TRUE,
label.size = 3.5, label.repel = TRUE)
autoplot(
wine.pca, label = T, shape = FALSE,
loadings = TRUE, loadings.label = TRUE,
label.size = 3.5, label.repel = F)
autoplot(
wine.pca2, label = T, shape = FALSE,
loadings = TRUE, loadings.label = TRUE,
label.size = 3.5, label.repel = F)
pca.res2 <- mixOmics::pca(wine, ncomp = 4, center = F, scale = F)
PCi<-data.frame(pca.res2$x,Groups=Y)
PCi<-data.frame(pca.res2$x)
autoplot(
PCi, label = T, shape = FALSE,
loadings = TRUE, loadings.label = TRUE,
label.size = 3.5, label.repel = F)
ggbiplot::ggbiplot(PCi, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = F, circle = F)
pca.res2 <- mixOmics::pca(wine, ncomp = 4, center = F, scale = F)
autoplot(
pca.res2, label = T, shape = FALSE,
loadings = TRUE, loadings.label = TRUE,
label.size = 3.5, label.repel = F)
pca.res2, label = T, shape = FALSE,
loadings = TRUE, loadings.label = TRUE,
label.size = 3.5, label.repel = F) + theme_minimal()
autoplot(
pca.res2, label = T, shape = FALSE,
loadings = TRUE, loadings.label = TRUE,
label.size = 3.5, label.repel = F)
+ theme_minimal()
ggmixOmics::ggbiplot(pca.res2)
ggbiplot::ggbiplot(pca.res2, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = F, circle = F)
ggbiplot::ggbiplot(pca.res2, obs.scale = 1, var.scale = 1,scale=1,
groups = wine.class, ellipse = F, circle = F)
wine.pca <- prcomp(wine, scale. = TRUE)
wine.pca
pca.res2 <- mixOmics::pca(wine, ncomp = 4, center = F, scale = F)
pca.res2
pca.res2$X
pca.res2$x
wine.pca <- prcomp(wine, scale. = F,center = F)
wine.pca
pca.res2 <- mixOmics::pca(wine, ncomp = 13, center = F, scale = F)
pca.res2$x
pca.res2 <- mixOmics::pca(wine, ncomp = 13, center = T, scale = F)
ggbiplot::ggbiplot(pca.res2, obs.scale = 1, var.scale = 1,scale=1,
groups = wine.class, ellipse = F, circle = F)
pca.res2 <- mixOmics::pca(wine, ncomp = 13, center = T, scale = t)
pca.res2 <- mixOmics::pca(wine, ncomp = 13, center = T, scale = T)
ggbiplot::ggbiplot(pca.res2, obs.scale = 1, var.scale = 1,scale=1,
groups = wine.class, ellipse = F, circle = F)
?plsda
runApp()
runApp()
?ggbiplot::ggbiplot
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
