# leftUi = bs4DropdownMenu(
#   show = TRUE,
#   align = "left",
#   status = "warning",
#   menuIcon = "envelope-open",
#   src = NULL
# ),
# rightUi = bs4DropdownMenu(
#   show = FALSE,
#   status = "danger",
#   src = "https://www.google.fr",
#   bs4DropdownMenuItem(
#     message = "message 1",
#     from = "Divad Nojnarg",
#     src = "https://adminlte.io/themes/v3/dist/img/user3-128x128.jpg",
#     time = "today",
#     status = "danger",
#     type = "message"
#   ),
#   bs4DropdownMenuItem(
#     message = "message 2",
#     from = "Nono Gueye",
#     src = "https://adminlte.io/themes/v3/dist/img/user3-128x128.jpg",
#     time = "yesterday",
#     status = "success",
#     type = "message"
#   )
# )
),
sidebar = bs4DashSidebar(
skin = "dark",
status = "primary",
title = "POMA",
brandColor = "primary",
url = "https://pcastellanoescuder.github.io/POMA/",
src = "https://github.com/pcastellanoescuder/POMA/blob/master/man/figures/logo.png?raw=true",
elevation = 3,
opacity = 0.8,
# bs4SidebarUserPanel(
#   img = "home",
#   text = "Home"
# ),
bs4SidebarMenu(
bs4SidebarMenuItem(
"Home",
tabName = "home",
icon = "home"
),
# ---------------------------------------
bs4SidebarHeader("Pre-processing"),
bs4SidebarMenuItem(
"Imputation",
tabName = "inputdata",
icon = "wrench"
),
bs4SidebarMenuItem(
"Normalization",
tabName = "normalization",
icon = "wrench"
),
bs4SidebarMenuItem(
"Outlier Detection",
tabName = "outliers",
icon = "wrench"
),
# ---------------------------------------
bs4SidebarHeader("Statistical Analysis"),
bs4SidebarMenuItem(
"Univariate analysis",
tabName = "item1",
icon = "sliders"
),
bs4SidebarMenuItem(
"Multivariate analysis",
tabName = "item2",
icon = "sliders"
),
bs4SidebarMenuItem(
"Limma",
tabName = "item2",
icon = "sliders"
),
# ---------------------------------------
bs4SidebarMenuItem(
"Help",
tabName = "item1",
icon = "question"
),
bs4SidebarMenuItem(
"Terms & Conditions",
tabName = "item1",
icon = "clipboard"
),
bs4SidebarMenuItem(
"About Us",
tabName = "item1",
icon = "user"
),
bs4SidebarMenuItem(
"Give us feedback",
tabName = "item1",
icon = "backward"
)
)
),
# controlbar = bs4DashControlbar(
#   skin = "light",
#   title = "My right sidebar",
#   sliderInput(
#     inputId = "obs",
#     label = "Number of observations:",
#     min = 0,
#     max = 1000,
#     value = 500
#   ),
#   column(
#     width = 12,
#     align = "center",
#     radioButtons(
#       inputId = "dist",
#       label = "Distribution type:",
#       c("Normal" = "norm",
#         "Uniform" = "unif",
#         "Log-normal" = "lnorm",
#         "Exponential" = "exp")
#     )
#   )
# ),
footer = bs4DashFooter(
copyrights = a(
href = "https://twitter.com/polcastellano_",
target = "_blank", "@polcastellano_"
),
right_text = "2020"
),
body = bs4DashBody(
bs4TabItems(
bs4TabItem(tabName = "home",
source("ui-tab-landing.R",local=TRUE)$value)
# tabItem(tabName = "inputdata",
#         source("ui-tab-inputdata.R",local=TRUE)$value),
# tabItem("impute_vals",
#         source("ui-tab-imputevalues.R",local=TRUE)$value),
# tabItem("normalization",
#         source("ui-tab-normalization.R",local=TRUE)$value),
# tabItem("volcanoPlot",
#         source("ui-tab-volcano.R", local=TRUE)$value),
# tabItem("boxPlot",
#         source("ui-tab-boxplot.R", local=TRUE)$value),
# tabItem("HeatMap",
#         source("ui-tab-heatmap.R", local=TRUE)$value),
# tabItem("univariate",
#         source("ui-tab-univariate.R", local=TRUE)$value),
# tabItem("multivariate",
#         source("ui-tab-multivariate.R",local=TRUE)$value),
# tabItem("limma",
#         source("ui-tab-limma.R",local=TRUE)$value),
# tabItem("correlations",
#         source("ui-tab-correlations.R",local=TRUE)$value),
# tabItem("featureselection",
#         source("ui-tab-featureselection.R",local=TRUE)$value),
# tabItem("randomforest",
#         source("ui-tab-random_forest.R",local=TRUE)$value),
# tabItem("rankprod",
#         source("ui-tab-rankprod.R",local=TRUE)$value),
# tabItem("odds",
#         source("ui-tab-odds.R",local=TRUE)$value),
# tabItem("help",
#         source("ui-tab-help.R",local=TRUE)$value),
# tabItem("terms",
#         source("ui-tab-terms.R",local=TRUE)$value),
# tabItem("about",
#         source("ui-tab-about.R",local=TRUE)$value),
# tabItem("feedback",
#         source("ui-tab-mail.R",local=TRUE)$value)
)
),
server <- function(input, output) {}
)
runApp()
install.packages("heatmaply")
runApp()
install.packages("prettydoc")
runApp()
runApp()
runApp()
?bs4TabItem
?bs4SidebarMenuItem
library(shiny); runApp('poma_shiny.R')
runApp('poma_shiny.R')
runApp('poma_shiny.R')
runApp('poma_shiny.R')
?NS
runApp('poma_shiny.R')
runApp('poma_shiny.R')
runApp('poma_shiny.R')
runApp('poma_shiny.R')
runApp('poma_shiny.R')
runApp('poma_shiny.R')
runApp()
runApp()
runApp('poma_shiny.R')
runApp('poma_shiny.R')
runApp('poma_shiny.R')
100*1024^2
runApp()
runApp()
runApp()
runApp()
runApp('poma_shiny.R')
runApp('poma_shiny.R')
runApp('poma_shiny.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('poma_shiny.R')
runApp('poma_shiny.R')
?bs4TabItem
?callModule
runApp('poma_shiny.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
# for shiny
library(shiny)
library(DT)
library(shinydashboard)
library(plotly)
library(shinyhelper)
library(dashboardthemes)
library(shinyBS)
library(markdown)
library(tidyverse)
library(heatmaply)
library(patchwork)
library(plyr)
library(POMA)
library(Biobase)
# for EDA report
library(prettydoc)
library(reshape2)
library(knitr)
library(viridis)
runApp()
PomaMSnSetClass
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?PomaHeatmap
prettySwitch
shintWidgets::prettySwitch
shinyWidgets::prettySwitch
?shinyWidgets::prettySwitch
runApp()
runApp()
runApp()
runApp()
runApp()
PomaMultivariate
runApp()
?PomaCorr
PomaCorr
runApp()
runApp()
runApp()
runApp()
PomaLasso()
?PomaLasso()
PomaLasso
runApp()
?PomaRandForest
Random_Forest
PomaRandForest
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?PomaRankProd
PomaRankProd
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
POMA::PomaOutliers
?POMA::PomaOutliers
library(shiny)
runApp()
?p
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?PomaDensity
runApp()
runApp()
runApp()
?POMA::PomaClust
POMA::PomaClust
shiny::runApp()
runApp()
library(shinyEffects)
shinyEffectsGallery()
install.packages("shinyEffects")
library(shinyEffects)
shinyEffectsGallery()
install.packages("shinydashboardPlus")
library(shinyEffects)
shinyEffectsGallery()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?prettySwitch
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Biobase::pData(st000284)
Biobase::pData(st000284)[1]
levels(Biobase::pData(st000284)[1])
length(table(Biobase::pData(st000284)[1]))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?rightSidebar
runApp()
runApp()
?rightSidebarTabContent
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tagList
runApp()
runApp()
runApp()
runApp()
?icon
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?PomaEDA
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dropdownButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
BiocManager::install("Rhdf5lib")
runApp()
install.packages("data.table")
install.packages("data.table")
shiny::runApp()
runApp()
runApp()
data.table::update.dev.pkg()
remotes::install_github("Rdatatable/data.table")
runApp()
runApp()
options(rsconnect.http.trace = TRUE)
options(rsconnect.http.verbose = TRUE)
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
bs4TabItem
?bs4TabItem
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("fresh")
runApp()
?bs4DashControlbarItem
runApp()
?bs4DashControlbarMenu
runApp()
runApp()
runApp()
