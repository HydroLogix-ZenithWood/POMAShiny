mylist2 <- mylist2[1:66,]
for(i in 1:ncol(mylist1)){
results_wil[i] <- wilcox.test(mylist1[,i] ~ mylist2[,i], paired=TRUE)$p.value
}
mylist1[,i]
mylist2[,i]
class(mylist2[,i])
for(i in 1:ncol(mylist1)){
x <- mylist1[,i]
y <- mylist2[,i]
results_wil[i] <- wilcox.test(x ~ y, paired=TRUE)$p.value
}
data <- readr::read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data)[2] <- "Group"
mylist <- split(data, data$Group)
mylist1 <- as.data.frame(mylist[1])
mylist2 <- as.data.frame(mylist[2])
names <- colnames(data)[3:ncol(data)]
colnames(mylist1)[3:ncol(mylist1)] <- names
colnames(mylist2)[3:ncol(mylist2)] <- names
results_wil <- list()
for(i in 1:ncol(mylist1)){
results_wil[i] <- wilcox.test(mylist1[,i] ~ mylist2[,i], paired=TRUE)$p.value
}
for(i in 3:ncol(mylist1)){
results_wil[i] <- wilcox.test(mylist1[,i] ~ mylist2[,i], paired=TRUE)$p.value
}
mylist1[,i]
mylist2[,i]
mylist2 <- mylist2[1:66,]
for(i in 3:ncol(mylist1)){
results_wil[i] <- wilcox.test(mylist1[,i] ~ mylist2[,i], paired=TRUE)$p.value
}
for(i in 3:ncol(mylist1)){
results_wil[i] <- wilcox.test(mylist1[,i] ~ mylist2[,i], paired=TRUE)$p.value
}
mylist1[,i]
mylist2[,i]
data <- readr::read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data)[2] <- "Group"
mylist <- split(data, data$Group)
mylist1 <- as.data.frame(mylist[1])
mylist2 <- as.data.frame(mylist[2])
names <- colnames(data)[3:ncol(data)]
colnames(mylist1)[3:ncol(mylist1)] <- names
colnames(mylist2)[3:ncol(mylist2)] <- names
results_wil <- list()
mylist2 <- mylist2[1:66,]
for(i in 3:ncol(mylist1)){
results_wil[i] <- wilcox.test(mylist1[,i] ~ mylist2[,i], paired=TRUE)$p.value
}
mylist1[,i]
mylist2[,i]
length(mylist1[,i])
length(mylist2[,i])
results_wil[i] <- wilcox.test(mylist1$Methyladenosine ~ mylist2$Methyladenosine, paired=TRUE)$p.value
wilcox.test(mylist1$Methyladenosine ~ mylist2$Methyladenosine, paired=TRUE)$p.value
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
& !df$FC > -(input$FCcut)
"Down-regulated"
runApp()
runApp()
runApp()
runApp()
runApp()
log2(1.5)
-log2(1.5)
runApp()
runApp()
data_uni <- read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
stat <- function(x){t.test(x ~ unlist(data_uni[,2]),na.rm=TRUE, alternative=c("two.sided"))$p.value}
stat_G2 <- function(x){t.test(x ~ unlist(data_uni[,2]),na.rm=TRUE, alternative=c("two.sided"))$estimate[[2]]}
stat_G1 <- function(x){t.test(x ~ unlist(data_uni[,2]),na.rm=TRUE, alternative=c("two.sided"))$estimate[[1]]}
p <- as.data.frame(apply(FUN=stat, MARGIN = 2, X = data_uni[,c(3:ncol(data_uni))] ))
colnames(p) <- c("P.Value")
p$adj.P.Val <- p.adjust(p$P.Value, method = "fdr")
G2 <- as.data.frame(apply(FUN=stat_G2, MARGIN = 2, X = data_uni[,c(3:ncol(data_uni))] ))
colnames(G2) <- c("Mean G2")
G1 <- as.data.frame(apply(FUN=stat_G1, MARGIN = 2, X = data_uni[,c(3:ncol(data_uni))] ))
colnames(G1) <- c("Mean G1")
FC <- G2/G1
colnames(FC) <- c("FC")
FC <- round(as.numeric(FC$FC),4)
p <- cbind(G1,G2, FC, p)
a<-p
P.Value <- a[,4]
FC<-a[,3]
df <- data.frame(P.Value, FC)
View(df)
View(G1)
View(G2)
runApp()
p <- as.data.frame(apply(FUN=stat, MARGIN = 2, X = data_uni[,c(3:ncol(data_uni))] ))
colnames(p) <- c("P.Value")
p$adj.P.Val <- p.adjust(p$P.Value, method = "fdr")
G2 <- as.data.frame(apply(FUN=stat_G2, MARGIN = 2, X = data_uni[,c(3:ncol(data_uni))] ))
colnames(G2) <- c("Mean G2")
G1 <- as.data.frame(apply(FUN=stat_G1, MARGIN = 2, X = data_uni[,c(3:ncol(data_uni))] ))
colnames(G1) <- c("Mean G1")
FC <- (G2/G1)-1
colnames(FC) <- c("FC")
FC <- round(as.numeric(FC$FC),4)
p <- cbind(G1,G2, FC, p)
a<-p
a <- Univ_analisis()$p
P.Value <- a[,4]
FC<-a[,3]
df <- data.frame(P.Value, FC)
log2(1.5)
log2(0.8)
runApp()
log2(0.2)
df <- mutate(df,threshold = ifelse(df$P.Value >= input$pcut,
yes = "none",
no = ifelse(df$FC < input$FCcut,
yes = ifelse(df$FC < -(input$FCcut),
yes = "Down-regulated",
no = "none"),
no = "Up-regulated")))
df <- mutate(df,threshold = ifelse(df$P.Value >= 0.05,
yes = "none",
no = ifelse(df$FC < 1.5,
yes = ifelse(df$FC < -(1.5),
yes = "Down-regulated",
no = "none"),
no = "Up-regulated")))
stat <- function(x){t.test(x ~ unlist(data_uni[,2]),na.rm=TRUE, alternative=c("two.sided"))$p.value}
stat_G2 <- function(x){t.test(x ~ unlist(data_uni[,2]),na.rm=TRUE, alternative=c("two.sided"))$estimate[[2]]}
stat_G1 <- function(x){t.test(x ~ unlist(data_uni[,2]),na.rm=TRUE, alternative=c("two.sided"))$estimate[[1]]}
p <- as.data.frame(apply(FUN=stat, MARGIN = 2, X = data_uni[,c(3:ncol(data_uni))] ))
colnames(p) <- c("P.Value")
p$adj.P.Val <- p.adjust(p$P.Value, method = "fdr")
G2 <- as.data.frame(apply(FUN=stat_G2, MARGIN = 2, X = data_uni[,c(3:ncol(data_uni))] ))
colnames(G2) <- c("Mean G2")
G1 <- as.data.frame(apply(FUN=stat_G1, MARGIN = 2, X = data_uni[,c(3:ncol(data_uni))] ))
colnames(G1) <- c("Mean G1")
FC <- G2/G1
colnames(FC) <- c("FC")
FC <- round(as.numeric(FC$FC),4)
p <- cbind(G1,G2, FC, p)
a<-p
a <- Univ_analisis()$p
P.Value <- a[,4]
FC<-a[,3]
df <- data.frame(P.Value, FC)
df <- mutate(df,threshold = ifelse(df$P.Value >= 0.05,
yes = "none",
no = ifelse(df$FC < 1.5,
yes = ifelse(df$FC < -(1.5),
yes = "Down-regulated",
no = "none"),
no = "Up-regulated")))
df <- mutate(df,threshold = as.factor(ifelse(df$P.Value >= 0.05,
yes = "none",
no = ifelse(df$FC < 1.5,
yes = ifelse(df$FC < -(1.5),
yes = "Down-regulated",
no = "none"),
no = "Up-regulated"))))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?shiny::box
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
log2(0.3)
log2(1.7)
runApp()
log2(0.2)
log2(-1.5)
-log2(1.5)
log2(1.5)
log2(0.3)
-log2(1.5)
runApp()
log2(1.5)
-log2(1.5)
log2(0.3)
db.nico <- read.csv("/media/pol/4CF1-C134/INCHINATI_YOGURT_urine_NHL.csv", sep = ";")
db.nico <- db.nico[!is.na(db.nico$IXAGE),]
db.nico <- db.nico[db.nico$IXAGE >= 65,]
db.nico <- db.nico[!is.na(db.nico$Urine),]
db.nico <- db.nico[db.nico$Urine == 1,]
#db.nico$AYFWGTLS <- NA
db.nico$AYFEXHAU <- NA
for (i in 1:nrow(db.nico)){
if(is.na(db.nico$IY5_V7[i])){
db.nico$AYFEXHAU[i] <- 9
}
else if(db.nico$IY5_V7[i] <= 4 & db.nico$IY5_V7[i] >= 3){
db.nico$AYFEXHAU[i] <- 1
}
else {
db.nico$AYFEXHAU[i] <- 0
}
}
db.nico$AYFEXHAU
db.nico$AYFPHYAC <- NA
for (i in 1:nrow(db.nico)){
if(is.na(db.nico$IY14_V26[i])){
db.nico$AYFPHYAC[i] <- 9
}
else if(db.nico$IY14_V26[i] <= 2 & db.nico$IY14_V26[i] >= 1){
db.nico$AYFPHYAC[i] <- 1
}
else {
db.nico$AYFPHYAC[i] <- 0
}
}
db.nico$AYFPHYAC
table(db.nico$AYFPHYAC)
db.nico$Walk4m
db.nico$walk4m
grepl("4m", colnames(db.nico))
colnames(db.nico)[grepl("4m", colnames(db.nico))]
db.nico$walk4mY <- NA
mean(db.nico$PYWLK1A[i],db.nico$PYWLK1B[i])*1.1425
?mean
mean(db.nico$PYWLK1A[i],db.nico$PYWLK1B[i], na.rm = TRUE)*1.1425
?dplyr::ntile
table(db.nico$IYADL_T)
?subset()
db.nico.walk4mY <- subset(db.nico, db.nico$$IYADL_T != 0)
db.nico.walk4mY <- subset(db.nico, db.nico$IYADL_T != 0)
db.nico <- read.csv("/media/pol/4CF1-C134/INCHINATI_YOGURT_urine_NHL.csv", sep = ";")
db.nico <- db.nico[!is.na(db.nico$IXAGE),]
db.nico <- db.nico[db.nico$IXAGE >= 65,]
##
#iurin <- readxl::read_excel("/media/pol/041E-7A70/InCHIANTI_Mostres_orina_METAB_MRB13102016_NHL.xlsx", sheet = "Hoja1")
#colnames(iurin)[1] <- "CODE98"
#db.final <- merge(db.nico, iurin, by = "CODE98")
db.nico <- db.nico[!is.na(db.nico$Urine),]
db.nico <- db.nico[db.nico$Urine == 1,]
##
#db.nico$AYFWGTLS <- NA
db.nico$AYFEXHAU <- NA
db.nico$AYFPHYAC <- NA
#db.nico$AYFWLKCT <- NA
#db.nico$AYFSTRNC <- NA
##### OK
for (i in 1:nrow(db.nico)){
if(is.na(db.nico$IY5_V7[i])){
db.nico$AYFEXHAU[i] <- 9
}
else if(db.nico$IY5_V7[i] <= 4 & db.nico$IY5_V7[i] >= 3){
db.nico$AYFEXHAU[i] <- 1
}
else {
db.nico$AYFEXHAU[i] <- 0
}
}
##### OK
for (i in 1:nrow(db.nico)){
if(is.na(db.nico$IY14_V26[i])){
db.nico$AYFPHYAC[i] <- 9
}
else if(db.nico$IY14_V26[i] <= 2 & db.nico$IY14_V26[i] >= 1){
db.nico$AYFPHYAC[i] <- 1
}
else {
db.nico$AYFPHYAC[i] <- 0
}
}
######
db.nico$walk4mY <- NA
db.nico.walk4mY <- subset(db.nico, db.nico$IYADL_T == 0)
db.nico$walk4mY <- NULL
db.nico.walk4mY$walk4mY <- NA
faithful$eruptions
dense_rank(paste(db.nico.walk4mY$SEX, db.nico.walk4mY$PY1_V21))
?dense_rank
db.nico.walk4mY$SEX
db.nico.walk4mY$PY1_V21
plot(dense_rank(paste(db.nico.walk4mY$SEX, db.nico.walk4mY$PY1_V21)))
plot(density(dense_rank(paste(db.nico.walk4mY$SEX, db.nico.walk4mY$PY1_V21))))
median(db.nico.walk4mY$PY1_V21)
db.nico.walk4mY$PY1_V21
median(db.nico.walk4mY$PY1_V21, na.rm = FALSE)
median(db.nico.walk4mY$PY1_V21, na.rm = TRUE)
head(db.nico.walk4mY[,db.nico.walk4mY$SEX == 1])
median(db.nico.walk4mY$PYWLK1A[db.nico.walk4mY[,db.nico.walk4mY$SEX == 1]])
median(db.nico.walk4mY$PYWLK1A[db.nico.walk4mY$SEX == 1])
median(db.nico.walk4mY[,c(db.nico.walk4mY$SEX == 1, db.nico.walk4mY$PYWLK1A]))
median(db.nico.walk4mY[,c(db.nico.walk4mY$SEX == 1, db.nico.walk4mY$PYWLK1A)])
db.nico.walk4mY$PYWLK1A[subset(db.nico.walk4mY, db.nico.walk4mY$SEX == 1)]
sex1 <- db.nico.walk4mY$SEX == 1
median(sex1$PY1_V21, na.rm = TRUE)
sex1$PY1_V21
class(sex1)
sex1 <- db.nico.walk4mY[,db.nico.walk4mY$SEX == 1]
sex2 <- db.nico.walk4mY[,db.nico.walk4mY$SEX == 2]
sex1$PY1_V21[i] < median(sex1$PY1_V21, na.rm = TRUE)
sex1$PY1_V21
sex1 <- db.nico.walk4mY[db.nico.walk4mY$SEX == 1,]
sex2 <- db.nico.walk4mY[db.nico.walk4mY$SEX == 2,]
sex1$PY1_V21
sex1$PY1_V21[i] < median(sex1$PY1_V21, na.rm = TRUE)
i
sex1$PY1_V21[i]
i<-1
sex1$PY1_V21[i] < median(sex1$PY1_V21, na.rm = TRUE)
median(sex1$PY1_V21, na.rm = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
db.nico <- read.csv("/media/pol/4CF1-C134/INCHINATI_YOGURT_urine_NHL.csv", sep = ";")
db.nico <- db.nico[!is.na(db.nico$IXAGE),]
db.nico <- db.nico[db.nico$IXAGE >= 65,]
##
#iurin <- readxl::read_excel("/media/pol/041E-7A70/InCHIANTI_Mostres_orina_METAB_MRB13102016_NHL.xlsx", sheet = "Hoja1")
#colnames(iurin)[1] <- "CODE98"
#db.final <- merge(db.nico, iurin, by = "CODE98")
db.nico <- db.nico[!is.na(db.nico$Urine),]
db.nico <- db.nico[db.nico$Urine == 1,]
##
#db.nico$AYFWGTLS <- NA
db.nico$AYFEXHAU <- NA
db.nico$AYFPHYAC <- NA
#db.nico$AYFWLKCT <- NA
#db.nico$AYFSTRNC <- NA
##### OK
for (i in 1:nrow(db.nico)){
if(is.na(db.nico$IY5_V7[i])){
db.nico$AYFEXHAU[i] <- 9
}
else if(db.nico$IY5_V7[i] <= 4 & db.nico$IY5_V7[i] >= 3){
db.nico$AYFEXHAU[i] <- 1
}
else {
db.nico$AYFEXHAU[i] <- 0
}
}
##### OK
for (i in 1:nrow(db.nico)){
if(is.na(db.nico$IY14_V26[i])){
db.nico$AYFPHYAC[i] <- 9
}
else if(db.nico$IY14_V26[i] <= 2 & db.nico$IY14_V26[i] >= 1){
db.nico$AYFPHYAC[i] <- 1
}
else {
db.nico$AYFPHYAC[i] <- 0
}
}
######
db.nico.walk4mY <- subset(db.nico, db.nico$IYADL_T == 0)
db.nico.walk4mY$walk4mY <- NA
for (i in 1:nrow(db.nico.walk4mY)){
db.nico.walk4mY$walk4mY[i] <- mean(db.nico.walk4mY$PYWLK1A[i],db.nico.walk4mY$PYWLK1B[i], na.rm = TRUE)*1.1425
}
sex1 <- db.nico.walk4mY[db.nico.walk4mY$SEX == 1,]
sex2 <- db.nico.walk4mY[db.nico.walk4mY$SEX == 2,]
sex1$PY1_V21
median(sex1$PY1_V21, na.rm = TRUE)
median(sex2$PY1_V21, na.rm = TRUE)
runApp()
runApp()
log2(-0.7)
runApp()
runApp()
runApp()
df <- iris[,c(5,1:4)]
df$ID <- 1:150
df$ID
df <- df[,c(6,1:5)]
df
df$imp <- c(rep(0,10),rep(1.3,140))
df
write.csv(df, "/home/pol/Escritorio/iris.csv")
runApp()
class(df$imp)
class(df$Petal.Width)
df$kru <- rep(1,150)
write.csv(df, "/home/pol/Escritorio/iris.csv")
runApp()
df$kru[1:5]<-3
write.csv(df, "/home/pol/Escritorio/iris.csv")
runApp()
t.test(df$imp~df$Species)
kruskal.test(df$imp~df$Species)
runApp()
runApp()
?datatable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
X <- as.matrix(df[,-1:2])
Y <- as.factor(df$Groups)
X <- as.matrix(df[,-1])
X <- as.matrix(df[,-1])
View(X)
X <- as.matrix(df[,-1])
X <- as.matrix(X[,-1])
list.keepX <- c(1:10)
tune.splsda <- tune.splsda(X, Y, ncomp = 4, validation = 'Mfold', folds = 5,
progressBar = TRUE, dist = 'max.dist', measure = "BER",
test.keepX = list.keepX, nrepeat = 10, cpus = 4)
View(X)
class(X)
class(Y)
tune.splsda <- tune.splsda(as.matrix(X), Y, ncomp = 4, validation = 'Mfold', folds = 5,
progressBar = TRUE, dist = 'max.dist', measure = "BER",
test.keepX = list.keepX, nrepeat = 10, cpus = 4)
data(srbct)
X = srbct$gene  #the gene expression data
dim(X)
Y = srbct$class
summary(Y)
list.keepX <- c(1:10,  seq(20, 300, 10))
tune.splsda.srbct <- tune.splsda(X, Y, ncomp = 6, validation = 'Mfold', folds = 5,
progressBar = TRUE, dist = 'max.dist', measure = "BER",
test.keepX = list.keepX, nrepeat = 10, cpus = 2)
tune.splsda <- tune.splsda(X, Y, ncomp = 3, validation = 'Mfold', folds = 5,
progressBar = TRUE, dist = 'max.dist', measure = "BER",
test.keepX = list.keepX, nrepeat = 10, cpus = 4)
error <- tune.splsda$error.rate
ncomp <- tune.splsda$choice.ncomp$ncomp # optimal number of components based on t-tests
select.keepX <- tune.splsda$choice.keepX[1:ncomp]  # optimal number of variables to select
errors_splsda_out<-round(as.data.frame(tune.splsda$error.rate),4)
errors_splsda_out$features<-rownames(errors_splsda_out)
errors_splsda1<-melt(errors_splsda_out, id.vars=c("features"))
errors_sd<-as.data.frame(tune.splsda$error.rate.sd)
errors_sd$features_sd<-rownames(errors_sd)
errors_sd <- melt(errors_sd, id.vars=c("features_sd"))
errors_splsda <- cbind(errors_splsda1,sd = errors_sd[,3])
bal_error_rate <- ggplotly(ggplot(data=errors_splsda, aes(x=features, y=value, group=variable)) +
geom_line(aes(color=variable)) +
geom_point(aes(color=variable)) +
geom_errorbar(aes(ymin=value-sd, ymax=value+sd), width=.1) +
theme_minimal() +
geom_point(size=3,alpha=0.5) + #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D","blue","darkgoldenrod2","gray9")))
bal_error_rate
if (ncomp == 1){
ncompX<-2
}else{
ncompX<-ncomp}
res.splsda <- splsda(X, Y, ncomp = ncompX, keepX = select.keepX)
SPLSDAi<-data.frame(res.splsda$variates$X, Groups=Y)
colnames(SPLSDAi)[1:2]<-c("Component 1", "Component 2")
splsda <- ggplotly(ggplot(SPLSDAi, aes(x=`Component 1`,y=`Component 2`,col=Groups))+
geom_point(size=3,alpha=0.5)+ #Size and alpha just for fun
scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D","blue","darkgoldenrod2","gray9"))
+ #your colors here
stat_ellipse(aes(x=`Component 1`,y=`Component 2`,col=Groups),
type = "norm")
+ theme_minimal())
splsda
splsdaX <- round(data.frame(res.splsda$variates$X),4)
selected_variables <- selectVar(res.splsda, comp = 1)
selected_variables <- as.data.frame(selected_variables[[2]])
selected_variables
selected_variables <- selectVar(res.splsda, comp = 1)
selected_variables
selected_variables <- as.data.frame(selected_variables$value)
selected_variables
runApp()
runApp()
class(selected_variables)
selected_variables
rownames(selected_variables)
class(rownames(selected_variables))
selected_variables <- data.frame(Feature = rownames(selected_variables), Value = selected_variables$value.var)
selected_variables
selected_variables <- selectVar(res.splsda, comp = 1)
selected_variables <- round(selected_variables$value,4)
selected_variables <- data.frame(Feature = rownames(selected_variables), Value = selected_variables$value.var)
selected_variables
runApp()
runApp()
runApp()
?geom_col()
runApp()
runApp()
