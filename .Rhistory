ylab = "",
scale = "none"
)
to_heatmap <- to_heatmap %>% column_to_rownames("ID")
heatmaply(
to_heatmap,
xlab = "",
ylab = "",
scale = "none"
)
runApp()
heatmaply(
to_heatmap,
xlab = "",
ylab = "",
scale = "row",
fontsize_row = 5,
fontsize_col = 5,
)
heatmaply(
to_heatmap,
xlab = "",
ylab = "",
scale = "row",
fontsize_row = 5,
fontsize_col = 5,
width = NULL,
height = NULL,
long_data = T,
plot_method = "ggplot"
)
heatmaply(
to_heatmap,
xlab = "",
ylab = "",
scale = "row",
fontsize_row = 5,
fontsize_col = 5,
width = NULL,
height = NULL,
long_data = T,
plot_method = "ggplot"
)
heatmaply(
to_heatmap,
xlab = "",
ylab = "",
scale = "row",
fontsize_row = 5,
fontsize_col = 5,
width = NULL,
height = NULL,
plot_method = "ggplot"
)
heatmaply(
to_heatmap,
xlab = "",
ylab = "",
scale = "row",
fontsize_row = 5,
fontsize_col = 5,
width = NULL,
height = 10
)
heatmaply(
to_heatmap,
xlab = "",
ylab = "",
scale = "column",
fontsize_row = 5,
fontsize_col = 5,
width = NULL,
height = 10
)
runApp()
runApp()
runApp()
runApp()
runApp()
?plotlyOutput
runApp()
runApp()
target <- readr::read_csv("data/target.csv")
features <- readr::read_csv("data/features.csv")
data <- cbind(target, features)
colnames(data)[1:2] <- c("ID", "Group")
samples_group <- data[,1:2]
data <- data[,c(-1,-2)]
zeros <- data[, -which(colSums(data) != 0)]
data_wo_zero <- data[, which(colSums(data) != 0)]
data <- cbind(samples_group, data)
target <- readr::read_csv("data/target.csv")
features <- readr::read_csv("data/features.csv")
data <- cbind(target, features)
colnames(data)[1:2] <- c("ID", "Group")
samples_group <- data[,1:2]
samples_group <- data %>% select(ID, Group)
dataX <- data %>% select(-ID, -Group)
zeros <- dataX[, -which(colSums(dataX) != 0)]
data_wo_zero <- dataX[, which(colSums(dataX) != 0)]
nas <- sapply(data, function(x) sum(is.na(x)))
nas <- data.frame(number = nas[nas != 0])
nas$names <- rownames(nas)
View(nas)
# missing values
nas <- sapply(dataX, function(x) sum(is.na(x)))
target <- readr::read_csv("/Users/pol/Dropbox/BclogitLasso/data/rawData/bordeaux_target.csv")
features <- readr::read_csv("/Users/pol/Dropbox/BclogitLasso/data/rawData/bordeaux_metabolites.csv")
data <- cbind(target, features)
colnames(data)[1:2] <- c("ID", "Group")
samples_group <- data %>% select(ID, Group)
dataX <- data %>% select(-ID, -Group)
# zeros
zeros <- dataX[, -which(colSums(dataX) != 0)]
View(zeros)
# missing values
nas <- sapply(dataX, function(x) sum(is.na(x)))
nas <- data.frame(number = nas[nas != 0])
nas$names <- rownames(nas)
View(nas)
View(dataX)
# missing values
nas <- sapply(dataX, function(x) sum(is.na(x)))
nas <- data.frame(number = nas[nas != 0]) %>%
mutate(names = rownames(.))
normality <- data.frame(pval=apply(dataX, 2, function(x) {shapiro.test(x)$p.value}))
View(dataX)
library(tidyverse)
library(patchwork)
target <- readr::read_csv("/Users/pol/Dropbox/BclogitLasso/data/rawData/bordeaux_target.csv")
features <- readr::read_csv("/Users/pol/Dropbox/BclogitLasso/data/rawData/bordeaux_metabolites.csv")
data <- cbind(target, features)
colnames(data)[1:2] <- c("ID", "Group")
samples_group <- data %>% select(ID, Group)
dataX <- data %>% select(-ID, -Group)
# zeros
zeros <- sapply(dataX, function(x) sum(x == 0))
# zeros
zeros <- sapply(dataX, function(x) sum(x == 0, na.rm = T))
zeros
View(dataX)
zeros <- data.frame(zeros)
View(zeros)
zeros <- sapply(dataX, function(x) sum(x == 0, na.rm = T))
zeros <- data.frame(zeros) %>%
mutate(names = rownames(.))
zeros <- data.frame(number = zeros) %>%
mutate(names = rownames(.)) %>%
filter(zeros != 0)
zeros <- sapply(dataX, function(x) sum(x == 0, na.rm = T))
zeros <- data.frame(number = zeros) %>%
mutate(names = rownames(.)) %>%
filter(zeros != 0)
all_zero <- zeros %>%
filter(number == ncol(dataX))
View(all_zero)
normality <- data.frame(pval = apply(data[,3:ncol(data)], 2, function(x) {shapiro.test(x)$p.value}))
View(nas)
ggplot(nas, aes(names, number, fill = names)) +
geom_col() +
ylab("Missing values") +
xlab("") +
theme_bw()
POMA::PomaNormPlot
if (nrow(nas) >= 1){
ggplot(nas, aes(names, number, fill = names)) +
geom_col() +
ylab("Missing values") +
xlab("") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
if (nrow(nas) >= 1){
ggplot(nas, aes(names, number, fill = names)) +
geom_col() +
ylab("Missing values") +
xlab("") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
}
if (nrow(nas) >= 1){
ggplot(nas, aes(reorder(names, number), number, fill = names)) +
geom_col() +
ylab("Missing values") +
xlab("") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
}
View(nas)
if (nrow(nas) >= 1){
ggplot(nas, aes(reorder(names, number), number)) +
geom_col() +
ylab("Missing values") +
xlab("") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
}
if (nrow(nas) >= 1){
ggplot(nas, aes(reorder(names, number), number, fill = number)) +
geom_col() +
ylab("Missing values") +
xlab("") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
}
if (nrow(zeros) >= 1){
ggplot(zeros, aes(reorder(names, number), number, fill = number)) +
geom_col() +
ylab("Zeros") +
xlab("") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
}
final_data <- dataX[, !(colnames(dataX) %in% all_zero$names)]
counts <- data.frame(table(samples_group$Group))
View(counts)
colnames(counts) <- c("Group", "Counts")
counts <- data.frame(table(samples_group$Group))
colnames(counts) <- c("Group", "Counts")
ggplot(counts, aes(reorder(Group, Counts), Counts, fill = Group)) +
geom_col() +
ylab("Counts") +
xlab("") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
sum(is.na(dataX))
summary_table <- data.frame(NumberOfSamples = nrow(dataX),
NumberOfFeatures = ncol(dataX),
NumberOfZeros = sum(zeros$number),
PercentageOfZeros = round(sum(zeros$number)/(nrow(dataX)*(ncol(dataX)))*100, 3),
NumberOfNA = sum(is.na(dataX)),
PercentageOfNA = round(sum(is.na(dataX))/(nrow(dataX)*(ncol(dataX)))*100, 3))
sumary_table
summary_table
summary_table <- data.frame(NumberOfSamples = nrow(dataX),
NumberOfFeatures = ncol(dataX),
NumberOfZeros = sum(zeros$number),
PercentageOfZeros = paste(round(sum(zeros$number)/(nrow(dataX)*(ncol(dataX)))*100, 3), "%"),
NumberOfNA = sum(is.na(dataX)),
PercentageOfNA = paste(round(sum(is.na(dataX))/(nrow(dataX)*(ncol(dataX)))*100, 3), "%"))
summary_table
summary_table <- data.frame(NumberOfSamples = nrow(dataX),
NumberOfFeatures = ncol(dataX),
NumberOfZeros = sum(zeros$number),
PercentageOfZeros = paste(round(sum(zeros$number)/(nrow(dataX)*(ncol(dataX)))*100, 3), "%"),
NumberOfNA = sum(is.na(dataX)),
PercentageOfNA = paste(round(sum(is.na(dataX))/(nrow(dataX)*(ncol(dataX)))*100, 3), "%"),
ncol = 1)
summary_table
knit::kable
data2 <- melt(as.data.frame(final_data[, 2:ncol(final_data)]))
View(data2)
indNum <- nrow(data2)
final_data %>%
reshape2::melt() %>%
group_by(ID) %>%
ggplot(aes(ID, value, color = Group)) +
geom_boxplot() +
{if(indNum < 11)geom_jitter()} +
theme_bw() +
xlab("Samples") +
ylab("Value") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
final_data <- dataX[, !(colnames(dataX) %in% all_zero$names)]
final_data <- cbind(samples_group, final_data)
final_data %>%
reshape2::melt() %>%
group_by(ID) %>%
ggplot(aes(ID, value, color = Group)) +
geom_boxplot() +
{if(indNum < 11)geom_jitter()} +
theme_bw() +
xlab("Samples") +
ylab("Value") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
normality <- data.frame(pval = apply(data[,3:ncol(final_data)], 2, function(x) {shapiro.test(x)$p.value}))
final_data %>%
reshape2::melt() %>%
group_by(ID) %>%
ggplot(aes(value, fill = variable, colour = variable)) +
geom_density(alpha = 0.5) +
theme_minimal() +
labs(title = "Density plot for all Features", x = "Value")
p3 <- final_data %>%
reshape2::melt()
View(p3)
p3 <- final_data %>%
reshape2::melt() %>%
group_by(ID) %>%
ggplot(aes(value, fill = Group, colour = Group)) +
geom_density(alpha = 0.5) +
theme_bw() +
labs(title = "Density plot for all Features", x = "Value")
p3
?scale_fill_viridis
X <- as.matrix(final_data[, 3:ncol(final_data)])
Y <- as.factor(final_data$Group)
pca_res <- mixOmics::pca(X, ncomp = 3, center = T, scale = T)
X <- as.matrix(final_data[, 3:ncol(final_data)])
Y <- as.factor(final_data$Group)
####
X[X == 0] <- NA
X <- apply(X, 2, function(x) {if(is.numeric(x)) ifelse(is.na(x), min(x, na.rm = T)/2, x) else x})
pca_res <- mixOmics::pca(X, ncomp = 3, center = T, scale = T)
PCi <- data.frame(pca_res$x, Groups = Y)
ggplot(PCi, aes(x = PC1, y = PC2, color = Groups)) +
geom_point(size = 3, alpha = 0.5) +
xlab(paste0("PC1 (", round(100*(pca_res$explained_variance)[1], 2), "%)")) +
ylab(paste0("PC2 (", round(100*(pca_res$explained_variance)[2], 2), "%)")) +
scale_fill_viridis() +
theme_bw()
X <- as.matrix(final_data[, 3:ncol(final_data)])
Y <- as.factor(final_data$Group)
#### dummy imputation
X[X == 0] <- NA
X <- apply(X, 2, function(x) {if(is.numeric(x)) ifelse(is.na(x), min(x, na.rm = T)/2, x) else x})
####
stat <- function(x) {
t.test(x ~ Group, na.rm = TRUE, alternative = c("two.sided"),
var.equal = input$var_equalV,
paired = input$pairedV)$p.value
}
stat_G2 <- function(x) {
t.test(x ~ Group, na.rm = TRUE, alternative = c("two.sided"),
var.equal = input$var_equalV)$estimate[[2]]
}
stat_G1 <- function(x) {
t.test(x ~ Group, na.rm = TRUE, alternative = c("two.sided"),
var.equal = input$var_equalV)$estimate[[1]]
}
p <- data.frame(pvalue = apply(FUN = stat, MARGIN = 2, X = X))
X <- as.matrix(final_data[, 3:ncol(final_data)])
Group <- as.factor(final_data$Group)
#### dummy imputation
X[X == 0] <- NA
X <- apply(X, 2, function(x) {if(is.numeric(x)) ifelse(is.na(x), min(x, na.rm = T)/2, x) else x})
####
stat <- function(x) {
t.test(x ~ Group, na.rm = TRUE, alternative = c("two.sided"),
var.equal = input$var_equalV,
paired = input$pairedV)$p.value
}
stat_G2 <- function(x) {
t.test(x ~ Group, na.rm = TRUE, alternative = c("two.sided"),
var.equal = input$var_equalV)$estimate[[2]]
}
stat_G1 <- function(x) {
t.test(x ~ Group, na.rm = TRUE, alternative = c("two.sided"),
var.equal = input$var_equalV)$estimate[[1]]
}
p <- data.frame(pvalue = apply(FUN = stat, MARGIN = 2, X = X))
X <- as.matrix(final_data[, 3:ncol(final_data)])
Group <- as.factor(final_data$Group)
#### dummy imputation
X[X == 0] <- NA
X <- apply(X, 2, function(x) {if(is.numeric(x)) ifelse(is.na(x), min(x, na.rm = T)/2, x) else x})
####
stat <- function(x) {
t.test(x ~ Group, na.rm = TRUE, alternative = c("two.sided"),
var.equal = F,
paired = F)$p.value
}
stat_G2 <- function(x) {
t.test(x ~ Group, na.rm = TRUE, alternative = c("two.sided"),
var.equal = F)$estimate[[2]]
}
stat_G1 <- function(x) {
t.test(x ~ Group, na.rm = TRUE, alternative = c("two.sided"),
var.equal = F)$estimate[[1]]
}
p <- data.frame(pvalue = apply(FUN = stat, MARGIN = 2, X = X))
p <- p %>%
rownames_to_column("feature") %>%
as_tibble() %>%
mutate(pvalue_Adj = p.adjust(pvalue, method = "fdr")) %>%
column_to_rownames("feature")
G2 <- round(data.frame(Mean_G2 = apply(FUN = stat_G2, MARGIN = 2, X = X)), 3)
G1 <- round(data.frame(Mean_G1 = apply(FUN = stat_G1, MARGIN = 2, X = X)), 3)
means <- cbind(G1, G2)
means <- means %>%
rownames_to_column("feature") %>%
mutate(Fold_Change_Ratio = as.numeric(round(Mean_G2/Mean_G1, 3)),
Difference_Of_Means = as.numeric(round(Mean_G1 - Mean_G2, 3))) %>%
column_to_rownames("feature")
df <- cbind(means, p)
####
names <- colnames(X)
df <- data.frame(pvalue = df$pvalue, FC = log2(df$Fold_Change_Ratio), names = names)
df <- mutate(df, threshold = as.factor(ifelse(df$pvalue >= 0.05,
yes = "none",
no = ifelse(df$FC < log2(1.5),
yes = ifelse(df$FC < -log2(1.5),
yes = "Down-regulated",
no = "none"),
no = "Up-regulated"))))
volcanoP <- ggplot(data = df, aes(x = FC, y = -log10(pvalue), colour = threshold, label = names)) +
geom_point(size=1.75) +
xlim(c(-5, 5)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle(paste0("Comparisson: ", names(table(samples_groups$Group))[2], "/",
names(table(samples_groups$Group))[1])) +
geom_vline(xintercept = -log2(1.5), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(1.5), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(0.05), colour = "black", linetype = "dashed") +
theme(legend.position = "none") +
labs(color = "") +
theme_bw() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363"))
mycorr <- cor(final_data[, 3:ncol(final_data)])
View(mycorr)
X <- as.matrix(final_data[, 3:ncol(final_data)])
#### dummy imputation
X[X == 0] <- NA
X <- apply(X, 2, function(x) {if(is.numeric(x)) ifelse(is.na(x), min(x, na.rm = T)/2, x) else x})
####
mycorr <- cor(X)
mycorr <- which(mycorr > 0.97 & mycorr != 1, arr.ind = TRUE)
X <- as.matrix(final_data[, 3:ncol(final_data)])
X[X == 0] <- NA
X <- apply(X, 2, function(x) {if(is.numeric(x)) ifelse(is.na(x), min(x, na.rm = T)/2, x) else x})
mycorr <- cor(X)
mycorr <- which(mycorr > 0.97 & mycorr != 1, arr.ind = TRUE)
num_corr <- nrow(mycorr)
num_corr
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
View(zeros)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install_github("pcastellanoescuder/POMA")
shiny::runApp()
POMA::PomaOddsRatio()
POMA::PomaOddsRatio
runApp()
runApp()
?PomaOddsRatio
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?PomaImpute
runApp()
runApp()
target <- readr::read_csv("data/target.csv")
features <- readr::read_csv("data/features.csv")
covariates <- readr::read_csv("data/covariables.csv")
covariates <- covariates %>% dplyr::select(-1)
prepared_data <- bind_cols(target, covariates, features)
targetX <- prepared_data %>% dplyr::select(1, 2:ncol(covariates) + 2)
View(targetX)
featuresX <- prepared_data %>% dplyr::select(-1:2)
View(featuresX)
featuresX <- prepared_data %>% dplyr::select(-1, -2)
View(featuresX)
targetX <- prepared_data[,c (1, 2:ncol(covariates) + 2)]
View(targetX)
targetX <- prepared_data[,c (1, 2:(ncol(covariates) + 2))]
View(targetX)
View(covariates)
featuresX <- prepared_data[, c((ncol(covariates) + 2):ncol(prepared_data))]
View(featuresX)
ncol(covariates) + 2
featuresX <- prepared_data[, c((ncol(covariates) + 3):ncol(prepared_data))]
View(targetX)
targetX <- prepared_data[,c (1, 2:(ncol(covariates) + 2))]
featuresX <- prepared_data[, c((ncol(covariates) + 3):ncol(prepared_data))]
target <- prepared_data %>% dplyr::select(1:2)
features <- prepared_data %>% dplyr::select(-1:2)
View(target)
View(features)
features <- prepared_data %>% dplyr::select(-1, -2)
runApp()
prepared_data <- prepared_data[, c(1:2, (3 + ncol(covariates)):ncol(prepared_data))]
View(prepared_data)
View(features)
runApp()
runApp()
runApp()
runApp()
runApp()
?PomaNorm
?PomaNormPlot
runApp()
runApp()
runApp()
runApp()
