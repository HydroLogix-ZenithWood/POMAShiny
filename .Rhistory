var.equal = input$var_equalV)$estimate[[1]]
}
p <- data.frame(pvalue = apply(FUN = stat, MARGIN = 2, X = X))
X <- as.matrix(final_data[, 3:ncol(final_data)])
Group <- as.factor(final_data$Group)
#### dummy imputation
X[X == 0] <- NA
X <- apply(X, 2, function(x) {if(is.numeric(x)) ifelse(is.na(x), min(x, na.rm = T)/2, x) else x})
####
stat <- function(x) {
t.test(x ~ Group, na.rm = TRUE, alternative = c("two.sided"),
var.equal = F,
paired = F)$p.value
}
stat_G2 <- function(x) {
t.test(x ~ Group, na.rm = TRUE, alternative = c("two.sided"),
var.equal = F)$estimate[[2]]
}
stat_G1 <- function(x) {
t.test(x ~ Group, na.rm = TRUE, alternative = c("two.sided"),
var.equal = F)$estimate[[1]]
}
p <- data.frame(pvalue = apply(FUN = stat, MARGIN = 2, X = X))
p <- p %>%
rownames_to_column("feature") %>%
as_tibble() %>%
mutate(pvalue_Adj = p.adjust(pvalue, method = "fdr")) %>%
column_to_rownames("feature")
G2 <- round(data.frame(Mean_G2 = apply(FUN = stat_G2, MARGIN = 2, X = X)), 3)
G1 <- round(data.frame(Mean_G1 = apply(FUN = stat_G1, MARGIN = 2, X = X)), 3)
means <- cbind(G1, G2)
means <- means %>%
rownames_to_column("feature") %>%
mutate(Fold_Change_Ratio = as.numeric(round(Mean_G2/Mean_G1, 3)),
Difference_Of_Means = as.numeric(round(Mean_G1 - Mean_G2, 3))) %>%
column_to_rownames("feature")
df <- cbind(means, p)
####
names <- colnames(X)
df <- data.frame(pvalue = df$pvalue, FC = log2(df$Fold_Change_Ratio), names = names)
df <- mutate(df, threshold = as.factor(ifelse(df$pvalue >= 0.05,
yes = "none",
no = ifelse(df$FC < log2(1.5),
yes = ifelse(df$FC < -log2(1.5),
yes = "Down-regulated",
no = "none"),
no = "Up-regulated"))))
volcanoP <- ggplot(data = df, aes(x = FC, y = -log10(pvalue), colour = threshold, label = names)) +
geom_point(size=1.75) +
xlim(c(-5, 5)) +
xlab("log2 Fold Change") +
ylab("-log10 p-value") +
scale_y_continuous(trans = "log1p")+
ggtitle(paste0("Comparisson: ", names(table(samples_groups$Group))[2], "/",
names(table(samples_groups$Group))[1])) +
geom_vline(xintercept = -log2(1.5), colour = "black", linetype = "dashed") +
geom_vline(xintercept = log2(1.5), colour = "black", linetype = "dashed") +
geom_hline(yintercept = -log10(0.05), colour = "black", linetype = "dashed") +
theme(legend.position = "none") +
labs(color = "") +
theme_bw() +
scale_color_manual(values = c("Down-regulated" = "#E64B35", "Up-regulated" = "#3182bd", "none" = "#636363"))
mycorr <- cor(final_data[, 3:ncol(final_data)])
View(mycorr)
X <- as.matrix(final_data[, 3:ncol(final_data)])
#### dummy imputation
X[X == 0] <- NA
X <- apply(X, 2, function(x) {if(is.numeric(x)) ifelse(is.na(x), min(x, na.rm = T)/2, x) else x})
####
mycorr <- cor(X)
mycorr <- which(mycorr > 0.97 & mycorr != 1, arr.ind = TRUE)
X <- as.matrix(final_data[, 3:ncol(final_data)])
X[X == 0] <- NA
X <- apply(X, 2, function(x) {if(is.numeric(x)) ifelse(is.na(x), min(x, na.rm = T)/2, x) else x})
mycorr <- cor(X)
mycorr <- which(mycorr > 0.97 & mycorr != 1, arr.ind = TRUE)
num_corr <- nrow(mycorr)
num_corr
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
View(zeros)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install_github("pcastellanoescuder/POMA")
shiny::runApp()
POMA::PomaOddsRatio()
POMA::PomaOddsRatio
runApp()
runApp()
?PomaOddsRatio
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?PomaImpute
runApp()
runApp()
target <- readr::read_csv("data/target.csv")
features <- readr::read_csv("data/features.csv")
covariates <- readr::read_csv("data/covariables.csv")
covariates <- covariates %>% dplyr::select(-1)
prepared_data <- bind_cols(target, covariates, features)
targetX <- prepared_data %>% dplyr::select(1, 2:ncol(covariates) + 2)
View(targetX)
featuresX <- prepared_data %>% dplyr::select(-1:2)
View(featuresX)
featuresX <- prepared_data %>% dplyr::select(-1, -2)
View(featuresX)
targetX <- prepared_data[,c (1, 2:ncol(covariates) + 2)]
View(targetX)
targetX <- prepared_data[,c (1, 2:(ncol(covariates) + 2))]
View(targetX)
View(covariates)
featuresX <- prepared_data[, c((ncol(covariates) + 2):ncol(prepared_data))]
View(featuresX)
ncol(covariates) + 2
featuresX <- prepared_data[, c((ncol(covariates) + 3):ncol(prepared_data))]
View(targetX)
targetX <- prepared_data[,c (1, 2:(ncol(covariates) + 2))]
featuresX <- prepared_data[, c((ncol(covariates) + 3):ncol(prepared_data))]
target <- prepared_data %>% dplyr::select(1:2)
features <- prepared_data %>% dplyr::select(-1:2)
View(target)
View(features)
features <- prepared_data %>% dplyr::select(-1, -2)
runApp()
prepared_data <- prepared_data[, c(1:2, (3 + ncol(covariates)):ncol(prepared_data))]
View(prepared_data)
View(features)
runApp()
runApp()
runApp()
runApp()
runApp()
?PomaNorm
?PomaNormPlot
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
POMA::PomaVolcano
?POMA::PomaVolcano
runApp()
devtools::install_github("pcastellanoescuder/POMA")
target <- readr::read_csv("data/target.csv")
features <- readr::read_csv("data/features.csv")
data <- POMA::PomaMSnSetClass(target, features)
POMA::PomaBoxplots
devtools::install_github("pcastellanoescuder/POMA")
devtools::install_github("pcastellanoescuder/POMA", force = T)
library(POMA)
POMA::PomaBoxplots(data)
library(POMA)
POMA::PomaBoxplots(data)
POMA::PomaBoxplots(data, group = "features")
POMA::PomaBoxplots(data, group = "features", feature_name = colnames(features)[1:2])
POMA::PomaBoxplots(data, group = "features", feature_name = colnames(features)[1:2], jitter = F)
shiny::runApp()
runApp()
runApp()
runApp()
PomaUnivariate(data, method = "kruskal")
?PomaUnivariate
##
if (input$univariate_test == "ttest"){
param_ttest <- POMA::PomaUnivariate(data, method = "ttest")
return(param_ttest)
}
runApp()
runApp()
runApp()
runApp()
POMA::PomaMultivariate()
POMA::PomaMultivariate
#
output$pca_scores <- DT::renderDataTable({
DT::datatable(Multivariate_plot()$pca_scores,
filter = 'none',extensions = 'Buttons',
escape=FALSE,  rownames=TRUE, class = 'cell-border stripe',
options = list(
scrollX = TRUE,
dom = 'Bfrtip',
buttons =
list("copy", "print", list(
extend="collection",
buttons=list(list(extend="csv",
filename="POMA_plsda_scores"),
list(extend="excel",
filename="POMA_plsda_scores"),
list(extend="pdf",
filename="POMA_plsda_scores")),
text="Dowload")),
order=list(list(2, "desc")),
pageLength = nrow(Multivariate_plot()$pca_scores)))
})
##
output$ber_table <- DT::renderDataTable({
ber <- Multivariate_plot()$ber
DT::datatable(ber,
filter = 'none',extensions = 'Buttons',
escape=FALSE,  rownames=TRUE, class = 'cell-border stripe',
options = list(
scrollX = TRUE,
dom = 'Bfrtip',
buttons =
list("copy", "print", list(
extend="collection",
buttons=list(list(extend="csv",
filename="POMA_plsda_ber"),
list(extend="excel",
filename="POMA_plsda_ber"),
list(extend="pdf",
filename="POMA_plsda_ber")),
text="Dowload")),
order=list(list(2, "desc")),
pageLength = nrow(Multivariate_plot()$ber)))
})
##
output$vip_table <- DT::renderDataTable({
DT::datatable(Multivariate_plot()$plsda.vip.top,
filter = 'none',extensions = 'Buttons',
escape=FALSE,  rownames=TRUE, class = 'cell-border stripe',
options = list(
scrollX = TRUE,
dom = 'Bfrtip',
buttons =
list("copy", "print", list(
extend="collection",
buttons=list(list(extend="csv",
filename="POMA_plsda_vip"),
list(extend="excel",
filename="POMA_plsda_vip"),
list(extend="pdf",
filename="POMA_plsda_vip")),
text="Dowload")),
order=list(list(2, "desc")),
pageLength = nrow(Multivariate_plot()$plsda.vip.top)))
})
##
output$errors_splsda <- DT::renderDataTable({
errors_splsda_out <- Multivariate_plot()$errors_splsda_out
col_idx <- grep("features", names(errors_splsda_out))
errors_splsda_out <- errors_splsda_out[, c(col_idx, (1:ncol(errors_splsda_out))[-col_idx])]
DT::datatable(errors_splsda_out,
filter = 'none',extensions = 'Buttons',
escape=FALSE,  rownames=FALSE, class = 'cell-border stripe',
options = list(
scrollX = TRUE,
dom = 'Bfrtip',
buttons =
list("copy", "print", list(
extend="collection",
buttons=list(list(extend="csv",
filename="POMA_splsda_errors"),
list(extend="excel",
filename="POMA_splsda_errors"),
list(extend="pdf",
filename="POMA_splsda_errors")),
text="Dowload")),
order=list(list(2, "desc")),
pageLength = nrow(Multivariate_plot()$errors_splsda_out)))
})
?POMA::PomaMultivariate
mixOmics::plsda()
library(POMA)
st000284
data <- st000284
POMA::PomaMultivariate(data, method = "pca", components = input$num_comp, scale = input$scale, center = input$center, ellipse = input$ellipse)
POMA::PomaMultivariate(data, method = "pca")
runApp()
POMA::PomaMultivariate()
POMA::PomaMultivariate
pca_res <- POMA::PomaMultivariate(data, method = "pca")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
res <- POMA::PomaMultivariate(data, method = "plsda")
names(res)
res$errors_plsda
overall_table <- res$errors_plsda
overall_tableX <- overall_table %>% pivot_wider()
overall_tableX <- overall_table %>% pivot_wider(names_from = variable, values_from = value)
View(overall_tableX)
overall_tableX <- overall_table %>%
pivot_wider(names_from = variable, values_from = value) %>%
column_to_rownames("Component") %>%
select_at(vars(starts_with("overall")))
View(overall_table)
runApp()
res <- POMA::PomaMultivariate(data, method = "splsda")
res <- POMA::PomaMultivariate(st000284, method = "splsda")
names(res)
res$ncomp
res$select_keepX
res$errors_splsda
res$bal_error_rate
names(res)
errors_splsda <- res$errors_splsda
errors_splsdaX <- errors_splsda %>%
pivot_wider(names_from = variable, values_from = value)
View(errors_splsdaX)
errors_splsdaX <- errors_splsda %>%
pivot_wider(names_from = variable, values_from = c(value, sd))
View(errors_splsdaX)
errors_splsdaX <- errors_splsda %>%
pivot_wider(names_from = c(features, variable), values_from = c(value, sd))
View(errors_splsdaX)
errors_splsdaX <- errors_splsda %>%
pivot_wider(names_from = features, values_from = c(value, sd))
View(errors_splsdaX)
errors_splsdaX <- errors_splsda %>%
pivot_wider(names_from = variable, values_from = c(value, sd))
View(errors_splsdaX)
errors_splsdaX <- errors_splsda %>%
pivot_wider(names_from = feature, values_from = c(variable, value, sd))
errors_splsdaX <- errors_splsda %>%
pivot_wider(names_from = features, values_from = c(variable, value, sd))
errors_splsdaX <- errors_splsda %>%
pivot_wider(names_from = variable, values_from = c(value, sd))
View(errors_splsdaX)
runApp()
runApp()
runApp()
POMA::PomaMultivariate()
POMA::PomaMultivariate
runApp()
runApp()
devtools::install_github("pcastellanoescuder/POMA")
library(POMA)
groups_limma <- pData(st000284)[1]
library(Biobase)
groups_limma <- pData(st000284)[1]
contrasts <- levels(as.factor(groups_limma))
combinations <- expand_grid(contrasts, contrasts)
library(tidyverse)
combinations <- expand_grid(contrasts, contrasts)
combinations <- expand.grid(contrasts, contrasts)
combinations <- combinations[!(combinations$Var1 == combinations$Var2),]
combinations <- combinations[!duplicated(t(apply(combinations[c("Var1", "Var2")], 1, sort))), ]
combinationNames <- c()
for (i in 1:nrow(combinations)){
combinationNames[i] <- paste0(combinations$Var1[i],"-",combinations$Var2[i])
}
combinationNames
groups_limma
contrasts
contrasts <- levels(as.factor(groups_limma[,1]))
contrasts
contrasts <- levels(as.factor(groups_limma[,1]))
combinations <- expand.grid(contrasts, contrasts)
combinations <- combinations[!(combinations$Var1 == combinations$Var2),]
combinations <- combinations[!duplicated(t(apply(combinations[c("Var1", "Var2")], 1, sort))), ]
combinationNames <- c()
for (i in 1:nrow(combinations)){
combinationNames[i] <- paste0(combinations$Var1[i],"-",combinations$Var2[i])
}
combinationNames
combinationNames[1]
?PomaLimma
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
PomaLasso()
?PomaLasso()
PomaLasso(data)
PomaLasso(data, method = "lasso")
PomaLasso(st000284, method = "lasso")
PomaLasso(st000284, method = "ridge")
runApp()
runApp()
runApp()
runApp()
POMA::PomaOddsRatio
runApp()
?PomaRandForest
res <- PomaRandForest(st000284)
names(res)
res$importance_pred
res$forest_data
runApp()
rank_prod_res <- POMA::PomaRankProd(st000284)
?PomaRankProd
names(rank_prod_res)
library(patchwork)
library(plotly)
ggplotly(rank_prod_res$Upregulated_RP_plot / rank_prod_res$Downregulated_RP_plot)
rank_prod_res$Upregulated_RP_plot / rank_prod_res$Downregulated_RP_plot
rank_prod_res$Upregulated_RP_plot / rank_prod_res$Downregulated_RP_plot
ç
p1 <- rank_prod_res$Upregulated_RP_plot
p2 <- rank_prod_res$Downregulated_RP_plot
p1
p2
dev.off()
dev.off()
p2
p1
p1/p2
ggplotly(p1/p2)
runApp()
p1/p2
runApp()
runApp()
PomaRankProd()
?PomaRankProd()
?RankProd::RankProducts()
runApp()
res <- PomaRankProd(st000284)
names(res)
runApp()
non-numeric argument to binary operator
runApp()
res$upregulated
class(res$upregulated)
imputed <- PomaNorm(st000284. method = "log_pareto")
imputed <- PomaNorm(st000284, method = "log_pareto")
res <- PomaRankProd(imputed)
res$upregulated
log(-3)
runApp()
View(imputed)
Biobase::varLabels(st000284)[1]
Biobase::varLabels(st000284)[1] <- "Group"
Group <- Biobase::pData(st000284)$Group
Group
runApp()
runApp()
POMA::PomaRankProd
runApp()
runApp()
runApp()
colnames(pData(st000284)[,1])
colnames(pData(st000284)[1])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
R.version
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
?POMA::PomaVolcano()
shiny::runApp()
shiny::runApp()
runApp()
BiocManager::install("limma")
library(POMA)
runApp()
packageVersion("limma")
install.packages("float")
devtools::install_github("pcastellanoescuder/POMA")
runApp()
BiocManager::install("impute")
runApp()
BiocManager::install("preprocessCore")
BiocManager::install("Biobase")
runApp()
BiocManager::install("ProtGenerics")
runApp()
BiocManager::install()
runApp()
BiocManager::install("zlibbioc")
runApp()
R.version
runApp()
library(sessioninfo)
library(dplyr)
## list all installed packages
pkgs <- installed.packages()[,'Package']
## read description files & parse using sessioninfo
desc <- lapply(pkgs, utils::packageDescription)
source <- vapply(desc, sessioninfo:::pkg_source, character(1))
## combine and filter for BioC only
bioc_pkgs <- data_frame(pkgs, source) %>%
filter(source == "Bioconductor")
View(bioc_pkgs)
BiocManager::install(bioc_pkgs$pkgs)
runApp()
shiny::runApp()
runApp()
substr(packageVersion("POMA"), start = 1, stop = 5)
runApp()
