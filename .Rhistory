shiny::runApp()
runApp()
packageVersion("limma")
BiocManager::install("limma")
packageVersion("limma")
library
runApp()
runApp()
shiny::runGitHub("shinyLimma", "SJCaldwell")
install.packages("shinyTable")
R_min_version = "3.1.0"
R_version = paste0(R.Version()$major, ".", R.Version()$minor)
if(compareVersion(R_version, R_min_version) < 0){
stop("You do not have the latest required.\n",
"Launch will fail if you continue.\n",
"Go to http://cran.r-project.org/ to update your version of R.")
}
######
#Install basic required packages if not available/installed
######
download_not_installed <- function(x){
availpacks = .packages(all.available = TRUE)
source("http://bioconductor.org/biocLite.R")
missingPackages = x[!(x %in% availpacks)]
message("The following packages were missing. Installation attempted...")
message(missingPackages)
if (length(missingPackages) > 0){
for (i in missingPackages){
message("Installing", i, "package using biocLite...\n")
biocLite(i)
}
}
}
vanilla_install_packages <- c("limma",
'markdown',
'shiny',
'shinyjs',
'shinyBS',
'scales',
'markdown',
'ggplot2',
'png',
'vsn',
'RUnit',
'reshape',
'digest',
'Rcpp',
'VennDiagram',
'convert'
)
download_not_installed(vanilla_install_packages)
###################################
#Should use latest version of shiny
###################################
shiny_okay <- FALSE
if ("shiny" %in% .packages(all.available = TRUE)){
shiny_min_version = "0.11"
shiny_compare = compareVersion(as.character(packageVersion("shiny")), shiny_min_version)
if (shiny_compare >= 0){
shiny_okay <- TRUE
}
}
if(!shiny_okay){
install.packages('devtools')
devtools::install_github("rstudio/shiny")
}
devtools::install_github("trestletech/shinyTable")
shiny::runGitHub("shinyLimma", "SJCaldwell")
install.packages("RUnit")
shiny::runGitHub("shinyLimma", "SJCaldwell")
install.packages("convert")
shiny::runGitHub("shinyLimma", "SJCaldwell")
runApp()
initialmodel
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
installifnot <- function(pckgName){
if (!(require(pckgName, character.only = TRUE))) {
install.packages(pckgName, dep = TRUE)
require(pckgName, character.only = TRUE)
}
}
pk1 <- c("shiny", "shinydashboard", "DT", "reshape2", "ggplot2", "gplots", "scales", "plotly", "readxl", "glmnet", "ggvis", "shinyhelper",
"broom", "readr", "markdown", "ggthemes", "dplyr", "ggrepel", "ggfortify", "shinyBS", "glue", "limma", "tidyr", "mixOmics", "devtools",
"Rcpp", "randomForest", "tidyverse", "ggpubr", "gridExtra", "formattable", "viridis", "knitr","kableExtra", "vroom", "prettydoc")
for (i in 1:length(pk1)){
installifnot(pk1[i])
}
install.packages(pk1)
install.packages(pk1)
shiny::runApp()
runApp()
R.version
shiny::runApp()
R.version
runApp()
install.packages("rsconnect")
install.packages("rsconnect")
shiny::runApp()
BiocManager::install("mixOmics")
runApp()
shiny::runApp()
runApp()
shiny::runApp()
library(tidyverse)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?numericInput
runApp()
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
data <- data("iris")
data
data("iris")
boxplot(iris$Sepal.Length~iris$Petal.Length)
boxplot(iris$Sepal.Length,iris$Petal.Length)
boxplot(iris$Sepal.Length,iris$)
boxplot(iris$Sepal.Length,iris$Species)
t.test(iris$Sepal.Length, iris$Species)
t.test(iris$Sepal.Length, iris$Petal.Length)
t.test(iris$Sepal.Length, iris$Sepal.Length)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
?POMA::PomaVolcano
POMA::PomaUnivariate()
POMA::PomaUnivariate
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
table(samples_groups$Group
)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
POMA::PomaMultivariate()
POMA::PomaMultivariate
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(mixOmics)
data(liver.toxicity)
X <- as.matrix(liver.toxicity$gene)
Y <- as.factor(liver.toxicity$treatment[, 4])
## PLS-DA function
plsda.res <- plsda(X, Y, ncomp = 5)
plsda.vip<-as.data.frame(vip(plsda.res))
plsda.vip
plsda.vip.top <- plsda.vip[plsda.vip$comp1 > 1,]
plsda.vip.top
plsda.vip.top <- plsda.vip.top[order(plsda.vip.top$comp1) ,]
plsda.vip.top
plsda.vip.top <- plsda.vip.top[order(plsda.vip.top$comp1, decreasing = T) ,]
plsda.vip.top$Features <- rownames(plsda.vip.top)
colnames(plsda.vip.top)[1] <- "VIP"
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=Features, y=VIP)) +
geom_bar(stat="identity", fill = rep(c("lightblue"), nrow(plsda.vip.top))) +
coord_flip() +
theme_bw())
vip_plsda
runApp()
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=Features, y=VIP)) +
geom_bar(stat="identity", fill = rep(c("lightblue"), nrow(plsda.vip.top))) +
coord_flip() +
xlab("") +
theme_bw())
vip_plsda
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=Features, y=reorder(VIP, Features))) +
geom_bar(stat="identity", fill = rep(c("lightblue"), nrow(plsda.vip.top))) +
coord_flip() +
xlab("") +
theme_bw())
vip_plsda
vip_plsda <- ggplotly(ggplot(plsda.vip.top, aes(x=reorder(Features, VIP), y=VIP)) +
geom_bar(stat="identity", fill = rep(c("lightblue"), nrow(plsda.vip.top))) +
coord_flip() +
xlab("") +
theme_bw())
vip_plsda
runApp()
runApp()
runApp()
devtools::install_github("pcastellanoescuder/POMA")
shiny::runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("~/Dropbox/POMA/POMA_Shiny/data/st000284.rda")
library(MSnbase)
load("~/Dropbox/POMA/POMA_Shiny/data/st000284.rda")
View(st000284)
library(Biobase)
features <- t(exprs(st000284))
View(features)
getwd()
write.csv(features, "data/features.csv")
target <- pData(st000284)
View(target)
View(features)
write.csv(features, "data/features.csv", row.names = F)
library(tidyverse)
target <- target %>% rownames_to_column("ID")
colnames(target)[2] <- "Group"
View(target)
write.csv(target[,1:2], "data/target.csv", row.names = F)
write.csv(target[,c(1,3:6)], "data/covariables.csv", row.names = F)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
runApp()
?selectizeInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/toy.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
POMA::PomaNormPlot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
metabolites <- readr::read_csv("data/features.csv")
target <- readr::read_csv("data/target.csv")
to_boxplot <- cbind(target, metabolites)
boxP <- to_boxplot %>%
dplyr::select(-ID) %>%
reshape2::melt() %>%
filter(variable %in% input$sel_boxplot) %>%
group_by(Group) %>%
ggplot(aes(variable, value, fill = Group)) +
geom_violin() +
ylab("Value") +
xlab("") +
{if(input$jitter)geom_jitter()} +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw()
boxP <- to_boxplot %>%
dplyr::select(-ID) %>%
reshape2::melt() %>%
filter(variable %in% input$sel_boxplot) %>%
group_by(Group) %>%
ggplot(aes(variable, value, fill = Group)) +
geom_violin() +
ylab("Value") +
xlab("") +
# {if(input$jitter)geom_jitter()} +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw()
boxP <- to_boxplot %>%
dplyr::select(-ID) %>%
reshape2::melt() %>%
# filter(variable %in% input$sel_boxplot) %>%
group_by(Group) %>%
ggplot(aes(variable, value, fill = Group)) +
geom_violin() +
ylab("Value") +
xlab("") +
# {if(input$jitter)geom_jitter()} +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw()
boxP
names_boxplot <- colnames(to_boxplot)[3:ncol(to_boxplot)]
boxP <- to_boxplot %>%
dplyr::select(-ID) %>%
reshape2::melt() %>%
filter(variable %in% names_boxplot[1:2]) %>%
group_by(Group) %>%
ggplot(aes(variable, value, fill = Group)) +
geom_violin() +
ylab("Value") +
xlab("") +
# {if(input$jitter)geom_jitter()} +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw()
boxP
to_boxplot %>%
dplyr::select(-ID) %>%
reshape2::melt() %>%
filter(variable %in% names_boxplot[1:2]) %>%
group_by(Group) %>%
ggplot(aes(variable, value, fill = Group)) +
geom_violin() +
ylab("Value") +
xlab("") +
# {if(input$jitter)geom_jitter()} +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw()
boxP <- plotly::ggplotly(boxP)
boxP
to_boxplot %>%
dplyr::select(-ID) %>%
reshape2::melt() %>%
filter(variable %in% names_boxplot[1:2]) %>%
group_by(Group) %>%
ggplot(aes(variable, value, fill = Group)) +
geom_violin() +
geom_boxplot() +
ylab("Value") +
xlab("") +
# {if(input$jitter)geom_jitter()} +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw()
boxP <- to_boxplot %>%
dplyr::select(-ID) %>%
reshape2::melt() %>%
filter(variable %in% names_boxplot[1:2]) %>%
group_by(Group) %>%
ggplot(aes(variable, value, fill = Group)) +
geom_violin() +
ylab("Value") +
xlab("") +
# {if(input$jitter)geom_jitter()} +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_bw() + geom_jitter()
boxP
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
https://github.com/CSSEGISandData/COVID-19/blob/master/csse_covid_19_data/csse_covid_19_daily_reports/03-12-2020.csv
data <- readr::read_csv(https://raw.githubusercontent.com/CSSEGISandData/COVID-19/blob/master/csse_covid_19_data/csse_covid_19_daily_reports/03-12-2020.csv)
data <- readr::read_csv(url(https://raw.githubusercontent.com/CSSEGISandData/COVID-19/blob/master/csse_covid_19_data/csse_covid_19_daily_reports/03-12-2020.csv))
library(RCurl)
my_url <- getURL("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/blob/master/csse_covid_19_data/csse_covid_19_daily_reports/03-12-2020.csv")
covid_data <- readr::read_csv(text = my_url)
covid_data <- readr::read_csv(my_url)
View(covid_data)
my_url
my_url <- getURL("https://raw.github.com/CSSEGISandData/COVID-19/blob/master/csse_covid_19_data/csse_covid_19_daily_reports/03-12-2020.csv")
covid_data <- readr::read_csv(my_url)
my_url
my_url <- getURL("https://raw.github.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/03-12-2020.csv")
my_url
library(readr)
data <- read_csv("https://raw.githubusercontent.com/RobertMyles/Bayesian-Ideal-Point-IRT-Models/master/Senate_Example.csv")
data <- readr::read_csv("https://raw.github.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/03-12-2020.csv")
View(data)
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(readr)
data <- readr::read_csv("https://raw.github.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/03-13-2020.csv")
data <- readr::read_csv("https://raw.github.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/03-14-2020.csv")
data <- readr::read_csv("https://raw.github.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/03-13-2020.csv")
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
target <- readr::read_csv("../data/target.csv")
features <- readr::read_csv("../data/features.csv")
data <- POMA::PomaMSnSetClass(target, features)
warnings()
imputed <- POMA::PomaImpute(data, method = "knn")
normalized <- POMA::PomaNorm(imputed, method = "log_pareto")
POMA::PomaMultivariate(normalized, method = "pca")
POMA::PomaMultivariate(normalized, method = "pca", ellipse = F)$scoresplot
POMA::PomaMultivariate(normalized, method = "plsda", ellipse = T)
PomaMultivariate
POMA::PomaMultivariate
?POMA::PomaLasso(
)
POMA::PomaLasso
POMA::PomaRankProd
?POMA::PomaRandForest
POMA::PomaRandForest
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
