p2 <- ggplot(data = importancia_pred, aes(x = reorder(variable, IncNodePurity),
y = IncNodePurity,
fill = IncNodePurity)) +
labs(x = "variable", title = "Reducción de pureza") +
geom_col() +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom")
ggarrange(p1, p2)
p1
p2
p2
ggplot(data = importancia_pred, aes(x = reorder(variable, IncNodePurity),
y = IncNodePurity,
fill = IncNodePurity)) +
labs(x = "variable", title = "Reducción de pureza") +
geom_col() +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom")
dev.off()
ggplot(data = importancia_pred, aes(x = reorder(variable, IncNodePurity),
y = IncNodePurity,
fill = IncNodePurity)) +
labs(x = "variable", title = "Reducción de pureza") +
geom_col() +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom")
importancia_pred
View(importancia_pred)
summary(lm(Dg_NPS ~ FCRO_dif, data = data))
summary(lm(Dg_NPS ~ FCRO_dif + Clav_num, data = data))
rf_data <- data
rf_data <- rf_data[,5:ncol(rf_data)-2]
#rf_data <- rf_data[complete.cases(rf_data), ]
rf_data$encuesta_calidad_aliment_AM_cat <- NULL
#colnames(rf_data)[1] <- "Group"
#training Sample with 300 observations
train <- sample(1:nrow(rf_data), round(dim(rf_data)[1]/3))
library(randomForest)
modelo_randomforest <- randomForest(as.factor(T2DM) ~ . ,
data = rf_data,
subset = train,
ntree = 500,
mtry = 10,
nodesize = 10)
library(tidyverse)
library(ggpubr)
importancia_pred <- as.data.frame(importance(modelo_randomforest, scale = TRUE))
importancia_pred <- rownames_to_column(importancia_pred, var = "variable")
p1 <- ggplot(data = importancia_pred, aes(x = reorder(variable, `%IncMSE`),
y = `%IncMSE`,
fill = `%IncMSE`)) +
labs(x = "variable", title = "Reducción de MSE") +
geom_col() +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom")
p2 <- ggplot(data = importancia_pred, aes(x = reorder(variable, IncNodePurity),
y = IncNodePurity,
fill = IncNodePurity)) +
labs(x = "variable", title = "Reducción de pureza") +
geom_col() +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom")
ggarrange(p1, p2)
ggplot(data = importancia_pred, aes(x = reorder(variable, IncNodePurity),
y = IncNodePurity,
fill = IncNodePurity)) +
labs(x = "variable", title = "Reducción de pureza") +
geom_col() +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom")
dev.off()
ggplot(data = importancia_pred, aes(x = reorder(variable, IncNodePurity),
y = IncNodePurity,
fill = IncNodePurity)) +
labs(x = "variable", title = "Reducción de pureza") +
geom_col() +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom")
summary(lm(T2DM ~ FCRO_dif + Clav_num, data = data))
summary(lm(T2DM ~ FCRO_dif, data = data))
rf_data <- data
rf_data <- rf_data[,5:ncol(rf_data)-2]
#rf_data <- rf_data[complete.cases(rf_data), ]
rf_data$encuesta_calidad_aliment_AM_cat <- NULL
#colnames(rf_data)[1] <- "Group"
#training Sample with 300 observations
train <- sample(1:nrow(rf_data), round(dim(rf_data)[1]/3))
library(randomForest)
modelo_randomforest <- randomForest(as.factor(T2DM) ~ . ,
data = rf_data,
subset = train,
ntree = 500,
mtry = 10,
nodesize = 10)
library(tidyverse)
library(ggpubr)
importancia_pred <- as.data.frame(importance(modelo_randomforest, scale = TRUE))
importancia_pred <- rownames_to_column(importancia_pred, var = "variable")
ggplot(data = importancia_pred, aes(x = reorder(variable, IncNodePurity),
y = IncNodePurity,
fill = IncNodePurity)) +
labs(x = "variable", title = "Reducción de pureza") +
geom_col() +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom")
rf_data <- data
rf_data <- rf_data[,5:ncol(rf_data)-2]
#rf_data <- rf_data[complete.cases(rf_data), ]
rf_data$encuesta_calidad_aliment_AM_cat <- NULL
#training Sample with 300 observations
train <- sample(1:nrow(rf_data), round(dim(rf_data)[1]/3))
library(randomForest)
modelo_randomforest <- randomForest(as.factor(T2DM) ~ . ,
data = rf_data,
subset = train,
ntree = 500,
mtry = 10,
nodesize = 10)
modelo_randomforest
library(tidyverse)
library(ggpubr)
importancia_pred <- as.data.frame(importance(modelo_randomforest, scale = TRUE))
importancia_pred <- rownames_to_column(importancia_pred, var = "variable")
ggplot(data = importancia_pred, aes(x = reorder(variable, IncNodePurity),
y = IncNodePurity,
fill = IncNodePurity)) +
labs(x = "variable", title = "Reducción de pureza") +
geom_col() +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom")
ggplot(data = importancia_pred, aes(x = reorder(variable, `%IncMSE`),
y = `%IncMSE`,
fill = `%IncMSE`)) +
labs(x = "variable", title = "Reducción de MSE") +
geom_col() +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom")
modelo_randomforest
ggplot(data = importancia_pred, aes(x = reorder(variable, IncNodePurity),
y = IncNodePurity,
fill = IncNodePurity)) +
labs(x = "variable", title = "Reducción de pureza") +
geom_col() +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom")
ggplot(data = importancia_pred, aes(x = reorder(variable, `%IncMSE`),
y = `%IncMSE`,
fill = `%IncMSE`)) +
labs(x = "variable", title = "Reducción de MSE") +
geom_col() +
coord_flip() +
theme_bw() +
theme(legend.position = "bottom")
View(importancia_pred)
shiny::runApp()
data <- read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
#data <- read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data)[1:2] <- c("ID", "Group")
library(ggplot2)
library(plotly)
library(reshape)
ggplotly(ggplot(data, aes(Group, fill = Group)) +
geom_bar(stat = "count") +
labs(title = "Frequency by Groups", x = "Group") +
theme_minimal())
data2 <- melt(as.data.frame(data[,2:ncol(data)]))
normality <- data.frame(pval=apply(data[,3:ncol(data)],2,function(x) {shapiro.test(x)$p.value}))
normality$pval <- p.adjust(normality$pval, method = "fdr")
View(normality)
data2%>%
group_by(Group)%>%
plot_ly(x=~variable, y= ~value, color= ~Group, legendgroup=~Group, type = "box") %>%
layout(title = "Boxplot of all metabolites", y = "Concentration") + theme_minimal()
data2%>%
group_by(Group)%>%
plot_ly(x=~variable, y= ~value, color= ~Group, legendgroup=~Group, type = "box") %>%
layout(title = "Boxplot of all metabolites", y = "Concentration")
data2%>%
group_by(Group)%>%
plot_ly(x=~Group, y= ~value, color= ~Group, legendgroup=~Group, type = "box") %>%
layout(title = "Boxplot of all metabolites by Group", y = "Concentration")
data2%>%
group_by(Group)%>%
plot_ly(x=~variable, y= ~log2(value), color= ~Group, legendgroup=~Group, type = "box") %>%
layout(title = "Boxplot of all metabolites (log2)", y = "log2(Concentration)")
ggplotly(ggplot(data2, aes(value, colour = variable)) +
geom_density() +
theme_minimal() +
labs(title = "Density plot for all Variables", x = "Concentration"))
runApp()
homo <- data.frame(pval=apply(data[,3:ncol(data)],2,function(x) {bartlett.test(x, data$Group)$p.value}))
homo$pval <- p.adjust(homo$pval, method = "fdr")
homo <- data.frame(pval=apply(data[,3:ncol(data)],2,function(x) {bartlett.test(x, data$Group)$p.value}))
homo$pval <- p.adjust(homo$pval, method = "fdr")
View(homo)
plot(data$Xanthosine)
summary(data$Xanthosine)
plot(density(data$Xanthosine))
View(normality)
food.ols <- lm(. ~ Group, data = data)
View(data)
food.ols <- lm(. ~ Group, data = data[,2:ncol(data)])
food.ols <- lm(. ~ Group, data = as.matrix(data[,2:ncol(data)]))
food.ols <- lm(Group ~ ., data = data[,2:ncol(data)])
food.ols <- lm(as.factor(Group) ~ ., data = data[,2:ncol(data)])
food.ols
summary(food.ols)
food.ols <- lm(Group ~ ., data = data[,2:ncol(data)])
food.ols <- glm(Group ~ ., data = data[,2:ncol(data)])
food.ols <- glm(Group ~ ., data = data[,2:ncol(data)], family = "binomial")
food.ols <- glm(. ~ Group, data = data[,2:ncol(data)])
View(data)
model <- glm(Group ~.,family=binomial(link='logit'),data=data[,2:ncol(data)])
model <- glm(as.factor(Group) ~.,family=binomial(link='logit'),data=data[,2:ncol(data)])
model <- glm(as.numeric(as.factor(Group)) ~.,family=binomial(link='logit'),data=data[,2:ncol(data)])
model <- glm(as.numeric(as.factor(Group)) ~.,data=data[,2:ncol(data)])
model
summary(model)
library(ggplot2)
data$resi <- model$residuals
ggplot(data = data, aes(y = resi, x = Histidine)) + geom_point(col = 'blue') + geom_abline(slope = 0)
ggplot(data = data, aes(y = resi, x = Acetylcholine)) + geom_point(col = 'blue') + geom_abline(slope = 0)
ggplot(data = data, aes(y = resi, x = Xanthosine)) + geom_point(col = 'blue') + geom_abline(slope = 0)
ggplot(data = data, aes(y = resi, x = Orotate)) + geom_point(col = 'blue') + geom_abline(slope = 0)
ggplot(data = data, aes(y = resi, x = Xanthurenate)) + geom_point(col = 'blue') + geom_abline(slope = 0)
ggplot(data = data, aes(y = resi, x = log2(Xanthosine))) + geom_point(col = 'blue') + geom_abline(slope = 0)
ggplotly(ggplot(data2, aes(value, fill = variable, colour = variable)) +
geom_density() +
theme_minimal() +
labs(title = "Density plot for all Variables", x = "Concentration"))
ggplotly(ggplot(data2, aes(log2(value), fill = variable, colour = variable)) +
geom_density() +
theme_minimal() +
labs(title = "Density plot for all Variables", x = "log2(Concentration)"))
ggplotly(ggplot(data2, aes(log2(value), fill = variable, colour = variable)) +
geom_density() +
theme_minimal() +
labs(title = "Density plot for all Variables", x = "log2(Concentration)"))
ggplotly(ggplot(data2, aes(log2(value), fill = variable, colour = variable)) +
geom_density(aplha = 0.5) +
theme_minimal() +
labs(title = "Density plot for all Variables", x = "log2(Concentration)"))
ggplotly(ggplot(data2, aes(log2(value), fill = variable, colour = variable, aplha = 0.5)) +
geom_density() +
theme_minimal() +
labs(title = "Density plot for all Variables", x = "log2(Concentration)"))
ggplotly(ggplot(data2, aes(log2(value), fill = variable, colour = variable, alpha = 0.5)) +
geom_density() +
theme_minimal() +
labs(title = "Density plot for all Variables", x = "log2(Concentration)"))
ggplotly(ggplot(data2, aes(log2(value), fill = variable, colour = variable, alpha = 0.7)) +
geom_density() +
theme_minimal() +
labs(title = "Density plot for all Variables", x = "log2(Concentration)"))
ggplotly(ggplot(data2, aes(log2(value), fill = variable, colour = variable, alpha = 0.9)) +
geom_density() +
theme_minimal() +
labs(title = "Density plot for all Variables", x = "log2(Concentration)"))
ggplotly(ggplot(data2, aes(log2(value), fill = variable, colour = variable, alpha = 0.1)) +
geom_density() +
theme_minimal() +
labs(title = "Density plot for all Variables", x = "log2(Concentration)"))
X <- as.matrix(data[,3:ncol(data)])
Y <- as.factor(data$Group)
pca.res2<-mixOmics::pca(X, ncomp = 3, center = T, scale = T)
PCi<-data.frame(pca.res2$x,Groups=Y)
ggplotly(ggplot(PCi,aes(x=PC1,y=PC2, colour = Groups))+
geom_point(size=3,alpha=0.5) +
#scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D","blue","darkgoldenrod2","gray9")) +
theme_minimal())
ggplotly(ggplot(PCi,aes(x=PC1,y=PC2, colour = Groups))+
geom_point(size=3,alpha=0.5, shape=Groups) +
#scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D","blue","darkgoldenrod2","gray9")) +
theme_minimal())
ggplotly(ggplot(PCi,aes(x=PC1,y=PC2, colour = Groups))+
geom_point(size=3,alpha=0.5, aes(shape = Groups)) +
#scale_color_manual(values = c("#FF1BB3","#A7FF5B","#99554D","blue","darkgoldenrod2","gray9")) +
theme_minimal())
plot(density(data$Xanthurenate))
data <- read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
model <- glm(as.numeric(as.factor(Group)) ~., data=data[,2:ncol(data)])
data$residuals <- model$residuals
data <- read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data)[1:2] <- c("ID", "Group")
model <- glm(as.numeric(as.factor(Group)) ~., data=data[,2:ncol(data)])
data$residuals <- model$residuals
ggplot(data = data, aes(y = resi, x = log2(Xanthosine))) + geom_point(col = 'blue') + geom_abline(slope = 0)
data2 <- melt(data)
data2 <- melt(data[,2:ncol(data)])
?melt
melt
melt()
ggplot(data = data, aes(y = residuals, x = log2(Xanthosine))) + geom_point(col = 'blue') + geom_abline(slope = 0)
data2 <- melt(data[,2:ncol(data)])
data2 <- melt(data[,2:ncol(data)-1])
model$residuals
data2 <- melt(data[,c(2,ncol(data))])
View(data2)
data3 <- melt(data[,c(2:ncol(data)-1)])
percent.norm <- round((length(normality[normality$pval > 0.05,])/nrow(normality))*100,3)
length(normality[normality$pval > 0.05,])
runApp()
sapply(data, function(x) sum(is.na(x)))
data$Methylhistamine[5]<-NA
nas<-sapply(data, function(x) sum(is.na(x)))
nas[nas != 0]
nas[nas != 0][1]
data.frame(nas[nas != 0])
data.frame(number=nas[nas != 0])
nas<-sapply(data, function(x) sum(is.na(x)))
nas<-data.frame(number=nas[nas != 0])
nas
View(nas)
rownames(nas)
paste0(rownames(nas)," (",nas$number,")")
length(homo[homo$pval > 0.05,])
length(normality[normality$pval > 0.05,])
homo[homo$pval > 0.05,]
runApp()
runApp()
length(normality[normality$pval > 0.05,])
normality <- data.frame(pval=apply(data[,3:ncol(data)],2,function(x) {shapiro.test(x)$p.value}))
normality$pval <- p.adjust(normality$pval, method = "fdr")
percent.norm <- round((length(normality[normality$pval > 0.05,])/nrow(normality))*100,3)
normality$names <- rownames(normality)
names.normality <- normality[normality$pval > 0.05,2]
names.normality
runApp()
ggplotly(ggplot(data2, aes(log2(value), fill = variable, colour = variable)) +
geom_density( alpha = 0.5) +
theme_minimal() +
labs(title = "Density plot for all Variables", x = "log2(Concentration)"))
ggplotly(ggplot(data2, aes(log2(value), fill = variable, colour = variable)) +
geom_density( alpha = 0.5) +
theme_minimal() +
labs(title = "Density plot for all Variables", x = "log2(Concentration)"))
ggplotly(ggplot(data2, aes(log2(value), fill = variable, colour = variable)) +
geom_density( alpha = 0.5) +
theme_minimal() +
labs(title = "Density plot for all Variables", x = "log2(Concentration)"))
data <- read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
data2 <- melt(as.data.frame(data[,2:ncol(data)]))
ggplotly(ggplot(data2, aes(log2(value), fill = variable, colour = variable)) +
geom_density( alpha = 0.5) +
theme_minimal() +
labs(title = "Density plot for all Variables", x = "log2(Concentration)"))
View(data)
table(data$Groups)
data <- read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
#data <- read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data)[1:2] <- c("ID", "Group")
counts <- data.frame(counts = table(data$Groups))
View(counts)
counts <- data.frame(table(data$Groups))
counts <- as.data.frame(table(data$Groups))
counts <- table(data$Groups)
counts <- table(data$Groups)[1]
counts
table(data$Groups)
counts <- data.frame(counts = table(data$Group))
View(counts)
counts <- data.frame(table(data$Group))
View(counts)
counts%>%
plot_ly(x=~Group, y= ~Freq, color= ~Group, legendgroup=~Group, type = "bar") %>%
layout(title = "Counts by Group", y = "Counts", x = "Group")
counts%>%
plot_ly(x=~Var1, y= ~Freq, color= ~Var1, legendgroup=~Var1, type = "bar") %>%
layout(title = "Counts by Group", y = "Counts", x = "Group")
counts%>%
plot_ly(x=~Var1, y= ~Freq, color= ~Var1, legendgroup=~Var1, type = "bar") %>%
layout(title = "Counts by Group", y = "Counts", x = "Group")
data <- read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
#data <- read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data)[1:2] <- c("ID", "Group")
counts <- data.frame(table(data$Group))
colnames(counts) <- c("Group", "Counts")
counts%>%
plot_ly(x=~Var1, y= ~Freq, color= ~Var1, legendgroup=~Var1, type = "bar") %>%
layout(title = "Counts by Group", y = "Counts", x = "Group")
counts%>%
plot_ly(x=~Group, y= ~Counts, color= ~Group, legendgroup=~Group, type = "bar") %>%
layout(title = "Counts by Group", y = "Counts", x = "Group")
X <- as.matrix(data[,3:ncol(data)])
Y <- as.factor(data$Group)
pca.res2<-mixOmics::pca(X, ncomp = 3, center = T, scale = T)
PCi<-data.frame(pca.res2$x,Groups=Y)
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups)
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter')
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter', size = 3)
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter', size = 2)
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter', size = 1.5)
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter', size = 1)
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter')
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter', marker = list(size = 10))
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter', marker = list(size = 12))
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter', marker = list(size = 12, alpha = 0.5))
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter', marker = list(size = 12, opacity = 0.5))
plot_ly(data = PCi, x = ~PC1, y = ~PC2, color = ~Groups, symbol = ~Groups, type = 'scatter', marker = list(size = 12, opacity = 0.7))
nrow(names.normality)
normality <- data.frame(pval=apply(data[,3:ncol(data)],2,function(x) {shapiro.test(x)$p.value}))
normality$pval <- p.adjust(normality$pval, method = "fdr")
percent.norm <- round((length(normality[normality$pval > 0.05,])/nrow(normality))*100,3)
normality$names <- rownames(normality)
names.normality <- normality[normality$pval > 0.05,2]
##
homo <- data.frame(pval=apply(data[,3:ncol(data)],2,function(x) {bartlett.test(x, data$Group)$p.value}))
homo$pval <- p.adjust(homo$pval, method = "fdr")
percent.homo <- round((length(homo[homo$pval > 0.05,])/nrow(homo))*100,3)
homo$names <- rownames(homo)
names.homo <- homo[homo$pval > 0.05,2]
nrow(names.normality)
nrow(normality)
length(normality[normality$pval > 0.05,])
View(normality)
nrow(normality[normality$pval > 0.05,])
runApp()
counts%>%
plot_ly(x=~Group, y= ~Counts, color= ~Group, legendgroup=~Group, type = "bar", opacity = 0.7) %>%
layout(title = "Counts by Group", y = "Counts", x = "Group")
runApp()
View(nas)
nas$names <- rownames(nas)
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", y = "Missing Values", x = "Metabolite")
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", y = "Missing Values", x = "")
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", yaxis = "Missing Values", xaxis = "")
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", yaxis = "Missing Values", xaxis = "")
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", yaxis = "Missing Values", xaxis = "")
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite")
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", yaxis = "Missing Values", xaxis = "s")
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", yaxis = list(title = "Missing Values"))
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", yaxis = list(title = "Missing Values"), xaxis = list(title = ""))
if (nrow(nas) >= 1){
nas%>%
plot_ly(x=~names, y= ~number, color= ~names, legendgroup=~names, type = "bar", opacity = 0.7) %>%
layout(title = "Missing values by Metabolite", yaxis = list(title = "Missing Values"), xaxis = list(title = ""))
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data <- read_csv("/home/pol/Escritorio/metabolites_MaPLE.csv")
zeros <- x[, !which(colSums(x) != 0)]
zeros <- data[, !which(colSums(data) != 0)]
samples_group <- data[,1:2]
View(samples_group)
data <- data[,c(-1,-2)]
zeros <- data[, !which(colSums(data) != 0)]
View(data)
data <- data[, which(colSums(data) != 0)]
View(data)
normality <- data.frame(pval=apply(data[,3:ncol(data)],2,function(x) {shapiro.test(x)$p.value}))
normality$pval <- p.adjust(normality$pval, method = "fdr")
percent.norm <- round((length(normality[normality$pval > 0.05,])/nrow(normality))*100,3)
normality$names <- rownames(normality)
names.normality <- normality[normality$pval > 0.05,2]
data <- read_csv("/home/pol/Escritorio/metabolites_MaPLE.csv")
#data <- read_csv("/home/pol/Escritorio/POMA/ST000284/MET_CRC_ST000284.csv")
colnames(data)[1:2] <- c("ID", "Group")
samples_group <- data[,1:2]
data <- data[,c(-1,-2)]
zeros <- data[, -which(colSums(data) != 0)]
data <- data[, which(colSums(data) != 0)]
View(zeros)
data <- cbind(samples_group, data)
View(data)
runApp()
runApp()
data <- read_csv("/home/pol/Escritorio/metabolites_MaPLE.csv")
plot(data$iVA,data$3-`3-HBAld`)
plot(data$iVA,data$`3-HBAld`)
plot(data$iVA,data$`3,4-DHBAld`)
plot(data$`3-HBAld`,data$`3,4-DHBAld`)
runApp()
t.test(HA~Group, data = data)
View(data)
t.test(HA~Sex, data = data)
t.test(HA~Sex, data = data, alternative=c("two.sided"))
runApp()
