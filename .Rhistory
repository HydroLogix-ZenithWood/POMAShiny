class2))
ggplot(rp_plot, aes(x = rank2, y = pfp2)) + geom_point(size = 1.5,
alpha = 0.8) + theme_bw() + xlab("Number of identified features") +
ylab("Estimated PFP") + ggtitle(paste0("Identification of Down-regulated features under class ",
class2))
devtools::install_github("pcastellanoescuder/POMA")
shiny::runApp()
?PomaLasso
?POMA::PomaLasso
POMA::PomaLasso
shiny::runApp()
runApp()
runApp()
st000336 %>% PomaImpute() %>% PomaLasso(ntest = 20)
lala <- st000336 %>% PomaImpute() %>% PomaLasso(ntest = 20)
lala$confusionMatrix$table
lala$confusionMatrix
lala$confusionMatrix$positive
lala$confusionMatrix$dots
lala$confusionMatrix
lala$confusionMatrix$overall
lala$confusionMatrix$byClass
lala$confusionMatrix$mode
rbind(lala$confusionMatrix$overall, lala$confusionMatrix$byClass)
cbind(lala$confusionMatrix$overall, lala$confusionMatrix$byClass)
lala$confusionMatrix$byClass %>% as_tibble()
lala$confusionMatrix$byClass %>% as_data_frame()
lala$confusionMatrix$byClass %>% as.data.frame()
lala$confusionMatrix$byClass %>% as.data.frame() %>% rownames_to_column("metric")
lala$confusionMatrix$byClass %>% as.data.frame() %>% rownames_to_column("metric") %>% dplyr::rename(value = 2)
lala$confusionMatrix$overall %>% as.data.frame() %>% rownames_to_column("metric") %>% dplyr::rename(value = 2)
runApp()
runApp()
runApp()
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
?includeScript
runApp('app')
runApp('app')
runApp()
runApp('app')
runApp('app')
library(POMA)
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
usethis::use_code_of_conduct()
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
library(ggplot2)
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
?plotly::ggplotly
runApp('app')
?toImageButtonOptions
plotly::config()
?plotly::config()
library(plotly)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
poma_download <- list(
name = "poma_dwn",
icon = "camera",
click = htmlwidgets::JS(
"function(el, x) {
var gd = document.getElementById(el.id);
Plotly.downloadImage(gd, {format: 'png', width: 1200, height: 1600, filename: 'plot'});
}"
)
)
runApp('app')
runApp('app')
shiny::runApp()
runApp()
?source
runApp()
runApp()
runApp()
runApp()
source("R/server-univariate.R",local = FALSE)
source("R/server-univariate.R")
runApp()
runApp()
?PomaNorm
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('app')
shiny::runApp(appDir = "app")
devtools::install_github("pcastellanoescuder/POMA")
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
library(POMA)
POMA::PomaBoxplots(st000336)
shiny::runApp('app')
PO
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
rmarkdown::pandoc_version()
packageVersion("rmarkdown")
pandoc2.0()
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
data("diamonds")
diamonds %>% select_if(is.integer)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
?PomaUnivariate
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
Poma::PomaClust(st000284)
POMA::PomaClust(st000284)
POMA::PomaClust(st000284, show_clusters = FALSE)
POMA::PomaLasso(alpha = c(0.1,0.9))
st000336 %>% PomaImpute() %>% POMA::PomaLasso(alpha = c(0.1,0.9))
warnings()
PomaCorr(st000284)
PomaCorr(st000284, corr_type = "glasso")
aaa <- Ã§PomaCorr(st000284, corr_type = "glasso")
aaa <- PomaCorr(st000282 )
aaa <- PomaCorr(st000284)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
PomaMultivariate
runApp('app')
runApp('app')
PomaMultivariate()
?PomaMultivariate()
mixOmics::plsda
?mixOmics::plsda
PomaMultivariate
?mixOmics::perf
runApp('app')
mixOmics::splsda()
?mixOmics::splsda()
PomaMultivariate
?mixOmics::tune.splsda
?mixOmics::splsda
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
devtools::install_github("pcastellanoescuder/POMA")
install.packages("devtools")
devtools::install_github("pcastellanoescuder/POMA")
# for shiny
library(bs4Dash)
library(shiny)
library(DT)
library(plotly)
library(shinyhelper)
library(rmarkdown)
library(tidyverse)
library(shinyWidgets)
library(patchwork)
library(ggraph)
library(Biobase)
library(fresh)
# for EDA report
library(reshape2)
library(knitr)
runApp('app')
devtools::install_github("pcastellanoescuder/POMA")
install.packages("shape")
devtools::install_github("pcastellanoescuder/POMA")
devtools::install_github("pcastellanoescuder/POMA")
devtools::install_github("pcastellanoescuder/POMA")
devtools::install_github("pcastellanoescuder/POMA")
devtools::install_github("pcastellanoescuder/POMA")
devtools::install_github("pcastellanoescuder/POMA")
install.pack
/Library/Frameworks/R.framework/()
devtools::install_github("pcastellanoescuder/POMA")
devtools::install_github("pcastellanoescuder/POMA")
install.packages("shape")
# CRAN packages
installifnot <- function(pckgName){
if (!(require(pckgName, character.only = TRUE))) {
install.packages(pckgName, dep = TRUE)
require(pckgName, character.only = TRUE)
}
}
pk1 <- c('shiny', 'DT', 'bs4Dash', 'reshape2', 'plotly', 'fresh', 'shinyhelper', 'ggraph', 'rmarkdown',
'shinyWidgets', 'tidyverse', 'knitr', 'patchwork', 'BiocManager')
for (i in 1:length(pk1)){
installifnot(pk1[i])
};BiocManager::install("Biobase")
# for shiny
library(bs4Dash)
library(shiny)
library(DT)
library(plotly)
library(shinyhelper)
library(rmarkdown)
library(tidyverse)
library(shinyWidgets)
library(patchwork)
library(ggraph)
library(Biobase)
library(fresh)
# for EDA report
library(reshape2)
library(knitr)
library(POMA)
devtools::install_github("pcastellanoescuder/POMA")
runApp('app')
runApp('app')
runApp()
shiny::runApp('app')
runApp('app')
?ComplexHeatmap::Heatmap
POMA:PomaDensity()
runApp('app')
POMA::PomaDensity(st000284)
POMA::PomaDensity(st000284, group = "features")
st000284 %>% PomaNorm() %>% POMA::PomaDensity(group = "features")
st000284 %>% PomaNorm() %>% POMA::PomaDensity(group = "features") %>% ggplotly()
runApp('app')
st000336 %>% PomaImpute() %>% PomaNorm() %>% PomaLasso(alpha = 0.0001)
?PomaRandForest
runApp('app')
runApp('app')
?PomaLasso
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
POMA::PomaClust(st0)
library(POMA)
POMA::PomaClust(st000284)
shiny::runApp('app')
runApp('app')
?PomaClust
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
remotes::install_github("federicomarini/GeneTonic",
dependencies = TRUE, build_vignettes = FALSE)
shiny::runApp('app')
runApp('app')
runApp('app')
?a
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
packageVersion("POMA")
target <- data.frame(id = c(1:10), grp = iris$Species[1:5,51:55])
target <- data.frame(id = c(1:10), grp = iris$Species[c(1:5,51:55)])
targer
targer
targe
target
features <- iris[c(1:5,51:55), 1:4]
features$Sepal.Length[c(1:8)] <- 0
features$Sepal.Width[c(1:8)] <- NA
features
write.csv(target, "/Users/pol/Desktop/target.csv", row.names = FALSE)
write.csv(features, "/Users/pol/Desktop/features.csv", row.names = FALSE)
shiny::runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
library(POMA)
save(st000284, file = "/Users/pol/Desktop/st000284.rda")
library(bs4Dash)
library(shiny)
library(DT)
library(plotly)
library(shinyhelper)
library(rmarkdown)
library(tidyverse)
library(shinyWidgets)
library(patchwork)
library(POMA)
library(ggraph)
library(Biobase)
library(fresh)
runApp('app')
runApp('app')
runApp('app')
Biobase::pData(st000284) %>%
rownames_to_column("ID") %>%
dplyr::rename(ID = 1, Group = 2)
load("/Users/pol/Desktop/.DS_Store")
load("/Users/pol/Desktop/st000284.rda")
data <- load("/Users/pol/Desktop/st000284.rda")
data
LoadToEnvironment <- function(RData, env = new.env()) {
load(RData, env)
return(env)
}
LoadToEnvironment("/Users/pol/Desktop/st000284.rda")
data <- LoadToEnvironment("/Users/pol/Desktop/st000284.rda")
data
runApp('app')
runApp('app')
runApp('app')
load("/var/folders/kd/x9tbfxb10jg6c10t0l7hw_b40000gn/T//RtmplzM8pN/485a1bb4e23e495856f24229/0.rda")
load("/var/folders/kd/x9tbfxb10jg6c10t0l7hw_b40000gn/T//RtmplzM8pN/485a1bb4e23e495856f24229/0.rda")
runApp('app')
runApp('app')
runApp('app')
runApp()
runApp()
runApp('app')
?prettySwitch
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp()
shiny::runApp("app/")
shiny::runApp("app/")
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
target <- readr::read_csv("/Users/pol/Desktop/maple_tomas/target.csv")
target2 <- target %>% mutate(cov1 = c(rep("C", 102), rep("D", 102)), cov2 = c(rep("S", 40), rep("Y", 60), rep("U", 4)), cov3 = rnorm(204, mean = 25, sd = 5))
target2 <- target %>% mutate(cov1 = c(rep("C", 102), rep("D", 102)), cov2 = c(rep("S", 140), rep("Y", 60), rep("U", 4)), cov3 = rnorm(204, mean = 25, sd = 5))
View(target2)
summary(target2)
write_csv(target2, "/Users/pol/Desktop/maple_tomas/target_cov_ok.csv")
target2[5,5] <- NA
write_csv(target2, "/Users/pol/Desktop/maple_tomas/target_cov_NA.csv")
runApp('app')
runApp('app')
packageVersion(POMA)
packageVersion("POMA")
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
?POMA::PomaLasso
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
library(POMA)
mm <- POa
mm <- PomaMultivariate(st000284, method = "plsda")
mm$errors_plsda
mm %>%
pivot_wider(names_from = name, values_from = value) %>%
column_to_rownames("Component") %>%
select_at(vars(starts_with("overall")))
mm$errors_plsda %>%
pivot_wider(names_from = name, values_from = value) %>%
column_to_rownames("Component") %>%
select_at(vars(starts_with("overall")))
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
