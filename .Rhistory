Species = formatter("span", style = x ~ ifelse(x == "setosa",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(Petal.Length, Petal.Width)) ~ normalize_bar("pink", 0.2)
))
formattable(iris, list(
area(col = c(Petal.Length, Petal.Width)) ~ normalize_bar("pink", 0.2)
))
iris
formattable(iris, list(
area(col = c(Petal.Length, Petal.Width)) ~ normalize_bar("pink")
))
formattable(iris, list(
area(col = c(Petal.Length, Petal.Width)) ~ normalize_bar("pink", 1,0)
))
runApp()
p <- data.frame(
id = c(1, 2, 3, 4, 5),
name = c("A1", "A2", "B1", "B2", "C1"),
balance = accounting(c(52500, 36150, 25000, 18300, 7600), format = "d"),
growth = percent(c(0.3, 0.3, 0.1, 0.15, 0.15), format = "d"),
ready = formattable(c(TRUE, TRUE, FALSE, FALSE, TRUE), "yes", "no"))
p
runApp()
formattable(iris, list(area(col = c(Sepal.Length, Sepal.Width)) ~ normalize_bar("pink")))
pol<-formattable(iris, list(area(col = c(Sepal.Length, Sepal.Width)) ~ normalize_bar("pink")))
pol
runApp()
runApp()
runApp()
runApp()
install.packages('shinyFiles')
?shinyFilesButton
?shinyFiles::shinyFilesButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?RankProducts
data(golub)
#use a subset of data as example, apply the rank
#product method
subset <- c(1:4,28:30)
#Setting rand=123, to make the results reproducible,
RP.out <- RankProducts(golub[,subset],golub.cl[subset],rand=123)
# class 2: label =1, class 1: label = 0
#pfp for identifying genes that are up-regulated in class 2
#pfp for identifying genes that are down-regulated in class 2
head(RP.out$pfp)
#Rank Sum
RS.out <-RankProducts(golub[,subset],golub.cl[subset],rand=123,
calculateProduct=FALSE)
head(RS.out$pfp)
data(golub)
#use a subset of data as example, apply the rank
#product method
subset <- c(1:4,28:30)
#Setting rand=123, to make the results reproducible,
RP.out <- RankProducts(golub[,subset],golub.cl[subset],rand=123)
# class 2: label =1, class 1: label = 0
#pfp for identifying genes that are up-regulated in class 2
#pfp for identifying genes that are down-regulated in class 2
head(RP.out$pfp)
#Rank Sum
RS.out <-RankProducts(golub[,subset],golub.cl[subset],rand=2,
calculateProduct=FALSE)
head(RS.out$pfp)
data(golub)
#use a subset of data as example, apply the rank
#product method
subset <- c(1:4,28:30)
#Setting rand=123, to make the results reproducible,
RP.out <- RankProducts(golub[,subset],golub.cl[subset],rand=123)
# class 2: label =1, class 1: label = 0
#pfp for identifying genes that are up-regulated in class 2
#pfp for identifying genes that are down-regulated in class 2
head(RP.out$pfp)
#Rank Sum
RS.out <-RankProducts(golub[,subset],golub.cl[subset],rand=2,RandomPairs=1,
calculateProduct=FALSE)
head(RS.out$pfp)
data(golub)
#use a subset of data as example, apply the rank
#product method
subset <- c(1:4,28:30)
#Setting rand=123, to make the results reproducible,
RP.out <- RankProducts(golub[,subset],golub.cl[subset],rand=123)
# class 2: label =1, class 1: label = 0
#pfp for identifying genes that are up-regulated in class 2
#pfp for identifying genes that are down-regulated in class 2
head(RP.out$pfp)
#Rank Sum
RS.out <-RankProducts(golub[,subset],golub.cl[subset],rand=2,RandomPairs=3,
calculateProduct=FALSE)
head(RS.out$pfp)
data(golub)
#use a subset of data as example, apply the rank
#product method
subset <- c(1:4,28:30)
#Setting rand=123, to make the results reproducible,
RP.out <- RankProducts(golub[,subset],golub.cl[subset],rand=123)
# class 2: label =1, class 1: label = 0
#pfp for identifying genes that are up-regulated in class 2
#pfp for identifying genes that are down-regulated in class 2
head(RP.out$pfp)
#Rank Sum
RS.out <-RankProducts(golub[,subset],golub.cl[subset],rand=2,RandomPairs=2,
calculateProduct=FALSE)
head(RS.out$pfp)
data(golub)
#use a subset of data as example, apply the rank
#product method
subset <- c(1:4,28:30)
#Setting rand=123, to make the results reproducible,
RP.out <- RankProducts(golub[,subset],golub.cl[subset],rand=123)
# class 2: label =1, class 1: label = 0
#pfp for identifying genes that are up-regulated in class 2
#pfp for identifying genes that are down-regulated in class 2
head(RP.out$pfp)
#Rank Sum
RS.out <-RankProducts(golub[,subset],golub.cl[subset],rand=2,RandomPairs=1,
calculateProduct=FALSE)
head(RS.out$pfp)
runApp()
runApp()
runApp()
?withProgress
runApp()
runApp()
runApp()
runApp()
?bsCollapse
?bsCollapsePanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
library(ggbiplot)
data(wine)
wine.pca <- prcomp(wine, scale. = TRUE)
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot::ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot::ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE)
ggbiplot::ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = F, circle = F)
wine.pca<-mixOmics::pca(wine, ncomp = 4, center = F, scale = F)
ggbiplot::ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = F, circle = F)
biplot(wine)
biplot(wine.pca)
wine.pca <- prcomp(wine, scale. = TRUE)
biplot(wine.pca)
wine.pca <- prcomp(wine, scale. = TRUE)
wine.pca
wine.pca2<-mixOmics::pca(wine, ncomp = 4, center = F, scale = F)
wine.pca2
?prcomp
wine.pca<-mixOmics::pca(wine, ncomp = 4, center = F, scale = F)
ggbiplot(wine.pca)
wine.pca <- mixOmics::pca(wine, ncomp = 4, center = F, scale = F)
ggbiplot(wine.pca)
install.packages("devtools")
library(devtools)
install_github("cashoes/ggmixOmics")
ggmixOmics::ggbiplot(wine.pca)
wine.pca <- mixOmics::pca(wine, ncomp = 4, center = F, scale = F)
ggbiplot::ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = F, circle = F)
wine.pca <- prcomp(wine, scale. = TRUE)
ggbiplot::ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = F, circle = F)
ggmixOmics::ggbiplot(wine.pca)
wine.pca2 <- mixOmics::pca(wine, ncomp = 4, center = F, scale = F)
ggmixOmics::ggbiplot(wine.pca2)
biplot(wine.pca)
biplot
biplot()
library(ggfortify)
autoplot(
wine.pca, label = T, shape = FALSE,
loadings = TRUE, loadings.label = TRUE,
label.size = 3.5, label.repel = TRUE)
autoplot(
wine.pca, label = T, shape = FALSE,
loadings = TRUE, loadings.label = TRUE,
label.size = 3.5, label.repel = F)
autoplot(
wine.pca2, label = T, shape = FALSE,
loadings = TRUE, loadings.label = TRUE,
label.size = 3.5, label.repel = F)
pca.res2 <- mixOmics::pca(wine, ncomp = 4, center = F, scale = F)
PCi<-data.frame(pca.res2$x,Groups=Y)
PCi<-data.frame(pca.res2$x)
autoplot(
PCi, label = T, shape = FALSE,
loadings = TRUE, loadings.label = TRUE,
label.size = 3.5, label.repel = F)
ggbiplot::ggbiplot(PCi, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = F, circle = F)
pca.res2 <- mixOmics::pca(wine, ncomp = 4, center = F, scale = F)
autoplot(
pca.res2, label = T, shape = FALSE,
loadings = TRUE, loadings.label = TRUE,
label.size = 3.5, label.repel = F)
pca.res2, label = T, shape = FALSE,
loadings = TRUE, loadings.label = TRUE,
label.size = 3.5, label.repel = F) + theme_minimal()
autoplot(
pca.res2, label = T, shape = FALSE,
loadings = TRUE, loadings.label = TRUE,
label.size = 3.5, label.repel = F)
+ theme_minimal()
ggmixOmics::ggbiplot(pca.res2)
ggbiplot::ggbiplot(pca.res2, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = F, circle = F)
ggbiplot::ggbiplot(pca.res2, obs.scale = 1, var.scale = 1,scale=1,
groups = wine.class, ellipse = F, circle = F)
wine.pca <- prcomp(wine, scale. = TRUE)
wine.pca
pca.res2 <- mixOmics::pca(wine, ncomp = 4, center = F, scale = F)
pca.res2
pca.res2$X
pca.res2$x
wine.pca <- prcomp(wine, scale. = F,center = F)
wine.pca
pca.res2 <- mixOmics::pca(wine, ncomp = 13, center = F, scale = F)
pca.res2$x
pca.res2 <- mixOmics::pca(wine, ncomp = 13, center = T, scale = F)
ggbiplot::ggbiplot(pca.res2, obs.scale = 1, var.scale = 1,scale=1,
groups = wine.class, ellipse = F, circle = F)
pca.res2 <- mixOmics::pca(wine, ncomp = 13, center = T, scale = t)
pca.res2 <- mixOmics::pca(wine, ncomp = 13, center = T, scale = T)
ggbiplot::ggbiplot(pca.res2, obs.scale = 1, var.scale = 1,scale=1,
groups = wine.class, ellipse = F, circle = F)
?plsda
runApp()
runApp()
?ggbiplot::ggbiplot
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
?tabPanel
runApp()
?column
runApp()
runApp()
runApp()
runApp()
library(ggrepel)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
levels(iris$Species)[1]
(iris$Species)
(iris$Species)
runApp()
runApp()
shiny::runApp()
runApp()
Group <- iris$Species
paste0("Mean ", levels(Group)[1])
paste0("Mean ", levels(Group)[2])
colnames(iris)[5] <- paste0("Mean ", levels(Group)[1])
iris
runApp()
runApp()
iris<-data(iris)
iris3
iris
iris
iris22<-iris[,1:100]
iris22<-iris[1:100,]
Group <- iris22$Species
stat <- function(x){t.test(x ~ Group, na.rm=TRUE, alternative=c("two.sided"),
var.equal = eval(parse(text = input$variance)))$p.value}
stat_G2 <- function(x){t.test(x ~ Group, na.rm=TRUE, alternative=c("two.sided"),
var.equal = eval(parse(text = input$variance)))$estimate[[2]]}
stat_G1 <- function(x){t.test(x ~ Group, na.rm=TRUE, alternative=c("two.sided"),
var.equal = eval(parse(text = input$variance)))$estimate[[1]]}
p <- as.data.frame(apply(FUN=stat, MARGIN = 2, X = iris22[,1:4]))
stat <- function(x){t.test(x ~ Group, na.rm=TRUE, alternative=c("two.sided"))$p.value}
stat_G2 <- function(x){t.test(x ~ Group, na.rm=TRUE, alternative=c("two.sided"))$estimate[[2]]}
stat_G1 <- function(x){t.test(x ~ Group, na.rm=TRUE, alternative=c("two.sided"))$estimate[[1]]}
p <- as.data.frame(apply(FUN=stat, MARGIN = 2, X = iris22[,1:4]))
colnames(p) <- c("P.Value")
p$adj.P.Val <- p.adjust(p$P.Value, method = "fdr")
G2 <- as.data.frame(apply(FUN=stat_G2, MARGIN = 2, X = iris22[,1:4] ))
colnames(G2) <- paste0("Mean ", levels(Group)[2])
G1 <- as.data.frame(apply(FUN=stat_G1, MARGIN = 2, X = iris22[,1:4] ))
colnames(G1) <- paste0("Mean ", levels(Group)[1])
FC <- G2/G1
colnames(FC) <- c("FC (Ratio)")
FC <- round(as.numeric(FC$`FC (Ratio)`,4))
p <- round(cbind(G1,G2, FC, p),4)
View(p)
runApp()
View(G1)
View(G2)
p <- as.data.frame(apply(FUN=stat, MARGIN = 2, X = iris22[,1:4]))
colnames(p) <- c("P.Value")
p$adj.P.Val <- p.adjust(p$P.Value, method = "fdr")
View(p)
G2 <- as.data.frame(apply(FUN=stat_G2, MARGIN = 2, X = iris22[,1:4] ))
colnames(G2) <- paste0("Mean ", levels(Group)[2])
View(G2)
G1 <- as.data.frame(apply(FUN=stat_G1, MARGIN = 2, X = iris22[,1:4] ))
colnames(G1) <- paste0("Mean ", levels(Group)[1])
View(G1)
FC <- data.frame(G2/G1)
colnames(FC) <- c("FC (Ratio)")
View(FC)
FC <- round(as.numeric(FC$`FC (Ratio)`,4))
p <- round(cbind(G1,G2, FC, p),4)
View(p)
FC <- data.frame(G2/G1)
colnames(FC) <- c("FC (Ratio)")
p <- round(cbind(G1,G2, FC, p),4)
iris22<-iris[1:100,]
Group <- iris22$Species
stat <- function(x){t.test(x ~ Group, na.rm=TRUE, alternative=c("two.sided"))$p.value}
stat_G2 <- function(x){t.test(x ~ Group, na.rm=TRUE, alternative=c("two.sided"))$estimate[[2]]}
stat_G1 <- function(x){t.test(x ~ Group, na.rm=TRUE, alternative=c("two.sided"))$estimate[[1]]}
p <- as.data.frame(apply(FUN=stat, MARGIN = 2, X = iris22[,1:4]))
colnames(p) <- c("P.Value")
p$adj.P.Val <- p.adjust(p$P.Value, method = "fdr")
G2 <- as.data.frame(apply(FUN=stat_G2, MARGIN = 2, X = iris22[,1:4] ))
colnames(G2) <- paste0("Mean ", levels(Group)[2])
G1 <- as.data.frame(apply(FUN=stat_G1, MARGIN = 2, X = iris22[,1:4] ))
colnames(G1) <- paste0("Mean ", levels(Group)[1])
FC <- data.frame(G2/G1)
colnames(FC) <- c("FC (Ratio)")
#FC <- round(as.numeric(FC$`FC (Ratio)`,4))
p <- round(cbind(G1,G2, FC, p),4)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
labels(iris$Species)
levels(iris$Species)[2]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
to_volcano <- readr::read_csv("/home/pol/Escritorio/dts.csv")
samples_groups <- to_volcano[,1:2]
to_volcano <- to_volcano[,c(3:ncol(to_volcano))]
to_volcano <- to_volcano[,apply(to_volcano,2,function(x) !all(x==0))]
to_volcano <- round(to_volcano,3)
to_volcano <-cbind(samples_groups,to_volcano)
Group2 <- to_volcano[,2]
to_volcanostat <- function(x){t.test(x ~ Group2, na.rm=TRUE, alternative=c("two.sided"),
var.equal = eval(parse(text = input$variance)))$p.value}
to_volcanostat_G2 <- function(x){t.test(x ~ Group2, na.rm=TRUE, alternative=c("two.sided"),
var.equal = eval(parse(text = input$variance)))$estimate[[2]]}
to_volcanostat_G1 <- function(x){t.test(x ~ Group2, na.rm=TRUE, alternative=c("two.sided"),
var.equal = eval(parse(text = input$variance)))$estimate[[1]]}
to_volcano <- as.data.frame(apply(FUN=to_volcanostat, MARGIN = 2, X = to_volcano[,c(3:ncol(to_volcano))] ))
to_volcanostat <- function(x){t.test(x ~ Group2, na.rm=TRUE, alternative=c("two.sided"))$p.value}
to_volcanostat_G2 <- function(x){t.test(x ~ Group2, na.rm=TRUE, alternative=c("two.sided"))$estimate[[2]]}
to_volcanostat_G1 <- function(x){t.test(x ~ Group2, na.rm=TRUE, alternative=c("two.sided"))$estimate[[1]]}
to_volcano <- as.data.frame(apply(FUN=to_volcanostat, MARGIN = 2, X = to_volcano[,c(3:ncol(to_volcano))] ))
colnames(to_volcano) <- c("P.Value")
to_volcano$adj.P.Val <- p.adjust(to_volcano$P.Value, method = "fdr")
to_volcanoG2 <- as.data.frame(apply(FUN=to_volcanostat_G2, MARGIN = 2, X = to_volcano[,c(3:ncol(to_volcano))] ))
to_volcanoG2 <- as.data.frame(apply(FUN=to_volcanostat_G2, MARGIN = 2, X = to_volcano[,c(3:ncol(to_volcano))] ))
to_volcano <- as.data.frame(apply(FUN=to_volcanostat, MARGIN = 2, X = to_volcano[, c(3:ncol(to_volcano))] ))
to_volcano <- as.data.frame(apply(FUN=to_volcanostat, MARGIN = 2, X = to_volcano[c(3:ncol(to_volcano)),] ))
to_volcano <- as.data.frame(apply(FUN=to_volcanostat, MARGIN = 2, X = to_volcano[,c(3:ncol(to_volcano))]))
to_volcanoG2 <- as.data.frame(apply(FUN=to_volcanostat_G2, MARGIN = 2, X = to_volcano[,c(3:ncol(to_volcano))] ))
colnames(to_volcanoG2) <- c("Mean G2")
to_volcanoG1 <- as.data.frame(apply(FUN=to_volcanostat_G1, MARGIN = 2, X = to_volcano[,c(3:ncol(to_volcano))] ))
colnames(to_volcanoG1) <- c("Mean G1")
to_volcanoFC <- data.frame(to_volcanoG2/to_volcanoG1)
colnames(to_volcanoFC) <- c("FC")
to_volcano <- as.data.frame(apply(FUN=to_volcanostat, MARGIN = 2, X = to_volcano[,c(3:ncol(to_volcano))]))
to_volcano <- readr::read_csv("/home/pol/Escritorio/dts.csv")
samples_groups <- to_volcano[,1:2]
to_volcano1 <- to_volcano[,c(3:ncol(to_volcano))]
to_volcano <- to_volcano1[,apply(to_volcano1,2,function(x) !all(x==0))]
to_volcano1 <- round(to_volcano1,3)
to_volcano <-cbind(samples_groups,to_volcano1)
Group2 <- to_volcano[,2]
to_volcanostat <- function(x){t.test(x ~ Group2, na.rm=TRUE, alternative=c("two.sided"))$p.value}
to_volcanostat_G2 <- function(x){t.test(x ~ Group2, na.rm=TRUE, alternative=c("two.sided"))$estimate[[2]]}
to_volcanostat_G1 <- function(x){t.test(x ~ Group2, na.rm=TRUE, alternative=c("two.sided"))$estimate[[1]]}
to_volcano <- as.data.frame(apply(FUN=to_volcanostat, MARGIN = 2, X = to_volcano1))
colnames(to_volcano) <- c("P.Value")
to_volcano$adj.P.Val <- p.adjust(to_volcano$P.Value, method = "fdr")
to_volcanoG2 <- as.data.frame(apply(FUN=to_volcanostat_G2, MARGIN = 2, X = to_volcano1))
colnames(to_volcanoG2) <- c("Mean G2")
to_volcanoG1 <- as.data.frame(apply(FUN=to_volcanostat_G1, MARGIN = 2, X = to_volcano1))
colnames(to_volcanoG1) <- c("Mean G1")
to_volcanoFC <- data.frame(to_volcanoG2/to_volcanoG1)
colnames(to_volcanoFC) <- c("FC")
a <- round(cbind(to_volcanoG1,to_volcanoG2, to_volcanoFC, to_volcano),4)
View(a)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
?numericInput
runApp()
?formatC
prettyNum(0.05)
prettyNum(0.000005)
runApp()
runApp()
runApp()
runApp()
formatC(0.05)
formatC(0.0005)
formatC(0.00000005)
runApp()
runApp()
runApp()
test<-readr::read_csv("/Users/pol/Dropbox/Shiny_apps/POMA/ST000284/MET_CRC_ST000284.csv")
table(test$Groups)
test<-test[1:132,]
table(test$Groups)
write.csv(test,"/Users/pol/Dropbox/Shiny_apps/POMA/ST000284/MET_CRC_ST000284.csv")
test<-readr::read_csv("/Users/pol/Dropbox/Shiny_apps/POMA/ST000284/COV_CRC_ST000284.csv")
test<-test[1:132,]
write.csv(test,"/Users/pol/Dropbox/Shiny_apps/POMA/ST000284/COV_CRC_ST000284.csv")
runApp()
runApp()
test<-readr::read_csv("/Users/pol/Dropbox/Shiny_apps/POMA/ST000284/MET_CRC_ST000284.csv")
View(test)
test$X1<-NULL
write.csv(test,"/Users/pol/Dropbox/Shiny_apps/POMA/ST000284/MET_CRC_ST000284.csv", row.names = F)
test<-readr::read_csv("/Users/pol/Dropbox/Shiny_apps/POMA/ST000284/COV_CRC_ST000284.csv")
View(test)
test$X1<-NULL
write.csv(test,"/Users/pol/Dropbox/Shiny_apps/POMA/ST000284/COV_CRC_ST000284.csv", row.names = F)
runApp()
runApp()
t.test(iris$Sepal.Length,iris$Sepal.Width,paired = T)$estimate
t.test(iris$Sepal.Length,iris$Sepal.Width,paired = T)$estimate[[1]]
t.test(iris$Sepal.Length,iris$Sepal.Width,paired = F)$estimate[[2]]-t.test(iris$Sepal.Length,iris$Sepal.Width,paired = F)$estimate[[1]]
runApp()
-0.4128	-0.4129
runApp()
runApp()
shiny::runApp()
?topTable
runApp()
runApp()
shiny::runApp()
?formatC
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
