data_subset3 <- as.data.frame(data[, colnames(data) == as.character(input$my_factor)])
data_subset3 <- as.data.frame(data[, colnames(data) == as.character(my_factor)])
data_subset <- cbind(code, data_subset1, data_subset2, data_subset3)
colnames(data_subset) <- c("ID", "Variable1", "Variable2", "Factor")
cors <- plyr::ddply(keep, c("Factor"), summarise, cor = round(cor(Variable1, Variable2, use = "complete.obs"), 2))
cors <- plyr::ddply(data_subset, c("Factor"), summarise, cor = round(cor(Variable1, Variable2, use = "complete.obs"), 2))
View(data_subset)
View(cors)
data_subset %>%
group_by(Factor) %>%
summarize(cor(Variable1, Variable2))
shiny::runApp()
runApp()
runApp()
?PomaRankProd
?PomaRankProd
PomaRankProd
RankProd::RankProducts
?RankProd::RankProducts
?RankProd::topGene
?RankProd::RankProducts
PomaRankProd
?PomaRankProd
runApp()
runApp()
colSums(function(x < 0), na.rm = TRUE)
colSums(function(x){x < 0)}, na.rm = TRUE)
test <- iris[,1:4]
apply(test, 2, function(x){sum(x < 0)})
test[1,3] <- -2
apply(test, 2, function(x){sum(x < 0)})
sum(apply(test, 2, function(x){sum(x < 0)}))
runApp()
runApp()
runApp()
?sum
runApp()
runApp()
ft <- read_csv("data/features.csv")
View(ft)
ft <- read_csv2("data/features.csv")
ft <- vroom::vroom("data/features.csv", delim = ",")
ft <- vroom::vroom("data/features.csv", delim = ",", col_names = F)
ft <- vroom::vroom("data/features.csv", delim = ",", col_names = T)
ft <- read_csv2("/Users/pol/Dropbox/BclogitLasso/data/cleanData/IQRx1_5/Bordeaux_metabolites_IQRx1_5.csv")
ft <- read_csv("/Users/pol/Dropbox/BclogitLasso/data/cleanData/IQRx1_5/Bordeaux_metabolites_IQRx1_5.csv")
ft[1,2] <- -14432
ft %>% View()
write.csv(ft, "data/test.csv", row.names = F)
runApp()
PomaRankProd
library(RankProd)
data(arab)
arab.sub <- arab[,which(arab.origin==1)]
arab.cl.sub <- arab.cl[which(arab.origin==1)]
arab.origin.sub <- arab.origin[which(arab.origin==1)]
RP.out <- RankProducts(arab.sub,arab.cl.sub, logged=TRUE, + na.rm=FALSE,plot=FALSE, rand=123)
arab.sub <- arab[,which(arab.origin==1)]
arab.cl.sub <- arab.cl[which(arab.origin==1)]
arab.origin.sub <- arab.origin[which(arab.origin==1)]
RP.out <- RankProducts(arab.sub,arab.cl.sub, logged=TRUE,  na.rm=FALSE,plot=FALSE, rand=123)
RP.out
> topGene(RP.out,cutoff=0.05,method="pfp",
logged=TRUE,logbase=2,gene.names=arab.gnames)
topGene(RP.out,cutoff=0.05,method="pfp",
logged=TRUE,logbase=2,gene.names=arab.gnames)
PomaRankProd
topGene(RP.out,cutoff=0.05,method="pfp",
logged=TRUE,logbase=2,gene.names=arab.gnames)
RP.out
RP.out$
)
PomaRankProd
topGene(RP.out,cutoff=0.05,method="pfp",
logged=TRUE,logbase=2,gene.names=arab.gnames)
RP.out$RPs
RP.out$pfp
RP.out$allrank1
RP.out$RandomPairs_ranks
RP.out$Orirank
arab
arab %>% View()
runApp()
RP.out$allrank1
PomaRankProd
RP.out$pfp
plot(RP.out$pfp[,1])
RankProd::plotRP()
RankProd::plotRP
PomaRankProd
runApp()
runApp()
st000336 %>% PomaImpute() %>% PomaRankProd()
PomaRankProd
data <- st000336 %>% PomaImpute()
Biobase::varLabels(data)[1] <- "Group"
Group <- as.factor(Biobase::pData(data)$Group)
if (length(levels(Group)) != 2) {
stop(crayon::red(clisymbols::symbol$cross, "Data must have two groups..."))
}
data_class <- as.numeric(ifelse(Group == levels(Group)[1],
0, 1))
class1 <- levels(as.factor(Group))[1]
class2 <- levels(as.factor(Group))[2]
RP <- RankProducts(Biobase::exprs(data), data_class, logged = T,
na.rm = TRUE, plot = FALSE, RandomPairs = NA, rand = 123,
gene.names = rownames(data))
top_rank <- topGene(RP, cutoff = cutoff, method = method,
logged = logged, logbase = logbase, gene.names = rownames(data))
top_rank <- topGene(RP, cutoff = 0.05, method = "pfp",
logged = T, logbase = 2, gene.names = rownames(data))
one <- as.data.frame(top_rank$Table1)
two <- as.data.frame(top_rank$Table2)
one
two
is.null(two)
if(ncol(one) != 0){
colnames(one)[3] <- paste0("FC: ", class1, "/", class2)
one <- one %>% dplyr::rename(feature_index = gene.index)
}
one
colnames(two)[3] <- paste0("FC: ", class1, "/", class2)
if(ncol(two) != 0){
colnames(two)[3] <- paste0("FC: ", class1, "/", class2)
two <- two %>% dplyr::rename(feature_index = gene.index)
}
pfp <- as.matrix(RP$pfp)
if (is.null(RP$RPs)) {
RP1 <- as.matrix(RP$RSs)
rank <- as.matrix(RP$RSrank)
}
if (!is.null(RP$RPs)) {
RP1 <- as.matrix(RP$RPs)
rank <- as.matrix(RP$RPrank)
}
ind1 <- which(!is.na(RP1[, 1]))
ind2 <- which(!is.na(RP1[, 2]))
ind3 <- append(ind1, ind2)
ind3 <- unique(ind3)
RP.sort.upin2 <- sort(RP1[ind1, 1], index.return = TRUE)
RP.sort.downin2 <- sort(RP1[ind2, 2], index.return = TRUE)
pfp1 <- pfp[ind1, 1]
pfp2 <- pfp[ind2, 2]
rank1 <- rank[ind1, 1]
rank2 <- rank[ind2, 2]
rp_plot <- data.frame(rank1 = rank1, rank2 = rank2, pfp1 = pfp1, pfp2 = pfp2)
ggplot(rp_plot, aes(x = rank1, y = pfp1)) + geom_point(size = 1.5,
alpha = 0.8) + theme_bw() + xlab("Number of identified features") +
ylab("Estimated PFP") + ggtitle(paste0("Identification of Up-regulated features under class ",
class2))
ggplot(rp_plot, aes(x = rank2, y = pfp2)) + geom_point(size = 1.5,
alpha = 0.8) + theme_bw() + xlab("Number of identified features") +
ylab("Estimated PFP") + ggtitle(paste0("Identification of Down-regulated features under class ",
class2))
devtools::install_github("pcastellanoescuder/POMA")
shiny::runApp()
?PomaLasso
?POMA::PomaLasso
POMA::PomaLasso
shiny::runApp()
runApp()
runApp()
st000336 %>% PomaImpute() %>% PomaLasso(ntest = 20)
lala <- st000336 %>% PomaImpute() %>% PomaLasso(ntest = 20)
lala$confusionMatrix$table
lala$confusionMatrix
lala$confusionMatrix$positive
lala$confusionMatrix$dots
lala$confusionMatrix
lala$confusionMatrix$overall
lala$confusionMatrix$byClass
lala$confusionMatrix$mode
rbind(lala$confusionMatrix$overall, lala$confusionMatrix$byClass)
cbind(lala$confusionMatrix$overall, lala$confusionMatrix$byClass)
lala$confusionMatrix$byClass %>% as_tibble()
lala$confusionMatrix$byClass %>% as_data_frame()
lala$confusionMatrix$byClass %>% as.data.frame()
lala$confusionMatrix$byClass %>% as.data.frame() %>% rownames_to_column("metric")
lala$confusionMatrix$byClass %>% as.data.frame() %>% rownames_to_column("metric") %>% dplyr::rename(value = 2)
lala$confusionMatrix$overall %>% as.data.frame() %>% rownames_to_column("metric") %>% dplyr::rename(value = 2)
runApp()
runApp()
runApp()
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
?includeScript
runApp('app')
runApp('app')
runApp()
runApp('app')
runApp('app')
library(POMA)
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
usethis::use_code_of_conduct()
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
library(ggplot2)
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
?plotly::ggplotly
runApp('app')
?toImageButtonOptions
plotly::config()
?plotly::config()
library(plotly)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
poma_download <- list(
name = "poma_dwn",
icon = "camera",
click = htmlwidgets::JS(
"function(el, x) {
var gd = document.getElementById(el.id);
Plotly.downloadImage(gd, {format: 'png', width: 1200, height: 1600, filename: 'plot'});
}"
)
)
runApp('app')
runApp('app')
shiny::runApp()
runApp()
?source
runApp()
runApp()
runApp()
runApp()
source("R/server-univariate.R",local = FALSE)
source("R/server-univariate.R")
runApp()
runApp()
?PomaNorm
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('app')
shiny::runApp(appDir = "app")
devtools::install_github("pcastellanoescuder/POMA")
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
library(POMA)
POMA::PomaBoxplots(st000336)
shiny::runApp('app')
PO
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
rmarkdown::pandoc_version()
packageVersion("rmarkdown")
pandoc2.0()
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
data("diamonds")
diamonds %>% select_if(is.integer)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
?PomaUnivariate
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
Poma::PomaClust(st000284)
POMA::PomaClust(st000284)
POMA::PomaClust(st000284, show_clusters = FALSE)
POMA::PomaLasso(alpha = c(0.1,0.9))
st000336 %>% PomaImpute() %>% POMA::PomaLasso(alpha = c(0.1,0.9))
warnings()
PomaCorr(st000284)
PomaCorr(st000284, corr_type = "glasso")
aaa <- Ã§PomaCorr(st000284, corr_type = "glasso")
aaa <- PomaCorr(st000282 )
aaa <- PomaCorr(st000284)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
PomaMultivariate
runApp('app')
runApp('app')
PomaMultivariate()
?PomaMultivariate()
mixOmics::plsda
?mixOmics::plsda
PomaMultivariate
?mixOmics::perf
runApp('app')
mixOmics::splsda()
?mixOmics::splsda()
PomaMultivariate
?mixOmics::tune.splsda
?mixOmics::splsda
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
devtools::install_github("pcastellanoescuder/POMA")
install.packages("devtools")
devtools::install_github("pcastellanoescuder/POMA")
# for shiny
library(bs4Dash)
library(shiny)
library(DT)
library(plotly)
library(shinyhelper)
library(rmarkdown)
library(tidyverse)
library(shinyWidgets)
library(patchwork)
library(ggraph)
library(Biobase)
library(fresh)
# for EDA report
library(reshape2)
library(knitr)
runApp('app')
devtools::install_github("pcastellanoescuder/POMA")
install.packages("shape")
devtools::install_github("pcastellanoescuder/POMA")
devtools::install_github("pcastellanoescuder/POMA")
devtools::install_github("pcastellanoescuder/POMA")
devtools::install_github("pcastellanoescuder/POMA")
devtools::install_github("pcastellanoescuder/POMA")
devtools::install_github("pcastellanoescuder/POMA")
install.pack
/Library/Frameworks/R.framework/()
devtools::install_github("pcastellanoescuder/POMA")
devtools::install_github("pcastellanoescuder/POMA")
install.packages("shape")
# CRAN packages
installifnot <- function(pckgName){
if (!(require(pckgName, character.only = TRUE))) {
install.packages(pckgName, dep = TRUE)
require(pckgName, character.only = TRUE)
}
}
pk1 <- c('shiny', 'DT', 'bs4Dash', 'reshape2', 'plotly', 'fresh', 'shinyhelper', 'ggraph', 'rmarkdown',
'shinyWidgets', 'tidyverse', 'knitr', 'patchwork', 'BiocManager')
for (i in 1:length(pk1)){
installifnot(pk1[i])
};BiocManager::install("Biobase")
# for shiny
library(bs4Dash)
library(shiny)
library(DT)
library(plotly)
library(shinyhelper)
library(rmarkdown)
library(tidyverse)
library(shinyWidgets)
library(patchwork)
library(ggraph)
library(Biobase)
library(fresh)
# for EDA report
library(reshape2)
library(knitr)
library(POMA)
devtools::install_github("pcastellanoescuder/POMA")
runApp('app')
runApp('app')
runApp()
shiny::runApp('app')
runApp('app')
?ComplexHeatmap::Heatmap
POMA:PomaDensity()
runApp('app')
POMA::PomaDensity(st000284)
POMA::PomaDensity(st000284, group = "features")
st000284 %>% PomaNorm() %>% POMA::PomaDensity(group = "features")
st000284 %>% PomaNorm() %>% POMA::PomaDensity(group = "features") %>% ggplotly()
runApp('app')
st000336 %>% PomaImpute() %>% PomaNorm() %>% PomaLasso(alpha = 0.0001)
?PomaRandForest
runApp('app')
runApp('app')
?PomaLasso
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
POMA::PomaClust(st0)
library(POMA)
POMA::PomaClust(st000284)
shiny::runApp('app')
runApp('app')
?PomaClust
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
