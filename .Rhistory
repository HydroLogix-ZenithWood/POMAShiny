featureNames(msnset2) <- nms
exprs(msnset2)
shiny::runApp('app')
runApp('app')
data <- st000284
Biobase::pData(data) %>%
rownames_to_column("ID") %>%
select(1,2) %>%
bind_cols(t(exprs(data)))
exprs(data)
t(exprs(data))
prepared_data <- Biobase::pData(data) %>%
rownames_to_column("ID") %>%
select(1,2) %>%
bind_cols(as.data.frame(t(exprs(data))))
View(prepared_data)
Biobase::pData(data) %>%
rownames_to_column("ID") %>%
select(1,2) %>%
bind_cols(as.data.frame(t(exprs(data))))
runApp('app')
msnset <- st000336[11:15, c(1:4, 13:16)]
exprs(msnset)
pData(msnset)
## grouping with a list
grp <- as.factor(c(1, 1, 2, 2, 3))
nms <- c("histidine_isoleucine", "leucine_lysine", "methionine")
## optional naming
msnset2 <- combineFeatures(msnset, groupBy = grp, method = "sum", redundancy.handler = "unique")
featureNames(msnset2) <- nms
exprs(msnset2)
## optional naming
msnset2 <- combineFeatures(msnset, groupBy = grp, method = "mean", redundancy.handler = "unique")
featureNames(msnset2) <- nms
exprs(msnset2)
## optional naming
msnset2 <- combineFeatures(msnset, groupBy = grp, method = "median", redundancy.handler = "unique")
featureNames(msnset2) <- nms
exprs(msnset2)
## optional naming
msnset2 <- combineFeatures(msnset, groupBy = grp, method = "weighted mean", redundancy.handler = "unique")
## optional naming
msnset2 <- combineFeatures(msnset, groupBy = grp, method = "weighted.mean", redundancy.handler = "unique")
## optional naming
msnset2 <- combineFeatures(msnset, groupBy = grp, method = "medpolish", redundancy.handler = "unique")
## optional naming
msnset2 <- combineFeatures(msnset, groupBy = grp, method = "robust", redundancy.handler = "unique")
## optional naming
msnset2 <- combineFeatures(msnset, groupBy = grp, method = "iPQF", redundancy.handler = "unique")
## optional naming
msnset2 <- combineFeatures(msnset, groupBy = grp, method = "NTR", redundancy.handler = "unique")
comb_file <- featureNames(st000284)
comb_file <- featureNames(st000284) %>%
as.tibble()
comb_file <- featureNames(st000284) %>%
as_tibble()
View(comb_file)
30*3
113-90
comb_file <- featureNames(st000284) %>%
as_tibble() %>%
mutate(my_group = c(rep(1, 30), rep(2, 30), rep(3, 30), rep(4, 23)),
name = c(rep("ft_one", 30), rep("ft_two", 30), rep("ft_three", 30), rep("ft_four", 23)))
View(comb_file)
readr::write_csv(comb_file, "/Users/pol/Desktop/comb_file.csv")
runApp('app')
prepared_data <- Biobase::pData(st000284) %>%
rownames_to_column("ID") %>%
select(1,2) %>%
bind_cols(as.data.frame(t(exprs(st000284))))
readr::write_csv(prepared_data[,1:2], "/Users/pol/Desktop/target_comb.csv")
readr::write_csv(prepared_data[,3:ncol(prepared_data)], "/Users/pol/Desktop/feat_comb.csv")
runApp('app')
runApp('app')
runApp('app')
prepared_data <- Biobase::pData(st000284) %>%
rownames_to_column("ID")
View(prepared_data)
readr::write_csv(prepared_data, "/Users/pol/Desktop/target_comb.csv")
runApp('app')
msnset <- st000336[11:15, c(1:4, 13:16)]
exprs(msnset)
pData(msnset)
features <- data.frame(feature1 = c(rnorm(5, mean = 3, sd = 0.5), rnorm(5, mean = 2.5, sd = 0.5)),
feature2 = c(rnorm(5, mean = 1, sd = 0.5), rnorm(5, mean = 1, sd = 0.5)),
feature3 = c(rnorm(5, mean = 2, sd = 0.5), rnorm(5, mean = 2, sd = 0.5)),
feature4 = c(rnorm(5, mean = 2, sd = 0.5), rnorm(5, mean = 2.5, sd = 0.5)),
feature5 = c(rnorm(5, mean = 14, sd = 0.5), rnorm(5, mean = 20, sd = 0.5)),
feature6 = c(rnorm(5, mean = 8, sd = 0.5), rnorm(5, mean = 9, sd = 0.5)))
View(features)
group = c(rep("Control", 5), rep("Case", 5))
target <- data.frame(ID = c("sample1", "sample2", "sample3", "sample4", "sample5"),
group = c(rep("Control", 5), rep("Case", 5)))
View(target)
grouping <- data.frame(feature = c("feature1", "feature2", "feature3", "feature5", "feature6"),
grouping_factor = c(1, 1, 2, 3, 4, 4),
new_name = c("features1_2", "features1_2", "feature3", "features5_6", "features5_6"))
grouping <- data.frame(feature = c("feature1", "feature2", "feature3", "feature5", "feature6"),
grouping_factor = c(1, 1, 2, 3, 4, 4),
new_name = c("features1_2", "features1_2", "feature3", "feature4", "features5_6", "features5_6"))
grouping <- data.frame(feature = c("feature1", "feature2", "feature3", "feature4", "feature5", "feature6"),
grouping_factor = c(1, 1, 2, 3, 4, 4),
new_name = c("features1_2", "features1_2", "feature3", "feature4", "features5_6", "features5_6"))
View(grouping)
runApp('app')
readr::write_csv(prepared_data, "/Users/pol/Desktop/target_comb.csv")--
/)
features <- data.frame(feature1 = c(rnorm(5, mean = 3, sd = 0.5), rnorm(5, mean = 2.5, sd = 0.5)),
feature2 = c(rnorm(5, mean = 1, sd = 0.5), rnorm(5, mean = 1, sd = 0.5)),
feature3 = c(rnorm(5, mean = 2, sd = 0.5), rnorm(5, mean = 2, sd = 0.5)),
feature4 = c(rnorm(5, mean = 2, sd = 0.5), rnorm(5, mean = 2.5, sd = 0.5)),
feature5 = c(rnorm(5, mean = 14, sd = 0.5), rnorm(5, mean = 20, sd = 0.5)),
feature6 = c(rnorm(5, mean = 8, sd = 0.5), rnorm(5, mean = 9, sd = 0.5)))
target <- data.frame(ID = c("sample1", "sample2", "sample3", "sample4", "sample5"),
group = c(rep("control", 5), rep("case", 5)))
grouping <- data.frame(feature = c("feature1", "feature2", "feature3", "feature4", "feature5", "feature6"),
grouping_factor = c(1, 1, 2, 3, 4, 4),
new_name = c("features1_2", "features1_2", "feature3", "feature4", "features5_6", "features5_6"))
readr::write_csv(target, "/Users/pol/Dropbox/POMA/POMAShiny/example_data/example_target.csv")
readr::write_csv(features, "/Users/pol/Dropbox/POMA/POMAShiny/example_data/example_features.csv")
readr::write_csv(grouping, "/Users/pol/Dropbox/POMA/POMAShiny/example_data/example_grouping.csv")
runApp('app')
features <- data.frame(feature1 = c(rnorm(5, mean = 3, sd = 0.5), rnorm(5, mean = 2.5, sd = 0.5)),
feature2 = c(rnorm(5, mean = 1, sd = 0.5), rnorm(5, mean = 1, sd = 0.5)),
feature3 = c(rnorm(5, mean = 2, sd = 0.5), rnorm(5, mean = 2, sd = 0.5)),
feature4 = c(rnorm(5, mean = 2, sd = 0.5), rnorm(5, mean = 2.5, sd = 0.5)),
feature5 = c(rnorm(5, mean = 14, sd = 0.5), rnorm(5, mean = 20, sd = 0.5)),
feature6 = c(rnorm(5, mean = 8, sd = 0.5), rnorm(5, mean = 9, sd = 0.5)))
rownames(features)
View(features)
library(tidyverse)
features <- tibble(feature1 = c(rnorm(5, mean = 3, sd = 0.5), rnorm(5, mean = 2.5, sd = 0.5)),
feature2 = c(rnorm(5, mean = 1, sd = 0.5), rnorm(5, mean = 1, sd = 0.5)),
feature3 = c(rnorm(5, mean = 2, sd = 0.5), rnorm(5, mean = 2, sd = 0.5)),
feature4 = c(rnorm(5, mean = 2, sd = 0.5), rnorm(5, mean = 2.5, sd = 0.5)),
feature5 = c(rnorm(5, mean = 14, sd = 0.5), rnorm(5, mean = 20, sd = 0.5)),
feature6 = c(rnorm(5, mean = 8, sd = 0.5), rnorm(5, mean = 9, sd = 0.5)))
features
features <- tibble(feature1 = c(rnorm(5, mean = 3, sd = 0.5), rnorm(5, mean = 2.5, sd = 0.5)),
feature2 = c(rnorm(5, mean = 1, sd = 0.5), rnorm(5, mean = 1, sd = 0.5)),
feature3 = c(rnorm(5, mean = 2, sd = 0.5), rnorm(5, mean = 2, sd = 0.5)),
feature4 = c(rnorm(5, mean = 2, sd = 0.5), rnorm(5, mean = 2.5, sd = 0.5)),
feature5 = c(rnorm(5, mean = 14, sd = 0.5), rnorm(5, mean = 20, sd = 0.5)),
feature6 = c(rnorm(5, mean = 8, sd = 0.5), rnorm(5, mean = 9, sd = 0.5))) %>%
remove_rownames()
features
features <- tibble(feature1 = c(rnorm(5, mean = 3, sd = 0.5), rnorm(5, mean = 2.5, sd = 0.5)),
feature2 = c(rnorm(5, mean = 1, sd = 0.5), rnorm(5, mean = 1, sd = 0.5)),
feature3 = c(rnorm(5, mean = 2, sd = 0.5), rnorm(5, mean = 2, sd = 0.5)),
feature4 = c(rnorm(5, mean = 2, sd = 0.5), rnorm(5, mean = 2.5, sd = 0.5)),
feature5 = c(rnorm(5, mean = 14, sd = 0.5), rnorm(5, mean = 20, sd = 0.5)),
feature6 = c(rnorm(5, mean = 8, sd = 0.5), rnorm(5, mean = 9, sd = 0.5)))
target <- tibble(ID = c("sample1", "sample2", "sample3", "sample4", "sample5"),
group = c(rep("control", 5), rep("case", 5)))
target <- tibble(ID = c("sample1", "sample2", "sample3", "sample4", "sample5", "sample6"),
group = c(rep("control", 3), rep("case", 3)))
grouping <- tibble(feature = c("feature1", "feature2", "feature3", "feature4", "feature5", "feature6"),
grouping_factor = c(1, 1, 2, 3, 4, 4),
new_name = c("features1_2", "features1_2", "feature3", "feature4", "features5_6", "features5_6"))
View(features)
View(grouping)
View(target)
readr::write_csv(target, "/Users/pol/Dropbox/POMA/POMAShiny/example_data/example_target.csv")
readr::write_csv(features, "/Users/pol/Dropbox/POMA/POMAShiny/example_data/example_features.csv")
readr::write_csv(grouping, "/Users/pol/Dropbox/POMA/POMAShiny/example_data/example_grouping.csv")
runApp('app')
features <- tibble(feature1 = c(rnorm(3, mean = 3, sd = 0.5), rnorm(3, mean = 2.5, sd = 0.5)),
feature2 = c(rnorm(3, mean = 1, sd = 0.5), rnorm(3, mean = 1, sd = 0.5)),
feature3 = c(rnorm(3, mean = 2, sd = 0.5), rnorm(3, mean = 2, sd = 0.5)),
feature4 = c(rnorm(3, mean = 2, sd = 0.5), rnorm(3, mean = 2.5, sd = 0.5)),
feature5 = c(rnorm(3, mean = 14, sd = 0.5), rnorm(3, mean = 20, sd = 0.5)),
feature6 = c(rnorm(3, mean = 8, sd = 0.5), rnorm(3, mean = 9, sd = 0.5)))
target <- tibble(ID = c("sample1", "sample2", "sample3", "sample4", "sample5", "sample6"),
group = c(rep("control", 3), rep("case", 3)))
grouping <- tibble(feature = c("feature1", "feature2", "feature3", "feature4", "feature5", "feature6"),
grouping_factor = c(1, 1, 2, 3, 4, 4),
new_name = c("features1_2", "features1_2", "feature3", "feature4", "features5_6", "features5_6"))
readr::write_csv(target, "/Users/pol/Dropbox/POMA/POMAShiny/example_data/example_target.csv")
readr::write_csv(features, "/Users/pol/Dropbox/POMA/POMAShiny/example_data/example_features.csv")
readr::write_csv(grouping, "/Users/pol/Dropbox/POMA/POMAShiny/example_data/example_grouping.csv")
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
target <- readr::read_csv("example_data/example_target.csv")
features <- readr::read_csv("example_data/example_features.csv")
grouping <- readr::read_csv("example_data/example_grouping.csv")
data <- PomaMSnSetClass(target, features)
data2 <- MSnbase::combineFeatures(data, groupBy = grouping$grouping_factor, method = "sum")
featureData(data2)
featureCV(data2)
featureData(data2)@varLabels
ddd <- featureData(data2)
ddd@varMetadata
ddd@data
nms <- unique(grouping$new_name)
featureNames(data2) <- nms
ddd@data
featureData(data2)@data
data <- data2
cv_data <- as.data.frame(t(featureData(data)@data))
View(cv_data)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
rownames(pData(data))
rownames(pData(st000284))
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
# for shiny
library(bs4Dash)
library(shiny)
library(DT)
library(plotly)
library(shinyhelper)
library(rmarkdown)
library(tidyverse)
library(shinyWidgets)
library(patchwork)
library(POMA)
library(ggraph)
library(Biobase)
library(fresh)
library(MSnbase)
# for EDA report
library(reshape2)
library(knitr)
runApp('app')
?bs4DashPage
runApp('app')
shiny::runApp('app')
?bs4DashPage
bs4DashGallery()
install.packages("bs4Dash")
install.packages("bs4Dash")
shiny::runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
bs4Dash::ionicon()
bs4Dash::ionicon("home")
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
?use_theme
devtools::install_version("bs4Dash", version = "0.5.0", repos = "http://cran.us.r-project.org")
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
?dashboardPage
dashboardPage(
# old_school = FALSE,
# sidebar_min = TRUE,
# sidebar_collapsed = FALSE,
# controlbar_collapsed = TRUE,
# controlbar_overlay = TRUE,
# title = "POMAShiny",
## NAVBAR ----------------------------------------------------------------------
# bs4DashNavbar(
#   skin = "dark",
#   status = "primary",
#   border = TRUE,
#   sidebarIcon = "chevron-left",
#   controlbarIcon = "th",
#   fixed = FALSE,
#   HTML('<script async defer src="https://buttons.github.io/buttons.js"></script>
#        <a class="github-button" href="https://github.com/pcastellanoescuder/POMAShiny"
#        data-show-count="true" aria-label="Star pcastellanoescuder/POMAShiny on GitHub">Star</a>'),
#   HTML('<script async defer src="https://buttons.github.io/buttons.js"></script>
#        <a class="github-button" href="https://github.com/pcastellanoescuder/POMAShiny/issues"
#        data-show-count="true" aria-label="Issue pcastellanoescuder/POMAShiny on GitHub">Issue</a>'),
#   includeScript("google-analytics.js")
#   ),
dashboardHeader(title = "POMAShiny"),
## SIDEBAR ----------------------------------------------------------------------
dashboardSidebar(
# skin = "dark",
# status = "warning",
# title = HTML("<b>POMAShiny</b>"),
# brandColor = "warning",
# url = "https://github.com/pcastellanoescuder/POMAShiny",
# src = "https://github.com/pcastellanoescuder/POMA/blob/master/man/figures/logo.png?raw=true",
# elevation = 3,
# opacity = 0.8,
sidebarMenu(
menuItem("Home", tabName = "home", icon = icon("home")),
menuItem("Upload Data", tabName = "inputdata", icon = icon("upload")),
menuItem("Pre-processing", tabName = "preprocessing", icon = icon("wrench"), startExpanded = FALSE,
menuSubItem("Impute Values", tabName = "impute_vals", icon = icon("angle-double-right")),
menuSubItem("Normalization", tabName = "normalization", icon = icon("angle-double-right")),
menuSubItem("Outlier Detection", tabName = "outliers", icon = icon("angle-double-right"))
),
menuItem("EDA", tabName = "visualization", icon = icon("search"), startExpanded = FALSE,
menuSubItem("Volcano Plot", tabName = "volcanoPlot", icon = icon("angle-double-right")),
menuSubItem("Boxplot", tabName = "boxPlot", icon = icon("angle-double-right")),
menuSubItem("Density Plot", tabName = "density", icon = icon("angle-double-right")),
menuSubItem("Heatmap", tabName = "HeatMap", icon = icon("angle-double-right"))
),
menuItem("Statistical Analysis", tabName = "statistics", icon = icon("chart-bar"), startExpanded = FALSE,
menuSubItem("Univariate Analysis", tabName = "univariate", icon = icon("angle-double-right")),
menuSubItem("Multivariate Analysis", tabName = "multivariate", icon = icon("angle-double-right")),
menuSubItem("Cluster Analysis", tabName = "cluster", icon = icon("angle-double-right")),
menuSubItem("Correlation Analysis", tabName = "correlations", icon = icon("angle-double-right")),
menuSubItem("Regularized Regression", tabName = "featureselection", icon = icon("angle-double-right")),
menuSubItem("Random Forest", tabName = "randomforest", icon = icon("angle-double-right")),
menuSubItem("Rank Products", tabName = "rankprod", icon = icon("angle-double-right")),
menuSubItem("Odds Ratio", tabName = "odds", icon = icon("angle-double-right"))
),
menuItem("Help", tabName = "help", icon = icon("question")),
# bs4SidebarMenuItem("Tutorials", tabName = "tutorial", icon = "youtube"),
menuItem("POMA", tabName = "poma", icon = icon("box")),
menuItem("License", tabName = "license", icon = icon("clipboard")),
menuItem("Code of Conduct", tabName = "conduct", icon = icon("clipboard-check")),
menuItem("Contact", tabName = "contact", icon = icon("user"))
)
),
## CONTROLBAR ----------------------------------------------------------------------
# bs4DashControlbar(
#   skin = "light",
#   title = "Additional Information",
#
#   bs4DashControlbarMenu(
#     id = "controlbar_menu",
#     status = "primary",
#     side = "right",
#     vertical = FALSE,
#
#     bs4DashControlbarItem(
#       tabName = "Active Dataset",
#       active = TRUE,
#
#       verbatimTextOutput("samples_num"),
#       verbatimTextOutput("groups_num"),
#       verbatimTextOutput("features_num"),
#       verbatimTextOutput("covariates_num")
#     )
#     )
#   ),
## BODY ----------------------------------------------------------------------
dashboardBody(
use_theme(poma_theme),
tabItems(
tabItem("home",
source("ui-tab-landing.R", local=TRUE)$value)#,
# tabItem("inputdata",
#            source("ui-tab-inputdata.R", local=TRUE)$value),
# tabItem("impute_vals",
#            source("ui-tab-imputevalues.R", local=TRUE)$value),
# tabItem("normalization",
#            source("ui-tab-normalization.R", local=TRUE)$value),
# tabItem("outliers",
#            source("ui-tab-outliers.R", local=TRUE)$value),
# tabItem("volcanoPlot",
#            source("ui-tab-volcano.R", local=TRUE)$value),
# tabItem("boxPlot",
#            source("ui-tab-boxplot.R", local=TRUE)$value),
# tabItem("density",
#            source("ui-tab-density.R", local=TRUE)$value),
# tabItem("HeatMap",
#            source("ui-tab-heatmap.R", local=TRUE)$value),
# tabItem("univariate",
#            source("ui-tab-univariate.R", local=TRUE)$value),
# tabItem("multivariate",
#            source("ui-tab-multivariate.R", local=TRUE)$value),
# tabItem("cluster",
#            source("ui-tab-cluster.R", local=TRUE)$value),
# tabItem("correlations",
#            source("ui-tab-correlations.R", local=TRUE)$value),
# tabItem("featureselection",
#            source("ui-tab-featureselection.R", local=TRUE)$value),
# tabItem("randomforest",
#            source("ui-tab-random_forest.R", local=TRUE)$value),
# tabItem("rankprod",
#            source("ui-tab-rankprod.R", local=TRUE)$value),
# tabItem("odds",
#            source("ui-tab-odds.R", local=TRUE)$value),
# tabItem("help",
#            source("ui-tab-help.R", local=TRUE)$value),
# # bs4TabItem("tutorial",
# #            source("ui-tab-tutorial.R", local=TRUE)$value),
# tabItem("poma",
#            source("ui-tab-poma.R", local=TRUE)$value),
# tabItem("license",
#            source("ui-tab-license.R", local=TRUE)$value),
# tabItem("conduct",
#            source("ui-tab-conduct.R", local=TRUE)$value),
# tabItem("contact",
#            source("ui-tab-contact.R", local=TRUE)$value)
) # bs4TabItems
)#, # bs4DashBody
## FOOTER ----------------------------------------------------------------------
# bs4DashFooter(
#
#   fluidRow(
#     column(
#       width = 12,
#       align = "center",
#       a(href = "https://pcastellanoescuder.github.io", HTML("<b>Pol Castellano Escuder</b>")), ", ",
#       a(href = "http://www.nutrimetabolomics.com/members/raul-gonzalez-dominguez", "Raúl González Domínguez"), ", ",
#       a(href = "https://sites.google.com/view/estbioinfo/home?authuser=0", "Francesc Carmona Pontaque"), ", ",
#       a(href = "http://www.nutrimetabolomics.com/team/cristina", "Cristina Andrés Lacueva"), " and ",
#       a(href = "https://webgrec.ub.edu/webpages/000011/cat/asanchez.ub.edu.html", "Alex Sánchez Pla"),
#       br(),
#       "Statistics and Bioinformatics Research Group", "and",
#       "Biomarkers and Nutritional & Food Metabolomics Research Group", "from",
#       br(),
#       "University of Barcelona",
#       br(),
#       "Copyright (C) 2021, code licensed under GPL-3.0",
#       br(),
#       "Code available on Github:", a(href = "https://github.com/pcastellanoescuder/POMAShiny", "https://github.com/pcastellanoescuder/POMAShiny")
#       )
#     ),
#   right_text = NULL
#   )
) # bs4DashPage
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
?dashboardPage
runApp('app')
bs4Dash::dashboardFooter()
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
# status = "warning",
# title = HTML("<b>POMAShiny</b>"),
# brandColor = "warning",
# url = "https://github.com/pcastellanoescuder/POMAShiny",
# src = "https://gith
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
?bs4Card
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
